{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Learning-Note \u8bb0\u5f55\u5b66\u4e60\u7b14\u8bb0\u53ca\u603b\u7ed3\uff0c\u76ee\u524d\u5305\u62ecJFR\u3001Lucene\u3001elasticsearch\uff0c\u4ee5\u53ca\u5bf9es\u5b98\u7f51\u82f1\u6587\u6587\u6863\u7684\u7ffb\u8bd1","title":"Learning-Note"},{"location":"#learning-note","text":"\u8bb0\u5f55\u5b66\u4e60\u7b14\u8bb0\u53ca\u603b\u7ed3\uff0c\u76ee\u524d\u5305\u62ecJFR\u3001Lucene\u3001elasticsearch\uff0c\u4ee5\u53ca\u5bf9es\u5b98\u7f51\u82f1\u6587\u6587\u6863\u7684\u7ffb\u8bd1","title":"Learning-Note"},{"location":"Elasticsearch/queries/Boolean%20Query/","text":"Boolean query A query that matches documents matching boolean combinations of other queries. The bool query maps to Lucene BooleanQuery . It is built using one or more boolean clauses, each clause with a typed occurrence. The occurrence types are: \u5e03\u5c14\u67e5\u8be2\u53ef\u4ee5\u7ed3\u5408\u5176\u4ed6\u67e5\u8be2\u5339\u914d\u6587\u6863\uff0c\u6620\u5c04\u5230Lucene\u7684BooleanQuery\u3002\u5b83\u53ef\u4ee5\u7531\u4e00\u4e2a\u6216\u8005\u591a\u4e2aboolean\u8bed\u6cd5\u6784\u5efa\u800c\u6210\uff0c\u6bcf\u4e00\u4e2a\u8bed\u6cd5\u4f60\u90fd\u53ef\u4ee5\u8f93\u5165\u5bf9\u5e94\u7684\u67e5\u8be2\u6761\u4ef6\u3002\u6709\u4ee5\u4e0b\u6761\u4ef6\uff1a Occur description must The clause (query) must appear in matching documents and will contribute to the score. \u6761\u4ef6\u5fc5\u987b\u51fa\u73b0\u5728\u5339\u914d\u6587\u6863\u4e2d\uff0c\u5e76\u4e14\u4f1a\u53c2\u4e0e\u6253\u5206 filter The clause (query) must appear in matching documents. However unlike must the score of the query will be ignored. Filter clauses are executed in filter context , meaning that scoring is ignored and clauses are considered for caching. \u6761\u4ef6\u5fc5\u987b\u51fa\u73b0\u5728\u5339\u914d\u6587\u6863\u4e2d\uff0c\u4f46\u662f\u548cmust\u4e0d\u540c\uff0c\u4f1a\u5ffd\u7565\u6253\u5206\u3002filter\u662f\u5728filter\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\uff0c\u90a3\u5c31\u610f\u5473\u7740\u6253\u5206\u4f1a\u88ab\u5ffd\u7565\uff0c\u540c\u65f6\u4f1a\u4f7f\u7528\u7f13\u5b58 should The clause (query) should appear in the matching document. \u8fd9\u4e2a\u6761\u4ef6\u53ef\u80fd\u4f1a\u5339\u914d\u6587\u6863 must_not The clause (query) must not appear in the matching documents. Clauses are executed in filter context meaning that scoring is ignored and clauses are considered for caching. Because scoring is ignored, a score of 0 for all documents is returned. \u8fd9\u4e2a\u6761\u4ef6\u4e0d\u5e94\u8be5\u51fa\u73b0\u5728\u6587\u6863\u4e2d\uff0c\u8fd9\u4e2a\u8bed\u6cd5\u4f1a\u5728filter\u4e0a\u4e0b\u6587\u4e2d\u51fa\u73b0\uff0c\u8fd9\u5c31\u610f\u5473\u7740\u4f1a\u5ffd\u7565\u6253\u5206\uff0c\u540c\u65f6\u4f1a\u4f7f\u7528\u7f13\u5b58 The bool query takes a more-matches-is-better approach, so the score from each matching must or should clause will be added together to provide the final _score for each document. bool\u67e5\u8be2\u91c7\u7528\u7684\u662f\u5339\u914d\u6570\u8d8a\u591a\u8d8a\u597d\u7684\u65b9\u5f0f\uff0c\u6240\u4ee5\u6bcf\u4e2amust\u6216\u8005should\u7684\u5206\u6570\u90fd\u4f1a\u88ab\u52a0\u5728\u4e00\u8d77\uff0c\u4ee5\u4fbf\u4e8e\u5bf9\u6bcf\u7bc7\u6587\u6863\u63d0\u4f9b\u6700\u7ec8\u5f97\u5206\u3002 POST _search { \"query\": { \"bool\" : { \"must\" : { \"term\" : { \"user\" : \"kimchy\" } }, \"filter\": { \"term\" : { \"tag\" : \"tech\" } }, \"must_not\" : { \"range\" : { \"age\" : { \"gte\" : 10, \"lte\" : 20 } } }, \"should\" : [ { \"term\" : { \"tag\" : \"wow\" } }, { \"term\" : { \"tag\" : \"elasticsearch\" } } ], \"minimum_should_match\" : 1, \"boost\" : 1.0 } } } Scoring with bool.filter Queries specified under the filter element have no effect on scoring\u2009\u2014\u2009scores are returned as 0 . Scores are only affected by the query that has been specified. For instance, all three of the following queries return all documents where the status field contains the term active . filter\u4e0b\u7684\u67e5\u8be2\u5206\u6570\u6ca1\u6709\u5f71\u54cd---\u8fd4\u56de\u7684\u5206\u6570\u4e3a0\uff0c\u5206\u6570\u53ea\u5728\u6307\u5b9a\u7684\u67e5\u8be2\u4e2d\u624d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4e09\u4e2a\u67e5\u8be2\u4f1a\u8fd4\u56de\u6240\u6709\u7684\u6587\u6863\uff0c\u6761\u4ef6\u662fstatus\u5305\u542b\u8bcd\u6761active This first query assigns a score of 0 to all documents, as no scoring query has been specified: \u7b2c\u4e00\u4e2a\u67e5\u8be2\u5339\u914d\u5230\u7684\u6240\u6709\u6587\u6863\u5206\u6570\u4e3a0\uff0c\u56e0\u4e3a\u6ca1\u6709\u6307\u5b9a\u6253\u5206\u7684\u67e5\u8be2\u3002 GET _search { \"query\": { \"bool\": { \"filter\": { \"term\": { \"status\": \"active\" } } } } } This bool query has a match_all query, which assigns a score of 1.0 to all documents. \u8fd9\u4e2abool\u67e5\u8be2\u53c8\u4e00\u4e2amatch_all(\u5339\u914d\u6240\u6709\u6587\u6863)\u7684\u67e5\u8be2\uff0c\u6240\u6709\u5339\u914d\u5230\u7684\u6587\u6863\u7684\u76f8\u5173\u6027\u5206\u6570\u90fd\u4e3a1.0 GET _search { \"query\": { \"bool\": { \"must\": { \"match_all\": {} }, \"filter\": { \"term\": { \"status\": \"active\" } } } } } This constant_score query behaves in exactly the same way as the second example above. The constant_score query assigns a score of 1.0 to all documents matched by the filter. constant_score\u67e5\u8be2\u548c\u4e0a\u9762\u7684\u4f8b\u5b50\u8868\u73b0\u5b8c\u5168\u76f8\u540c\uff0c\u8fd9\u4e2a\u67e5\u8be2\u4f1a\u7ed9\u6240\u6709\u5339\u914d\u5230\u7684\u6587\u6863\u7684\u5206\u6570\u8d4b\u503c\u4e3a1.0 GET _search { \"query\": { \"constant_score\": { \"filter\": { \"term\": { \"status\": \"active\" } } } } } Using named queries to see which clauses matched If you need to know which of the clauses in the bool query matched the documents returned from the query, you can use named queries to assign a name to each clause. \u5982\u679c\u4f60\u9700\u8981\u77e5\u9053bool\u67e5\u8be2\u4e2d\u54ea\u4e00\u4e2a\u8bed\u53e5\u547d\u4e2d\u6587\u6863\uff0c\u53ef\u4ee5\u4f7f\u7528named query\u5bf9\u8fd9\u4e2a\u8bed\u53e5\u6307\u5b9a\u4e2a\u540d\u79f0","title":"Boolean Query"},{"location":"Elasticsearch/queries/Boolean%20Query/#scoring-with-boolfilter","text":"Queries specified under the filter element have no effect on scoring\u2009\u2014\u2009scores are returned as 0 . Scores are only affected by the query that has been specified. For instance, all three of the following queries return all documents where the status field contains the term active . filter\u4e0b\u7684\u67e5\u8be2\u5206\u6570\u6ca1\u6709\u5f71\u54cd---\u8fd4\u56de\u7684\u5206\u6570\u4e3a0\uff0c\u5206\u6570\u53ea\u5728\u6307\u5b9a\u7684\u67e5\u8be2\u4e2d\u624d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4e09\u4e2a\u67e5\u8be2\u4f1a\u8fd4\u56de\u6240\u6709\u7684\u6587\u6863\uff0c\u6761\u4ef6\u662fstatus\u5305\u542b\u8bcd\u6761active This first query assigns a score of 0 to all documents, as no scoring query has been specified: \u7b2c\u4e00\u4e2a\u67e5\u8be2\u5339\u914d\u5230\u7684\u6240\u6709\u6587\u6863\u5206\u6570\u4e3a0\uff0c\u56e0\u4e3a\u6ca1\u6709\u6307\u5b9a\u6253\u5206\u7684\u67e5\u8be2\u3002 GET _search { \"query\": { \"bool\": { \"filter\": { \"term\": { \"status\": \"active\" } } } } } This bool query has a match_all query, which assigns a score of 1.0 to all documents. \u8fd9\u4e2abool\u67e5\u8be2\u53c8\u4e00\u4e2amatch_all(\u5339\u914d\u6240\u6709\u6587\u6863)\u7684\u67e5\u8be2\uff0c\u6240\u6709\u5339\u914d\u5230\u7684\u6587\u6863\u7684\u76f8\u5173\u6027\u5206\u6570\u90fd\u4e3a1.0 GET _search { \"query\": { \"bool\": { \"must\": { \"match_all\": {} }, \"filter\": { \"term\": { \"status\": \"active\" } } } } } This constant_score query behaves in exactly the same way as the second example above. The constant_score query assigns a score of 1.0 to all documents matched by the filter. constant_score\u67e5\u8be2\u548c\u4e0a\u9762\u7684\u4f8b\u5b50\u8868\u73b0\u5b8c\u5168\u76f8\u540c\uff0c\u8fd9\u4e2a\u67e5\u8be2\u4f1a\u7ed9\u6240\u6709\u5339\u914d\u5230\u7684\u6587\u6863\u7684\u5206\u6570\u8d4b\u503c\u4e3a1.0 GET _search { \"query\": { \"constant_score\": { \"filter\": { \"term\": { \"status\": \"active\" } } } } }","title":"Scoring with bool.filter"},{"location":"Elasticsearch/queries/Boolean%20Query/#using-named-queries-to-see-which-clauses-matched","text":"If you need to know which of the clauses in the bool query matched the documents returned from the query, you can use named queries to assign a name to each clause. \u5982\u679c\u4f60\u9700\u8981\u77e5\u9053bool\u67e5\u8be2\u4e2d\u54ea\u4e00\u4e2a\u8bed\u53e5\u547d\u4e2d\u6587\u6863\uff0c\u53ef\u4ee5\u4f7f\u7528named query\u5bf9\u8fd9\u4e2a\u8bed\u53e5\u6307\u5b9a\u4e2a\u540d\u79f0","title":"Using named queries to see which clauses matched"},{"location":"Elasticsearch/queries/Compound%20queries/","text":"Compound queries ---\u590d\u5408\u67e5\u8be2 \u590d\u5408\u67e5\u8be2\u53ef\u4ee5\u628a\u5176\u4ed6\u7684\u590d\u5408\u67e5\u8be2\u6216\u8005\u53f6\u5b50\u67e5\u8be2\uff0c\u65e2\u53ef\u4ee5\u5c06\u7ed3\u679c\u548c\u5206\u6570\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u6539\u53d8\u4ed6\u4eec\u7684\u884c\u4e3a\uff0c\u4e5f\u53ef\u4ee5\u628aquery\u8f6c\u6362\u4e3afilter\u4e0a\u4e0b\u6587\u3002 \u6709\u8fd9\u4e48\u51e0\u7ec4\u67e5\u8be2\uff1a bool query---\u5e03\u5c14\u67e5\u8be2 \u9ed8\u8ba4\u6709\u8fd9\u51e0\u79cd\u5408\u5e76\u590d\u5408\u53f6\u5b50\u6216\u8005\u590d\u5408\u67e5\u8be2\u8bed\u6cd5\u7684\u67e5\u8be2\uff1amust,should,must_not,filter\u3002must\u548cshould\u4f1a\u7ed3\u5408\u6253\u5206\uff0c\u5339\u914d\u5ea6\u8d8a\u9ad8\uff0c\u5206\u6570\u8d8a\u9ad8 \u3002\u7136\u800cmust_not\u548cfilter\u8bed\u6cd5\u662f\u5728filter\u4e0a\u4e0b\u6587\u4e2d\u67e5\u8be2\u7684\uff0c\u6240\u4ee5\u4e0d\u53c2\u4e0e\u6253\u5206\u3002 boosting query---\u6743\u91cd\u67e5\u8be2 \u8fd4\u56de\u7684\u6587\u6863\u4e2d\u5fc5\u987b\u5339\u914d\u5230positive\u4e2d\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5982\u679c\u6709\u5339\u914d\u5230negative\u4e2d\u7684\u5185\u5bb9\uff0c\u8981\u51cf\u76f8\u5173\u6027\u5206\u6570\uff0c\u53ef\u4ee5\u8bbe\u5b9a\u51cf\u7684\u5206\u6570negative_score GET /_search { \"query\": { \"boosting\" : { \"positive\" : { \"term\" : { \"text\" : \"apple\" } }, \"negative\" : { \"term\" : { \"text\" : \"pie tart fruit crumble tree\" } }, \"negative_boost\" : 0.5 } } } constant_score query \u5bf9\u53e6\u4e00\u4e2aquery\u8fdb\u884c\u5305\u88c5\uff0c\u4f46\u8fd8\u662f\u5728filter\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\uff0c\u6240\u6709\u5339\u914d\u5230\u7684\u6587\u6863\u90fd\u4f1a\u88ab\u8d4b\u4e88\u540c\u4e00\u4e2a\u5e38\u91cf\u5206\"_score\"\u3002 dis_max query \u8fd9\u4e2aquery\u540c\u65f6\u5305\u88c5\u591a\u4e2aquery,\u5e76\u4e14\u8fd4\u56de\u5339\u914d\u4efb\u610fquery\u7684\u6587\u6863\u3002\u7136\u800cbool\u67e5\u8be2\u4f1a\u7ed3\u5408\u6240\u6709\u5339\u914d\u7684query\u7684\u5206\u6570\uff0c\u800cdis_max\u5219\u4f1a\u9009\u62e9\u5355\u4e2a\u5339\u914d\u5ea6\u6700\u9ad8\u7684query\u3002 function_socre query \u4fee\u6539\u4e3b\u8981query\u8fd4\u56de\u7684\u5206\u6570\uff0c\u4fee\u6539\u5206\u6570\u8003\u8651\u7684\u56e0\u7d20\u53ef\u4ee5\u662f\u70ed\u5ea6\uff0c\u8fd1\u56e0\uff0c\u4e3e\u4f8b\uff0c\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5\u6807\u672c\u7b49\u3002","title":"Compound queries"},{"location":"Elasticsearch/queries/Compound%20queries/#compound-queries-","text":"\u590d\u5408\u67e5\u8be2\u53ef\u4ee5\u628a\u5176\u4ed6\u7684\u590d\u5408\u67e5\u8be2\u6216\u8005\u53f6\u5b50\u67e5\u8be2\uff0c\u65e2\u53ef\u4ee5\u5c06\u7ed3\u679c\u548c\u5206\u6570\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u6539\u53d8\u4ed6\u4eec\u7684\u884c\u4e3a\uff0c\u4e5f\u53ef\u4ee5\u628aquery\u8f6c\u6362\u4e3afilter\u4e0a\u4e0b\u6587\u3002 \u6709\u8fd9\u4e48\u51e0\u7ec4\u67e5\u8be2\uff1a","title":"Compound queries ---\u590d\u5408\u67e5\u8be2"},{"location":"Elasticsearch/queries/Compound%20queries/#bool-query-","text":"\u9ed8\u8ba4\u6709\u8fd9\u51e0\u79cd\u5408\u5e76\u590d\u5408\u53f6\u5b50\u6216\u8005\u590d\u5408\u67e5\u8be2\u8bed\u6cd5\u7684\u67e5\u8be2\uff1amust,should,must_not,filter\u3002must\u548cshould\u4f1a\u7ed3\u5408\u6253\u5206\uff0c\u5339\u914d\u5ea6\u8d8a\u9ad8\uff0c\u5206\u6570\u8d8a\u9ad8 \u3002\u7136\u800cmust_not\u548cfilter\u8bed\u6cd5\u662f\u5728filter\u4e0a\u4e0b\u6587\u4e2d\u67e5\u8be2\u7684\uff0c\u6240\u4ee5\u4e0d\u53c2\u4e0e\u6253\u5206\u3002","title":"bool query---\u5e03\u5c14\u67e5\u8be2"},{"location":"Elasticsearch/queries/Compound%20queries/#boosting-query-","text":"\u8fd4\u56de\u7684\u6587\u6863\u4e2d\u5fc5\u987b\u5339\u914d\u5230positive\u4e2d\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5982\u679c\u6709\u5339\u914d\u5230negative\u4e2d\u7684\u5185\u5bb9\uff0c\u8981\u51cf\u76f8\u5173\u6027\u5206\u6570\uff0c\u53ef\u4ee5\u8bbe\u5b9a\u51cf\u7684\u5206\u6570negative_score GET /_search { \"query\": { \"boosting\" : { \"positive\" : { \"term\" : { \"text\" : \"apple\" } }, \"negative\" : { \"term\" : { \"text\" : \"pie tart fruit crumble tree\" } }, \"negative_boost\" : 0.5 } } }","title":"boosting query---\u6743\u91cd\u67e5\u8be2"},{"location":"Elasticsearch/queries/Compound%20queries/#constant_score-query","text":"\u5bf9\u53e6\u4e00\u4e2aquery\u8fdb\u884c\u5305\u88c5\uff0c\u4f46\u8fd8\u662f\u5728filter\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\uff0c\u6240\u6709\u5339\u914d\u5230\u7684\u6587\u6863\u90fd\u4f1a\u88ab\u8d4b\u4e88\u540c\u4e00\u4e2a\u5e38\u91cf\u5206\"_score\"\u3002","title":"constant_score query"},{"location":"Elasticsearch/queries/Compound%20queries/#dis_max-query","text":"\u8fd9\u4e2aquery\u540c\u65f6\u5305\u88c5\u591a\u4e2aquery,\u5e76\u4e14\u8fd4\u56de\u5339\u914d\u4efb\u610fquery\u7684\u6587\u6863\u3002\u7136\u800cbool\u67e5\u8be2\u4f1a\u7ed3\u5408\u6240\u6709\u5339\u914d\u7684query\u7684\u5206\u6570\uff0c\u800cdis_max\u5219\u4f1a\u9009\u62e9\u5355\u4e2a\u5339\u914d\u5ea6\u6700\u9ad8\u7684query\u3002","title":"dis_max query"},{"location":"Elasticsearch/queries/Compound%20queries/#function_socre-query","text":"\u4fee\u6539\u4e3b\u8981query\u8fd4\u56de\u7684\u5206\u6570\uff0c\u4fee\u6539\u5206\u6570\u8003\u8651\u7684\u56e0\u7d20\u53ef\u4ee5\u662f\u70ed\u5ea6\uff0c\u8fd1\u56e0\uff0c\u4e3e\u4f8b\uff0c\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5\u6807\u672c\u7b49\u3002","title":"function_socre query"},{"location":"Elasticsearch/queries/Full%20text%20queries/","text":"Full text queries---\u5168\u6587\u68c0\u7d22 The full text queries enable you to search analyzed text fields such as the body of an email. The query string is processed using the same analyzer that was applied to the field during indexing. \u5168\u6587\u68c0\u7d22\u4e2d\uff0c\u4f60\u53ef\u4ee5\u641c\u7d22\u5206\u8fc7\u8bcd\u7684\u6587\u672c\u5b57\u6bb5\uff0c\u6bd4\u5982email\u7684\u6587\u672c\u5185\u5bb9\u3002query string\u7684\u67e5\u8be2\u4f7f\u7528\u7684\u548c\u5b57\u6bb5\u8fdb\u884c\u7d22\u5f15\u662f\u7684\u5206\u8bcd\u5668\u662f\u4e00\u6837\u7684\u3002 The queries in this group are: \u5168\u6587\u68c0\u7d22\u7684\u67e5\u8be2\u6709\u8fd9\u51e0\u79cd\uff1a inervals query A full text query that allows fine-grained control of the ordering and proximity of matching terms. \u5168\u6587\u67e5\u8be2\u53ef\u4ee5\u66f4\u52a0\u7b80\u5355\u7075\u6d3b\u7684\u63a7\u5236\u67e5\u8be2\u65f6\u5b57\u7b26\u4e32\u5728\u6587\u672c\u4e2d\u5339\u914d\u7684\u8ddd\u79bb\u4e0e\u5148\u540e\u987a\u5e8f match query The standard query for performing full text queries, including fuzzy matching and phrase or proximity queries. \u5168\u6587\u68c0\u7d22\u7684\u6807\u51c6\u67e5\u8be2\uff0c\u5305\u62ec\u6a21\u7cca\u5339\u914d\u3001\u8bed\u6cd5\u3001\u6216\u8005\u8fd1\u4f3c\u67e5\u8be2\u3002 match_bool_prefix query Creates a bool query that matches each term as a term query, except for the last term, which is matched as a prefix query match_bool_prefix \u67e5\u8be2\u5185\u90e8\u5c06\u8f93\u5165\u6587\u672c\u901a\u8fc7\u6307\u5b9aanalyzer\u5206\u8bcd\u5668\u5904\u7406\u4e3a\u591a\u4e2aterm\uff0c\u7136\u540e\u57fa\u4e8e\u8fd9\u4e9b\u4e2aterm\u8fdb\u884cbool query\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2aterm\u4f7f\u7528\u524d\u7f00\u67e5\u8be2 \u5176\u5b83\u90fd\u662fterm query match_phrase query Like the match query but used for matching exact phrases or word proximity matches. \u548cmatch\u67e5\u8be2\u76f8\u4f3c\uff0c\u4f46\u8fd9\u4e2a\u67e5\u8be2\u7528\u4e8e\u7cbe\u786e\u77ed\u8bed\u5339\u914d\u548c\u5355\u8bcd\u63a5\u8fd1\u5339\u914d\u3002 Match_phrase_prefix query Like the match_phrase query, but does a wildcard search on the final word. \u548cmatch_phrase\u67e5\u8be2\u5f88\u50cf\uff0c\u4f46\u8fd9\u4e2a\u67e5\u8be2\u5728\u6700\u540e\u7684\u4e00\u4e2a\u8bcd\u540e\u505a\u4e86\u4e00\u4e2a\u901a\u914d\u67e5\u8be2\uff08\u53ef\u4ee5\u8ba4\u4e3amatch_phrase\u7684\u524d\u7f00\u67e5\u8be2\uff09\u3002 multi_match query The multi-field version of the match query. match\u67e5\u8be2\u7684\u591a\u5b57\u6bb5\u7248\u672c\u3002 common terms query A more specialized query which gives more preference to uncommon words. \u8fd9\u662f\u4e00\u4e2a\u66f4\u4e13\u4e1a\u7684\u67e5\u8be2\u65b9\u5f0f\uff0c\u5bf9\u4e0d\u901a\u7528\u7684\u8bcd\u63d0\u4f9b\u4e86\u66f4\u4e30\u5bcc\u7684\u504f\u597d\u8bbe\u7f6e\u3002 query_string query Supports the compact Lucene query string syntax , allowing you to specify AND|OR|NOT conditions and multi-field search within a single query string. For expert users only. \u652f\u6301\u7d27\u51d1\u7684Lucene \u5b57\u7b26\u4e32\u67e5\u8be2\u8bed\u6cd5\uff0c\u5141\u8bb8\u4f60\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u67e5\u8be2query string\u4e2d\u6307\u5b9aAND|OR|NOT\u6761\u4ef6\u548c\u591a\u5b57\u6bb5\u67e5\u8be2\u3002\u8fd9\u4e2a\u67e5\u8be2\u8bed\u6cd5\u53ea\u9762\u5411\u66f4\u4e13\u4e1a\u7684\u7528\u6237\u3002 simple_query_stirng query A simpler, more robust version of the query_string syntax suitable for exposing directly to users. \u76f4\u63a5\u66b4\u9732\u7ed9\u7528\u7684\u66f4\u7b80\u5355\uff0c\u66f4\u5065\u58ee\u7684query_string\u8bed\u6cd5\u7248\u672c\u3002","title":"Full text queries"},{"location":"Elasticsearch/queries/Full%20text%20queries/#full-text-queries-","text":"The full text queries enable you to search analyzed text fields such as the body of an email. The query string is processed using the same analyzer that was applied to the field during indexing. \u5168\u6587\u68c0\u7d22\u4e2d\uff0c\u4f60\u53ef\u4ee5\u641c\u7d22\u5206\u8fc7\u8bcd\u7684\u6587\u672c\u5b57\u6bb5\uff0c\u6bd4\u5982email\u7684\u6587\u672c\u5185\u5bb9\u3002query string\u7684\u67e5\u8be2\u4f7f\u7528\u7684\u548c\u5b57\u6bb5\u8fdb\u884c\u7d22\u5f15\u662f\u7684\u5206\u8bcd\u5668\u662f\u4e00\u6837\u7684\u3002 The queries in this group are: \u5168\u6587\u68c0\u7d22\u7684\u67e5\u8be2\u6709\u8fd9\u51e0\u79cd\uff1a","title":"Full text queries---\u5168\u6587\u68c0\u7d22"},{"location":"Elasticsearch/queries/Full%20text%20queries/#inervals-query","text":"A full text query that allows fine-grained control of the ordering and proximity of matching terms. \u5168\u6587\u67e5\u8be2\u53ef\u4ee5\u66f4\u52a0\u7b80\u5355\u7075\u6d3b\u7684\u63a7\u5236\u67e5\u8be2\u65f6\u5b57\u7b26\u4e32\u5728\u6587\u672c\u4e2d\u5339\u914d\u7684\u8ddd\u79bb\u4e0e\u5148\u540e\u987a\u5e8f","title":"inervals query"},{"location":"Elasticsearch/queries/Full%20text%20queries/#match-query","text":"The standard query for performing full text queries, including fuzzy matching and phrase or proximity queries. \u5168\u6587\u68c0\u7d22\u7684\u6807\u51c6\u67e5\u8be2\uff0c\u5305\u62ec\u6a21\u7cca\u5339\u914d\u3001\u8bed\u6cd5\u3001\u6216\u8005\u8fd1\u4f3c\u67e5\u8be2\u3002","title":"match query"},{"location":"Elasticsearch/queries/Full%20text%20queries/#match_bool_prefix-query","text":"Creates a bool query that matches each term as a term query, except for the last term, which is matched as a prefix query match_bool_prefix \u67e5\u8be2\u5185\u90e8\u5c06\u8f93\u5165\u6587\u672c\u901a\u8fc7\u6307\u5b9aanalyzer\u5206\u8bcd\u5668\u5904\u7406\u4e3a\u591a\u4e2aterm\uff0c\u7136\u540e\u57fa\u4e8e\u8fd9\u4e9b\u4e2aterm\u8fdb\u884cbool query\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2aterm\u4f7f\u7528\u524d\u7f00\u67e5\u8be2 \u5176\u5b83\u90fd\u662fterm query","title":"match_bool_prefix query"},{"location":"Elasticsearch/queries/Full%20text%20queries/#match_phrase-query","text":"Like the match query but used for matching exact phrases or word proximity matches. \u548cmatch\u67e5\u8be2\u76f8\u4f3c\uff0c\u4f46\u8fd9\u4e2a\u67e5\u8be2\u7528\u4e8e\u7cbe\u786e\u77ed\u8bed\u5339\u914d\u548c\u5355\u8bcd\u63a5\u8fd1\u5339\u914d\u3002","title":"match_phrase query"},{"location":"Elasticsearch/queries/Full%20text%20queries/#match_phrase_prefix-query","text":"Like the match_phrase query, but does a wildcard search on the final word. \u548cmatch_phrase\u67e5\u8be2\u5f88\u50cf\uff0c\u4f46\u8fd9\u4e2a\u67e5\u8be2\u5728\u6700\u540e\u7684\u4e00\u4e2a\u8bcd\u540e\u505a\u4e86\u4e00\u4e2a\u901a\u914d\u67e5\u8be2\uff08\u53ef\u4ee5\u8ba4\u4e3amatch_phrase\u7684\u524d\u7f00\u67e5\u8be2\uff09\u3002","title":"Match_phrase_prefix query"},{"location":"Elasticsearch/queries/Full%20text%20queries/#multi_match-query","text":"The multi-field version of the match query. match\u67e5\u8be2\u7684\u591a\u5b57\u6bb5\u7248\u672c\u3002","title":"multi_match query"},{"location":"Elasticsearch/queries/Full%20text%20queries/#common-terms-query","text":"A more specialized query which gives more preference to uncommon words. \u8fd9\u662f\u4e00\u4e2a\u66f4\u4e13\u4e1a\u7684\u67e5\u8be2\u65b9\u5f0f\uff0c\u5bf9\u4e0d\u901a\u7528\u7684\u8bcd\u63d0\u4f9b\u4e86\u66f4\u4e30\u5bcc\u7684\u504f\u597d\u8bbe\u7f6e\u3002","title":"common terms query"},{"location":"Elasticsearch/queries/Full%20text%20queries/#query_string-query","text":"Supports the compact Lucene query string syntax , allowing you to specify AND|OR|NOT conditions and multi-field search within a single query string. For expert users only. \u652f\u6301\u7d27\u51d1\u7684Lucene \u5b57\u7b26\u4e32\u67e5\u8be2\u8bed\u6cd5\uff0c\u5141\u8bb8\u4f60\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u67e5\u8be2query string\u4e2d\u6307\u5b9aAND|OR|NOT\u6761\u4ef6\u548c\u591a\u5b57\u6bb5\u67e5\u8be2\u3002\u8fd9\u4e2a\u67e5\u8be2\u8bed\u6cd5\u53ea\u9762\u5411\u66f4\u4e13\u4e1a\u7684\u7528\u6237\u3002","title":"query_string query"},{"location":"Elasticsearch/queries/Full%20text%20queries/#simple_query_stirng-query","text":"A simpler, more robust version of the query_string syntax suitable for exposing directly to users. \u76f4\u63a5\u66b4\u9732\u7ed9\u7528\u7684\u66f4\u7b80\u5355\uff0c\u66f4\u5065\u58ee\u7684query_string\u8bed\u6cd5\u7248\u672c\u3002","title":"simple_query_stirng query"},{"location":"Elasticsearch/queries/Match%20boolean%20prefix%20query/","text":"Match boolean prefix query A match_bool_prefix query analyzes its input and constructs a bool query from the terms. Each term except the last is used in a term query. The last term is used in a prefix query. A match_bool_prefix query such as match_bool_prefix\u67e5\u8be2\u4f1a\u5bf9\u8f93\u5165\u7684\u6587\u672c\u8fdb\u884c\u5206\u8bcd\uff0c\u5e76\u4e14\u6839\u636e\u5206\u8bcd\u540e\u7684\u8bcd\u9879\u6784\u5efa\u4e00\u4e2abool query\u3002\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u8bcd\u9879\u4f1a\u4f7f\u7528term\u67e5\u8be2\uff0c\u6700\u540e\u4e00\u4e2a\u8bcd\u9879\u4f1a\u505a\u524d\u7f00\u67e5\u8be2\uff0c\u4e0b\u9762\u662f\u4e2a\u4f8b\u5b50\uff1a GET /_search { \"query\": { \"match_bool_prefix\" : { \"message\" : \"quick brown f\" } } } where analysis produces the terms quick , brown , and f is similar to the following bool query \u751f\u6210\u7684\u8bcd\u9879quick,brown\u548cf\u548c\u4e0b\u9762\u7684bool\u67e5\u8be2\u5f88\u50cf GET /_search { \"query\": { \"bool\" : { \"should\": [ { \"term\": { \"message\": \"quick\" }}, { \"term\": { \"message\": \"brown\" }}, { \"prefix\": { \"message\": \"f\"}} ] } } } An important difference between the match_bool_prefix query and match_phrase_prefix is that the match_phrase_prefix query matches its terms as a phrase, but the match_bool_prefix query can match its terms in any position. The example match_bool_prefix query above could match a field containing containing quick brown fox , but it could also match brown fox quick . It could also match a field containing the term quick , the term brown and a term starting with f , appearing in any position. match_bool_prefix\u548cmatch_phrase_prefix\u7684\u4e00\u4e2a\u91cd\u8981\u533a\u522b\u662fmatch_phrase_prefix\u5339\u914d\u8bcd\u9879\u8fdd\u4e00\u4e2a\u77ed\u8bed\uff0c\u800cmatch_bool_prefix\u5219\u662f\u4f1a\u5339\u914d\u4efb\u610f\u4f4d\u7f6e\u7684\u8bcd\u9879\u3002\u4e0a\u9762\u8fd9\u4e2amatch_bool_prefix\u7684\u4f8b\u5b50\u5339\u914d\u5b57\u6bb5\u5305\u542bquick brown fox\u7684\u6587\u6863\uff0c\u4f46\u662f\u4e5f\u4f1a\u5339\u914dbrown fox quick\uff0c\u540c\u65f6\u4e5f\u4f1a\u5339\u914d\u8bcd\u9879\u5305\u542bquick\uff0cbrown\u548c\u8bcd\u9879\u4ee5f\u5f00\u5934\u7684\uff0c\u5bf9\u4f4d\u7f6e\u6ca1\u6709\u9650\u5236\u3002 Parameters By default, match_bool_prefix queries' input text will be analyzed using the analyzer from the queried field\u2019s mapping. A different search analyzer can be configured with the analyzer parameter \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmatch_bool_prefix\u68c0\u7d22\u7684\u6587\u672c\u5185\u5bb9\u4f1a\u4f7f\u7528\u8be5\u5b57\u6bb5\u7684mapping\u4e2d\u7684\u5206\u8bcd\u5668\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7analyzer\u53c2\u6570\u6307\u5b9a\u5176\u4ed6\u5206\u8bcd\u5668\u3002 GET /_search { \"query\": { \"match_bool_prefix\" : { \"message\": { \"query\": \"quick brown f\", \"analyzer\": \"keyword\" } } } } match_bool_prefix queries support the minimum_should_match and operator parameters as described for the match query , applying the setting to the constructed bool query. The number of clauses in the constructed bool query will in most cases be the number of terms produced by analysis of the query text. The fuzziness , prefix_length , max_expansions , fuzzy_transpositions , and fuzzy_rewrite parameters can be applied to the term subqueries constructed for all terms but the final term. They do not have any effect on the prefix query constructed for the final term. match_bool_prefix\u652f\u6301matchquery\u4e2d\u4ecb\u7ecd\u7684minimum_should_match\u548coperator\u53c2\u6570\uff0c\u5e94\u7528\u8fd9\u4e9b\u8bbe\u7f6e\u6784\u6210bool\u67e5\u8be2\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5728\u6784\u9020\u7684bool\u4e2d\u8bed\u53e5\u7684\u6570\u91cf\u5c31\u662f\u5bf9\u68c0\u7d22\u7684\u6587\u672c\u5b57\u6bb5\u5206\u8bcd\u540e\u7684\u8bcd\u9879\u6570\u91cf\u3002 fuzziness , prefix_length , max_expansions , fuzzy_transpositions \u548cfuzzy_rewrite\u8fd9\u4e9b\u53c2\u6570\u90fd\u53ef\u4ee5\u5e94\u7528\u5230\u4e3a\u6240\u6709\u7684\u8bcd\u9879\u6784\u9020\u7684\u5b50\u67e5\u8be2\u4e2d\uff0c\u800c\u4e0d\u662f\u5e94\u7528\u5728\u6700\u7ec8\u7684\u8bcd\u9879\u4e0a\u3002\u4ed6\u4eec\u5bf9\u4e3a\u6700\u7ec8\u8bcd\u9879\u6784\u9020\u7684\u524d\u7f00\u67e5\u8be2\u6ca1\u6709\u5f71\u54cd\u3002","title":"Match boolean prefix query"},{"location":"Elasticsearch/queries/Match%20boolean%20prefix%20query/#match-boolean-prefix-query","text":"A match_bool_prefix query analyzes its input and constructs a bool query from the terms. Each term except the last is used in a term query. The last term is used in a prefix query. A match_bool_prefix query such as match_bool_prefix\u67e5\u8be2\u4f1a\u5bf9\u8f93\u5165\u7684\u6587\u672c\u8fdb\u884c\u5206\u8bcd\uff0c\u5e76\u4e14\u6839\u636e\u5206\u8bcd\u540e\u7684\u8bcd\u9879\u6784\u5efa\u4e00\u4e2abool query\u3002\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u8bcd\u9879\u4f1a\u4f7f\u7528term\u67e5\u8be2\uff0c\u6700\u540e\u4e00\u4e2a\u8bcd\u9879\u4f1a\u505a\u524d\u7f00\u67e5\u8be2\uff0c\u4e0b\u9762\u662f\u4e2a\u4f8b\u5b50\uff1a GET /_search { \"query\": { \"match_bool_prefix\" : { \"message\" : \"quick brown f\" } } } where analysis produces the terms quick , brown , and f is similar to the following bool query \u751f\u6210\u7684\u8bcd\u9879quick,brown\u548cf\u548c\u4e0b\u9762\u7684bool\u67e5\u8be2\u5f88\u50cf GET /_search { \"query\": { \"bool\" : { \"should\": [ { \"term\": { \"message\": \"quick\" }}, { \"term\": { \"message\": \"brown\" }}, { \"prefix\": { \"message\": \"f\"}} ] } } } An important difference between the match_bool_prefix query and match_phrase_prefix is that the match_phrase_prefix query matches its terms as a phrase, but the match_bool_prefix query can match its terms in any position. The example match_bool_prefix query above could match a field containing containing quick brown fox , but it could also match brown fox quick . It could also match a field containing the term quick , the term brown and a term starting with f , appearing in any position. match_bool_prefix\u548cmatch_phrase_prefix\u7684\u4e00\u4e2a\u91cd\u8981\u533a\u522b\u662fmatch_phrase_prefix\u5339\u914d\u8bcd\u9879\u8fdd\u4e00\u4e2a\u77ed\u8bed\uff0c\u800cmatch_bool_prefix\u5219\u662f\u4f1a\u5339\u914d\u4efb\u610f\u4f4d\u7f6e\u7684\u8bcd\u9879\u3002\u4e0a\u9762\u8fd9\u4e2amatch_bool_prefix\u7684\u4f8b\u5b50\u5339\u914d\u5b57\u6bb5\u5305\u542bquick brown fox\u7684\u6587\u6863\uff0c\u4f46\u662f\u4e5f\u4f1a\u5339\u914dbrown fox quick\uff0c\u540c\u65f6\u4e5f\u4f1a\u5339\u914d\u8bcd\u9879\u5305\u542bquick\uff0cbrown\u548c\u8bcd\u9879\u4ee5f\u5f00\u5934\u7684\uff0c\u5bf9\u4f4d\u7f6e\u6ca1\u6709\u9650\u5236\u3002","title":"Match boolean prefix query"},{"location":"Elasticsearch/queries/Match%20boolean%20prefix%20query/#parameters","text":"By default, match_bool_prefix queries' input text will be analyzed using the analyzer from the queried field\u2019s mapping. A different search analyzer can be configured with the analyzer parameter \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cmatch_bool_prefix\u68c0\u7d22\u7684\u6587\u672c\u5185\u5bb9\u4f1a\u4f7f\u7528\u8be5\u5b57\u6bb5\u7684mapping\u4e2d\u7684\u5206\u8bcd\u5668\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7analyzer\u53c2\u6570\u6307\u5b9a\u5176\u4ed6\u5206\u8bcd\u5668\u3002 GET /_search { \"query\": { \"match_bool_prefix\" : { \"message\": { \"query\": \"quick brown f\", \"analyzer\": \"keyword\" } } } } match_bool_prefix queries support the minimum_should_match and operator parameters as described for the match query , applying the setting to the constructed bool query. The number of clauses in the constructed bool query will in most cases be the number of terms produced by analysis of the query text. The fuzziness , prefix_length , max_expansions , fuzzy_transpositions , and fuzzy_rewrite parameters can be applied to the term subqueries constructed for all terms but the final term. They do not have any effect on the prefix query constructed for the final term. match_bool_prefix\u652f\u6301matchquery\u4e2d\u4ecb\u7ecd\u7684minimum_should_match\u548coperator\u53c2\u6570\uff0c\u5e94\u7528\u8fd9\u4e9b\u8bbe\u7f6e\u6784\u6210bool\u67e5\u8be2\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5728\u6784\u9020\u7684bool\u4e2d\u8bed\u53e5\u7684\u6570\u91cf\u5c31\u662f\u5bf9\u68c0\u7d22\u7684\u6587\u672c\u5b57\u6bb5\u5206\u8bcd\u540e\u7684\u8bcd\u9879\u6570\u91cf\u3002 fuzziness , prefix_length , max_expansions , fuzzy_transpositions \u548cfuzzy_rewrite\u8fd9\u4e9b\u53c2\u6570\u90fd\u53ef\u4ee5\u5e94\u7528\u5230\u4e3a\u6240\u6709\u7684\u8bcd\u9879\u6784\u9020\u7684\u5b50\u67e5\u8be2\u4e2d\uff0c\u800c\u4e0d\u662f\u5e94\u7528\u5728\u6700\u7ec8\u7684\u8bcd\u9879\u4e0a\u3002\u4ed6\u4eec\u5bf9\u4e3a\u6700\u7ec8\u8bcd\u9879\u6784\u9020\u7684\u524d\u7f00\u67e5\u8be2\u6ca1\u6709\u5f71\u54cd\u3002","title":"Parameters"},{"location":"Elasticsearch/queries/Match%20query/","text":"Returns documents that match a provided text, number, date or boolean value. The provided text is analyzed before matching. The match query is the standard query for performing a full-text search, including options for fuzzy matching. \u4f1a\u8fd4\u56de\u5339\u914d\u5230text\u3001number\u3001date\u6216\u8005Boolean\u7c7b\u578b\u7684\u6587\u6863\uff0c\u5339\u914d\u4e4b\u524d\u4f1a\u5bf9text\u7c7b\u578b\u8fdb\u884c\u5206\u8bcd\u3002 match\u662f\u5168\u6587\u68c0\u7d22\u7684\u6807\u51c6\u68c0\u7d22\uff0c\u5305\u62ec\u53ef\u4ee5\u8bbe\u7f6e\u6a21\u7cca\u5339\u914d\u7684\u9009\u9879\u3002 \u8bf7\u6c42\u793a\u4f8b GET /_search { \"query\": { \"match\" : { \"message\" : { \"query\" : \"this is a test\" } } } } Top-level parameters for match ---\u9876\u7ea7\u53c2\u6570 (Required, object) Field you wish to search. field---(\u5fc5\u4f20\uff0c\u5bf9\u8c61)\u68c0\u7d22\u5b57\u6bb5 Parameters for query (Required) Text, number, boolean value or date you wish to find in the provided <field> . The match query analyzes any provided text before performing a search. This means the match query can search text fields for analyzed tokens rather than an exact term. \uff08\u5fc5\u4f20\uff09\u5e0c\u671b\u5728\u63d0\u4f9b\u7684 \u5b57\u6bb5\u4e2d\u641c\u7d22text\uff0cnumber\uff0cboolean\u6216\u8005\u65e5\u671f\u7c7b\u578b\u3002 \u68c0\u7d22\u4e4b\u524dmatch\u4f1a\u5bf9text\u7c7b\u578b\u5b57\u6bb5\u8fdb\u884c\u5206\u8bcd\u3002\u8fd9\u5c31\u610f\u5473\u7740match\u5bf9\u641c\u7d22\u7684text\u5b57\u6bb5\u8fdb\u884c\u5206\u8bcd\u540e\u7684token\u67e5\u8be2\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u7684\u8bcd\u6761\u67e5\u8be2\u3002 analyzer (Optional, string) Analyzer used to convert the text in the query value into tokens. Defaults to the index-time analyzer mapped for the <field> . If no analyzer is mapped, the index\u2019s default analyzer is used. \uff08\u53ef\u9009\uff0cstring\uff09\u5206\u8bcd\u5668\u4f1a\u5c06query\u4e2dtext\u7c7b\u578b\u7684\u503c\u8f6c\u6362\u4e3atoken\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u7d22\u5f15\u5206\u8bcd\u5668\u6620\u5c04\u5230\u8fd9\u4e2a\u5b57\u6bb5\u3002\u5982\u679c\u6ca1\u6709\u6620\u5c04\u5206\u8bcd\u5668\uff0c\u7d22\u5f15\u5219\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u5206\u8bcd\u5668\u3002 auto_generate_synonyms_phrase_query (Optional, boolean) If true , match phrase queries are automatically created for multi-term synonyms. Defaults to true . See Use synonyms with match query for an example. \uff08\u53ef\u9009\uff0c\u5e03\u5c14\u7c7b\u578b\uff09\u5982\u679c\u4e3atrue\uff0c\u4f1a\u81ea\u52a8\u4e3amulti-term\u540c\u4e49\u8bcd\u521b\u5efamatch_phrase\u3002 \u53ef\u4ee5\u53c2\u8003match\u67e5\u8be2\u540c\u4e49\u8bcd\u7684\u4f8b\u5b50\u3002 fuzziness (Optional, string) Maximum edit distance allowed for matching. See Fuzziness for valid values and more information. See Fuzziness in the match query for an example. \uff08\u53ef\u9009\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u5339\u914d\u7684\u65f6\u5019\u53ef\u4ee5\u6307\u5b9a\u6700\u5927\u7f16\u8f91\u8ddd\u79bb\uff0c\u67e5\u770b\u6a21\u7cca\u67e5\u8be2\u53ef\u7528\u503c\u6216\u8005\u66f4\u591a\u4fe1\u606f\uff0c\u67e5\u770bmatch\u4e2d\u6a21\u7cca\u67e5\u8be2\u7684\u4f8b\u5b50\u3002 max_expansions (Optional, integer) Maximum number of terms to which the query will expand. Defaults to 50 . \uff08\u53ef\u9009\uff0c\u6570\u503c\u7c7b\u578b\uff09query\u4e2d\u8bcd\u6761\u6269\u5c55\u7684\u6700\u5927\u957f\u5ea6\uff0c\u9ed8\u8ba4\u4e3a50 prefix_length (Optional, integer) Number of beginning characters left unchanged for fuzzy matching. Defaults to 0 . \uff08\u53ef\u9009\uff0c\u6570\u503c\u7c7b\u578b\uff09\u5de6\u4fa7\u4e0d\u53c2\u4e0e\u6a21\u7cca\u67e5\u8be2\u7684\u5b57\u7b26\u6570\uff0c\u9ed8\u8ba4\u4e3a0. fuzzy_transpositions (Optional, boolean) If true , edits for fuzzy matching include transpositions of two adjacent characters (ab \u2192 ba). Defaults to true . \uff08\u53ef\u9009\uff0c\u5e03\u5c14\u7c7b\u578b\uff09\u5982\u679c\u4e3atrue\uff0c\u5c06\u76f8\u90bb\u4f4d\u7f6e\u5b57\u7b26\u4e92\u6362\u7b97\u4f5c\u4e00\u6b21\u7f16\u8f91\u8ddd\u79bb\uff0c\u9ed8\u8ba4\u4e3atrue fuzzy_rewrite (Optional, string) Method used to rewrite the query. See the rewrite parameter for valid values and more information. If the fuzziness parameter is not 0 , the match query uses a rewrite method of top_terms_blended_freqs_${max_expansions} by default. \uff08\u53ef\u9009\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u8fd9\u4e2a\u65b9\u6cd5\u662f\u7528\u6765\u91cd\u5199query\u7684\u3002\u67e5\u770b\u53ef\u7528\u53c2\u6570\u7684\u503c\u6216\u8005\u66f4\u591a\u8be6\u60c5\u8bf7\u8df3\u8f6c\u5230rewrite\u53c2\u6570\u94fe\u63a5\u3002 lenient (Optional, boolean) If true , format-based errors, such as providing a text query value for a numeric field, are ignored. Defaults to false . \uff08\u53ef\u9009\uff0c\u5e03\u5c14\u7c7b\u578b\uff09\u5982\u679c\u4e3atrue\uff0c\u50cftext query\u68c0\u7d22\u4e00\u4e2a\u6570\u503c\u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u683c\u5f0f\u9519\u8bef\u4f1a\u5ffd\u7565\u3002\u9ed8\u8ba4\u4e3afalse\u3002 operator (Optional, string) Boolean logic used to interpret text in the query value. Valid values are: OR (Default) For example, a query value of capital of Hungary is interpreted as capital OR of OR Hungary . AND For example, a query value of capital of Hungary is interpreted as capital AND of AND Hungary . \uff08\u53ef\u9009\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u5e03\u5c14\u903b\u8f91\u662f\u7528\u6765\u5728query\u4e2d\u7684\u6587\u672c\u4e0a\u7684\u3002 OR\uff08\u9ed8\u8ba4\uff09\u4f8b\u5982\uff0c\u68c0\u7d22\u7684\u503c\u4e3acapital of Hungary\u89e3\u91ca\u4e3acapital OR of OR Hungary\u3002 AND \u4f8b\u5982\uff0c\u68c0\u7d22\u503ccapital OR of OR Hungary\u88ab\u89e3\u91ca\u4e3acapital AND of AND Hungary\u3002 minimum_should_match (Optional, string) Minimum number of clauses that must match for a document to be returned. See the minimum_should_match parameter for valid values and more information. \uff08\u53ef\u9009\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u5339\u914d\u5e94\u8be5\u8fd4\u56de\u7684\u6587\u6863\u6700\u5c0f\u6570\u91cf\u3002\uff08\u5982\u679c\u5339\u914d\u5230\u7684\u6587\u6863\u5c0f\u4e8e\u8fd9\u4e2a\u503c\uff0c\u5219\u4e0d\u8fd4\u56de\u6587\u6863\uff09\u53ef\u4ee5\u53bb\u67e5\u770b minimum_should_match parameter \u94fe\u63a5 \u67e5\u770b\u53ef\u7528\u7684\u503c\u3002 zero_terms_query (Optional, string) Indicates whether no documents are returned if the analyzer removes all tokens, such as when using a stop filter. Valid values are: none (Default) No documents are returned if the analyzer removes all tokens. all Returns all documents, similar to a match_all query. See Zero terms query for an example. \uff08\u53ef\u9009\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u8fd9\u4e2a\u53c2\u6570\u8868\u793a\u6ca1\u6709\u6587\u6863\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u5206\u8bcd\u5668\u662f\u5426\u5220\u9664\u6240\u6709\u7684token\uff0c\u6bd4\u5982\u5f53\u4f7f\u7528 \u505c\u7528\u8bcd \u8fc7\u6ee4\u7684\u65f6\u5019\uff0c\u53ef\u7528\u7684\u53c2\u6570\u4e3a\uff1a none\uff08\u9ed8\u8ba4\uff09\u5982\u679c\u5206\u8bcd\u5668\u5220\u9664\u6240\u6709\u7684token\uff0c\u5219\u4e0d\u8fd4\u56de\u4efb\u4f55\u6587\u6863\u3002 all \u8fd4\u56de\u6240\u6709\u6587\u6863\uff0c\u548cmatch_all \u67e5\u8be2\u5f88\u50cf\u3002\u67e5\u770b\u4f8b\u5b50\u53ef\u4ee5\u8bbf\u95eezero terms query \u7684\u94fe\u63a5\u3002 Notes Short request example - \u7b80\u5355\u7684\u8bf7\u6c42\u53c2\u6570\u6848\u4f8b You can simplify the match query syntax by combining the <field> and query parameters. For example: GET /_search { \"query\": { \"match\" : { \"message\" : \"this is a test\" } } } How the match query works -\u90a3\u4e48match \u67e5\u8be2\u662f\u600e\u4e48\u5de5\u4f5c\u7684\u5462 The match query is of type boolean . It means that the text provided is analyzed and the analysis process constructs a boolean query from the provided text. The operator parameter can be set to or or and to control the boolean clauses (defaults to or ). The minimum number of optional should clauses to match can be set using the minimum_should_match parameter. Here is an example with the operator parameter: match \u662f\u4e00\u79cdboolean\u67e5\u8be2\uff0c\u8fd9\u5c31\u610f\u5473\u67e5\u8be2\u7684text\u6587\u672c\u4f1a\u88ab\u5206\u8bcd\uff0c\u5e76\u4e14\u5206\u8bcd\u8fc7\u7a0b\u4f1a\u57fa\u4e8e\u63d0\u4f9b\u7684\u6587\u672c\u6784\u9020\u4e00\u4e2aboolean\u67e5\u8be2\u3002operator\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u4e3aor\u6216\u8005and\u6765\u63a7\u5236boolean\u67e5\u8be2\u8bed\u53e5\uff08\u9ed8\u8ba4\u662for\uff09\u3002 minimum_should_match \u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\uff0cshould\u8bed\u53e5\u7684\u6700\u5c0f\u5339\u914d\u6570\u91cf\u3002 \u4e0b\u9762\u662f\u4e00\u4e2aoperator\u53c2\u6570\u7684\u4f8b\u5b50\uff1a GET /_search { \"query\": { \"match\" : { \"message\" : { \"query\" : \"this is a test\", \"operator\" : \"and\" } } } } The analyzer can be set to control which analyzer will perform the analysis process on the text. It defaults to the field explicit mapping definition, or the default search analyzer. The lenient parameter can be set to true to ignore exceptions caused by data-type mismatches, such as trying to query a numeric field with a text query string. Defaults to false . analyzer\u53c2\u6570\u53ef\u4ee5\u5bf9text\u7c7b\u578b\u7684\u5b57\u6bb5\u5728\u5206\u8bcd\u9636\u6bb5\u4f7f\u7528\u54ea\u4e2a\u5206\u8bcd\u5668\u3002\u9ed8\u8ba4\u662f\u53d6mapping\u5b9a\u4e49\u4e2d\u663e\u5f0f\u8bbe\u7f6e\u7684\u5206\u8bcd\u5668\uff0c\u6ca1\u6709\u8bbe\u7f6e\u5219\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u5206\u8bcd\u5668\uff08standard\u5206\u8bcd\u5668\uff09\u3002 lenient\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u4e3atrue\u6765\u5ffd\u7565\u7c7b\u578b\u4e0d\u5339\u914d\u5bfc\u81f4\u7684\u5f02\u5e38\uff0c\u6bd4\u5982\u7528text\u7c7b\u578b\u53bb\u68c0\u7d22\u53bb\u67e5\u6570\u503c\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662ffalse\u3002 Fuzziness in the match query - match\u4e2d\u7684\u6a21\u7cca\u641c\u7d22 fuzziness allows fuzzy matching based on the type of field being queried. See Fuzziness for allowed settings. The prefix_length and max_expansions can be set in this case to control the fuzzy process. If the fuzzy option is set the query will use top_terms_blended_freqs_${max_expansions} as its rewrite method the fuzzy_rewrite parameter allows to control how the query will get rewritten. Fuzzy transpositions ( ab \u2192 ba ) are allowed by default but can be disabled by setting fuzzy_transpositions to false . fuzziness\u53c2\u6570\u5141\u8bb8\u57fa\u4e8e\u88ab\u68c0\u7d22\u7684\u5b57\u6bb5\u8fdb\u884c\u6a21\u7cca\u5339\u914d\u3002\u53ef\u4ee5\u67e5\u770b Fuzziness \u66f4\u591a\u7684\u8bbe\u7f6e\u3002 prefix_length\u548cmax_expansions\u53c2\u6570\u53ef\u4ee5\u5728\u8fd9\u4e2a\u6848\u4f8b\u4e2d\u8bbe\u7f6e\u6765\u63a7\u5236\u6a21\u7cca\u67e5\u8be2\u6d41\u7a0b\u3002\u5982\u679c\u6a21\u7cca\u67e5\u8be2\u9009\u9879\u88ab\u8bbe\u7f6e\u4e86\uff0c\u8fd9\u4e2a\u67e5\u8be2\u4f1a\u4f7f\u7528top_terms_blended_freqs_${max_expansions}\u4f5c\u4e3a\u5b83\u7684\u91cd\u5199\u65b9\u6cd5\u3002fuzzy_rewrite\u53c2\u6570\u53ef\u4ee5\u63a7\u5236\u600e\u4e48\u91cd\u5199\u3002 \u6a21\u7cca\u7ffb\u8f6c\uff08ab->ba\uff09\u9ed8\u8ba4\u662f\u5f00\u542f\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06fuzzy_transpositions\u53c2\u6570\u8bbe\u7f6e\u4e3afalse\u6765\u5173\u95ed\u3002 NOTE: Fuzzy matching is not applied to terms with synonyms or in cases where the analysis process produces multiple tokens at the same position. Under the hood these terms are expanded to a special synonym query that blends term frequencies, which does not support fuzzy expansion. \u5907\u6ce8\uff1a\u6a21\u7cca\u5339\u914d\u4e0d\u4f1a\u5e94\u7528\u5728\u540c\u4e49\u8bcd\u8bcd\u6761\u4e0a\uff0c\u5206\u8bcd\u8fc7\u7a0b\u4ea7\u751f\u7684\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u591a\u4e2atoken\u4e0a\u4e5f\u4e0d\u4f1a\u751f\u6548\u3002\u5e95\u5c42\u8fd9\u4e9b\u8bcd\u6761\u4f1a\u6269\u5c55\u6210\u4e00\u4e2a\u7279\u6b8a\u7684\u540c\u4e49\u8bcdquery\uff0c\u5b83\u6df7\u5408\u4e86\u8bcd\u6761\u9891\u6570\uff0c\u4e0d\u652f\u6301\u6a21\u7cca\u6269\u5c55\u3002 GET /_search { \"query\": { \"match\" : { \"message\" : { \"query\" : \"this is a test\", \"operator\" : \"and\" } } } } Zero terms query If the analyzer used removes all tokens in a query like a stop filter does, the default behavior is to match no documents at all. In order to change that the zero_terms_query option can be used, which accepts none (default) and all which corresponds to a match_all query. \u5982\u679c\u4f7f\u7528\u7684\u5206\u8bcd\u5668\u60f3stop\u5206\u8bcd\u8fc7\u6ee4\u4e00\u6837\u5220\u9664\u4e86\u6240\u6709\u7684token\uff0c\u90a3\u4e48\u5c31\u5339\u914d\u4e0d\u5230\u4efb\u4f55\u6587\u6863\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0czero_terms_query\u9009\u9879\u7684\u4f5c\u7528\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\uff0c\u8fd9\u4e2a\u9009\u9879\u53ef\u4ee5\u4f20\u5165none(\u9ed8\u8ba4)\u548call\uff08\u76f8\u5f53\u4e8ematch_all\uff09\u3002 GET /_search { \"query\": { \"match\" : { \"message\" : { \"query\" : \"to be or not to be\", \"operator\" : \"and\", \"zero_terms_query\": \"all\" } } } } Cutoff frequency WARNING Deprecated in 7.3.0. This option can be omitted as the Match can skip blocks of documents efficiently, without any configuration, provided that the total number of hits is not tracked. \u6ce8\u610f\uff1a 7.3.0\u4e2d\u5df2\u7ecf\u5e9f\u5f03\u4e86 \u7531\u4e8eMatch\u53ef\u7528\u6709\u6548\u7684\u8df3\u8fc7\u6587\u6863\u5757\uff0c\u6240\u4ee5\u8fd9\u4e2a\u9009\u9879\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5728\u4e0d\u8ddf\u8e2a\u4e2d\u547d\u4e2d\u603b\u6570\u7684\u524d\u63d0\u4e0b\uff0c\u65e0\u9700\u4efb\u4f55\u914d\u7f6e\u3002 The match query supports a cutoff_frequency that allows specifying an absolute or relative document frequency where high frequency terms are moved into an optional subquery and are only scored if one of the low frequency (below the cutoff) terms in the case of an or operator or all of the low frequency terms in the case of an and operator match. Match query\u652f\u6301cutoff_frequency\uff08\u622a\u6b62\u9891\u7387\uff09\uff0ccutoff_frequency\u5141\u8bb8\u4f60\u6307\u5b9a\u7edd\u5bf9\u6216\u8005\u76f8\u5bf9\u6587\u6863\u9891\u7387\uff0c\u5176\u4e2d\u9ad8\u9891\u8bcd\u9879\u88ab\u79fb\u52a8\u5230\u53ef\u9009\u7684\u5b50\u67e5\u8be2\u4e2d\uff0c\u5e76\u4e14\u53ea\u6709\u5728 or \u64cd\u4f5c\u7b26\u7684\u60c5\u51b5\u4e0b\u4f4e\u9891\u8bcd\uff08\u4f4e\u4e8e\u622a\u6b62\u503c\uff09\u4e4b\u4e00 \u6216\u6240\u6709\u5728 and \u8fd0\u7b97\u7b26\u5339\u914d\u7684\u60c5\u51b5\u4e0b\u7684\u4f4e\u9891\u8bcd\u9879\u3002 This query allows handling stopwords dynamically at runtime, is domain independent and doesn\u2019t require a stopword file. It prevents scoring / iterating high frequency terms and only takes the terms into account if a more significant / lower frequency term matches a document. Yet, if all of the query terms are above the given cutoff_frequency the query is automatically transformed into a pure conjunction ( and ) query to ensure fast execution. \u8fd9\u4e2aquery\u5141\u8bb8\u8fd0\u884c\u65f6\u52a8\u6001\u5904\u7406\u505c\u7528\u8bcd\uff0c\u72ec\u7acb\u4e8e\u57df\u5e76\u4e14\u4e0d\u9700\u8981\u4f9d\u8d56\u505c\u7528\u8bcd\u6587\u4ef6\u3002\u5b83\u53ef\u4ee5\u9632\u6b62\u5bf9\u9ad8\u9891\u8bcd\u6253\u5206\u3001\u8fed\u4ee3\uff0c\u5e76\u4e14\u4ec5\u5728\u66f4\u91cd\u8981/\u8f83\u4f4e\u9891\u7387\u7684\u8bcd\u4e0e\u6587\u6863\u5339\u914d\u65f6\u624d\u8003\u8651\u8fd9\u4e9b\u8bcd\u3002\u5982\u679c\u6240\u6709\u7684\u67e5\u8be2\u6b64\u9879\u90fd\u9ad8\u4e8e\u8ddf\u5b9a\u7684cuttof_frequency\uff0c\u8fd9\u4e2a\u67e5\u8be2\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a\u7eaf\u8fde\u63a5\u8bcdquery\uff08and\uff09\u6765\u786e\u4fdd\u66f4\u5feb\u7684\u6267\u884c\u3002 The cutoff_frequency can either be relative to the total number of documents if in the range from 0 (inclusive) to 1 (exclusive) or absolute if greater or equal to 1.0 . cuttof_frequency \u65e2\u53ef\u4ee5\u4e0e\u6587\u6863\u603b\u6570\u6709\u5173\uff0c\u5982\u679c\u8303\u56f4\u5927\u4e8e\u7b49\u4e8e0\u5c0f\u4e8e1\uff0c\u4e5f\u53ef\u4ee5\u662f\u7edd\u5bf9\u7684\u5982\u679c\u5927\u4e8e\u7b49\u4e8e1.0\u3002 Here is an example showing a query composed of stopwords exclusively: \u8fd9\u91cc\u6709\u4e2a\u4f8b\u5b50\uff0c\u5b8c\u5168\u7531\u505c\u7528\u8bcd\u7ec4\u5408\u6210\u7684 GET /_search { \"query\": { \"match\" : { \"message\" : { \"query\" : \"to be or not to be\", \"cutoff_frequency\" : 0.001 } } } } The cutoff_frequency option operates on a per-shard-level. This means that when trying it out on test indexes with low document numbers you should follow the advice in Relevance is broken . cuttof_frequency\u9009\u9879\u5728\u5206\u7247\u7ea7\u522b\u4e0a\u751f\u6548\u3002\u8fd9\u5c31\u610f\u5473\u7740\u5f53\u5728\u6587\u6863\u6570\u5c11\u7684\u7d22\u5f15\u4e0a\u5c1d\u8bd5\u65f6\uff0c\u4f60\u5e94\u8be5\u9075\u5faaRelevance is broken\u7684\u5efa\u8bae\u3002 Synonyms--\u540c\u4e49\u8bcd The match query supports multi-terms synonym expansion with the synonym_graph token filter. When this filter is used, the parser creates a phrase query for each multi-terms synonyms. For example, the following synonym: \"ny, new york\" would produce: (ny OR (\"new york\")) It is also possible to match multi terms synonyms with conjunctions instead: match\u68c0\u7d22\u652f\u6301\u901a\u8fc7 synonym_graph \u8bcd\u6761\u8fc7\u6ee4\u5668\u6269\u5c55\u591a\u8bcd\u9879\u540c\u4e49\u8bcd\u3002\u5f53\u4f7f\u7528\u8fd9\u4e2a\u8fc7\u6ee4\u5668\u7684\u65f6\u5019\uff0c\u8bed\u6cd5\u89e3\u6790\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a\u68c0\u7d22\u6bcf\u4e2a\u591a\u8bcd\u6761\u540c\u4e49\u8bcd\u7684\u8bed\u6cd5\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u540c\u4e49\u8bcd\uff1a\u201cny,new york\u201d\u4f1a\u88ab\u89e3\u6790\u6210\uff08ny OR (\"new york\")\uff09 \u4e5f\u6709\u53ef\u80fd\u4ee5\u8fde\u8bcd\u5339\u914d\u591a\u4e2a\u8bcd\u9879\u540c\u4e49\u8bcd\uff1a GET /_search { \"query\": { \"match\" : { \"message\": { \"query\" : \"ny city\", \"auto_generate_synonyms_phrase_query\" : false } } } } The example above creates a boolean query: (ny OR (new AND york)) city that matches documents with the term ny or the conjunction new AND york . By default the parameter auto_generate_synonyms_phrase_query is set to true . \u4e0a\u8ff0\u4f8b\u5b50\u4f1a\u521b\u5efa\u4e00\u4e2abool query\uff1a\uff08ny OR (new AND york)\uff09city \uff0c\u4ee5cy\u6216\u8005\u8fde\u8bcd new AND york \u5339\u914d\u6587\u6863\u3002\u9ed8\u8ba4auto_generate_synonyms_phrase_query\u53c2\u6570\u4e3atrue\u3002","title":"Match query"},{"location":"Elasticsearch/queries/Match%20query/#top-level-parameters-for-match-","text":"(Required, object) Field you wish to search.","title":"Top-level parameters for match ---\u9876\u7ea7\u53c2\u6570"},{"location":"Elasticsearch/queries/Match%20query/#field-","text":"","title":"field---(\u5fc5\u4f20\uff0c\u5bf9\u8c61)\u68c0\u7d22\u5b57\u6bb5"},{"location":"Elasticsearch/queries/Match%20query/#parameters-for","text":"query (Required) Text, number, boolean value or date you wish to find in the provided <field> . The match query analyzes any provided text before performing a search. This means the match query can search text fields for analyzed tokens rather than an exact term. \uff08\u5fc5\u4f20\uff09\u5e0c\u671b\u5728\u63d0\u4f9b\u7684 \u5b57\u6bb5\u4e2d\u641c\u7d22text\uff0cnumber\uff0cboolean\u6216\u8005\u65e5\u671f\u7c7b\u578b\u3002 \u68c0\u7d22\u4e4b\u524dmatch\u4f1a\u5bf9text\u7c7b\u578b\u5b57\u6bb5\u8fdb\u884c\u5206\u8bcd\u3002\u8fd9\u5c31\u610f\u5473\u7740match\u5bf9\u641c\u7d22\u7684text\u5b57\u6bb5\u8fdb\u884c\u5206\u8bcd\u540e\u7684token\u67e5\u8be2\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u7684\u8bcd\u6761\u67e5\u8be2\u3002 analyzer (Optional, string) Analyzer used to convert the text in the query value into tokens. Defaults to the index-time analyzer mapped for the <field> . If no analyzer is mapped, the index\u2019s default analyzer is used. \uff08\u53ef\u9009\uff0cstring\uff09\u5206\u8bcd\u5668\u4f1a\u5c06query\u4e2dtext\u7c7b\u578b\u7684\u503c\u8f6c\u6362\u4e3atoken\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u7d22\u5f15\u5206\u8bcd\u5668\u6620\u5c04\u5230\u8fd9\u4e2a\u5b57\u6bb5\u3002\u5982\u679c\u6ca1\u6709\u6620\u5c04\u5206\u8bcd\u5668\uff0c\u7d22\u5f15\u5219\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u5206\u8bcd\u5668\u3002 auto_generate_synonyms_phrase_query (Optional, boolean) If true , match phrase queries are automatically created for multi-term synonyms. Defaults to true . See Use synonyms with match query for an example. \uff08\u53ef\u9009\uff0c\u5e03\u5c14\u7c7b\u578b\uff09\u5982\u679c\u4e3atrue\uff0c\u4f1a\u81ea\u52a8\u4e3amulti-term\u540c\u4e49\u8bcd\u521b\u5efamatch_phrase\u3002 \u53ef\u4ee5\u53c2\u8003match\u67e5\u8be2\u540c\u4e49\u8bcd\u7684\u4f8b\u5b50\u3002 fuzziness (Optional, string) Maximum edit distance allowed for matching. See Fuzziness for valid values and more information. See Fuzziness in the match query for an example. \uff08\u53ef\u9009\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u5339\u914d\u7684\u65f6\u5019\u53ef\u4ee5\u6307\u5b9a\u6700\u5927\u7f16\u8f91\u8ddd\u79bb\uff0c\u67e5\u770b\u6a21\u7cca\u67e5\u8be2\u53ef\u7528\u503c\u6216\u8005\u66f4\u591a\u4fe1\u606f\uff0c\u67e5\u770bmatch\u4e2d\u6a21\u7cca\u67e5\u8be2\u7684\u4f8b\u5b50\u3002 max_expansions (Optional, integer) Maximum number of terms to which the query will expand. Defaults to 50 . \uff08\u53ef\u9009\uff0c\u6570\u503c\u7c7b\u578b\uff09query\u4e2d\u8bcd\u6761\u6269\u5c55\u7684\u6700\u5927\u957f\u5ea6\uff0c\u9ed8\u8ba4\u4e3a50 prefix_length (Optional, integer) Number of beginning characters left unchanged for fuzzy matching. Defaults to 0 . \uff08\u53ef\u9009\uff0c\u6570\u503c\u7c7b\u578b\uff09\u5de6\u4fa7\u4e0d\u53c2\u4e0e\u6a21\u7cca\u67e5\u8be2\u7684\u5b57\u7b26\u6570\uff0c\u9ed8\u8ba4\u4e3a0. fuzzy_transpositions (Optional, boolean) If true , edits for fuzzy matching include transpositions of two adjacent characters (ab \u2192 ba). Defaults to true . \uff08\u53ef\u9009\uff0c\u5e03\u5c14\u7c7b\u578b\uff09\u5982\u679c\u4e3atrue\uff0c\u5c06\u76f8\u90bb\u4f4d\u7f6e\u5b57\u7b26\u4e92\u6362\u7b97\u4f5c\u4e00\u6b21\u7f16\u8f91\u8ddd\u79bb\uff0c\u9ed8\u8ba4\u4e3atrue fuzzy_rewrite (Optional, string) Method used to rewrite the query. See the rewrite parameter for valid values and more information. If the fuzziness parameter is not 0 , the match query uses a rewrite method of top_terms_blended_freqs_${max_expansions} by default. \uff08\u53ef\u9009\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u8fd9\u4e2a\u65b9\u6cd5\u662f\u7528\u6765\u91cd\u5199query\u7684\u3002\u67e5\u770b\u53ef\u7528\u53c2\u6570\u7684\u503c\u6216\u8005\u66f4\u591a\u8be6\u60c5\u8bf7\u8df3\u8f6c\u5230rewrite\u53c2\u6570\u94fe\u63a5\u3002 lenient (Optional, boolean) If true , format-based errors, such as providing a text query value for a numeric field, are ignored. Defaults to false . \uff08\u53ef\u9009\uff0c\u5e03\u5c14\u7c7b\u578b\uff09\u5982\u679c\u4e3atrue\uff0c\u50cftext query\u68c0\u7d22\u4e00\u4e2a\u6570\u503c\u7c7b\u578b\u7684\u5b57\u6bb5\uff0c\u683c\u5f0f\u9519\u8bef\u4f1a\u5ffd\u7565\u3002\u9ed8\u8ba4\u4e3afalse\u3002 operator (Optional, string) Boolean logic used to interpret text in the query value. Valid values are: OR (Default) For example, a query value of capital of Hungary is interpreted as capital OR of OR Hungary . AND For example, a query value of capital of Hungary is interpreted as capital AND of AND Hungary . \uff08\u53ef\u9009\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u5e03\u5c14\u903b\u8f91\u662f\u7528\u6765\u5728query\u4e2d\u7684\u6587\u672c\u4e0a\u7684\u3002 OR\uff08\u9ed8\u8ba4\uff09\u4f8b\u5982\uff0c\u68c0\u7d22\u7684\u503c\u4e3acapital of Hungary\u89e3\u91ca\u4e3acapital OR of OR Hungary\u3002 AND \u4f8b\u5982\uff0c\u68c0\u7d22\u503ccapital OR of OR Hungary\u88ab\u89e3\u91ca\u4e3acapital AND of AND Hungary\u3002 minimum_should_match (Optional, string) Minimum number of clauses that must match for a document to be returned. See the minimum_should_match parameter for valid values and more information. \uff08\u53ef\u9009\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u5339\u914d\u5e94\u8be5\u8fd4\u56de\u7684\u6587\u6863\u6700\u5c0f\u6570\u91cf\u3002\uff08\u5982\u679c\u5339\u914d\u5230\u7684\u6587\u6863\u5c0f\u4e8e\u8fd9\u4e2a\u503c\uff0c\u5219\u4e0d\u8fd4\u56de\u6587\u6863\uff09\u53ef\u4ee5\u53bb\u67e5\u770b minimum_should_match parameter \u94fe\u63a5 \u67e5\u770b\u53ef\u7528\u7684\u503c\u3002 zero_terms_query (Optional, string) Indicates whether no documents are returned if the analyzer removes all tokens, such as when using a stop filter. Valid values are: none (Default) No documents are returned if the analyzer removes all tokens. all Returns all documents, similar to a match_all query. See Zero terms query for an example. \uff08\u53ef\u9009\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff09\u8fd9\u4e2a\u53c2\u6570\u8868\u793a\u6ca1\u6709\u6587\u6863\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u5206\u8bcd\u5668\u662f\u5426\u5220\u9664\u6240\u6709\u7684token\uff0c\u6bd4\u5982\u5f53\u4f7f\u7528 \u505c\u7528\u8bcd \u8fc7\u6ee4\u7684\u65f6\u5019\uff0c\u53ef\u7528\u7684\u53c2\u6570\u4e3a\uff1a none\uff08\u9ed8\u8ba4\uff09\u5982\u679c\u5206\u8bcd\u5668\u5220\u9664\u6240\u6709\u7684token\uff0c\u5219\u4e0d\u8fd4\u56de\u4efb\u4f55\u6587\u6863\u3002 all \u8fd4\u56de\u6240\u6709\u6587\u6863\uff0c\u548cmatch_all \u67e5\u8be2\u5f88\u50cf\u3002\u67e5\u770b\u4f8b\u5b50\u53ef\u4ee5\u8bbf\u95eezero terms query \u7684\u94fe\u63a5\u3002","title":"Parameters for "},{"location":"Elasticsearch/queries/Match%20query/#notes","text":"","title":"Notes"},{"location":"Elasticsearch/queries/Match%20query/#short-request-example-","text":"You can simplify the match query syntax by combining the <field> and query parameters. For example: GET /_search { \"query\": { \"match\" : { \"message\" : \"this is a test\" } } }","title":"Short request example - \u7b80\u5355\u7684\u8bf7\u6c42\u53c2\u6570\u6848\u4f8b"},{"location":"Elasticsearch/queries/Match%20query/#how-the-match-query-works-match","text":"The match query is of type boolean . It means that the text provided is analyzed and the analysis process constructs a boolean query from the provided text. The operator parameter can be set to or or and to control the boolean clauses (defaults to or ). The minimum number of optional should clauses to match can be set using the minimum_should_match parameter. Here is an example with the operator parameter: match \u662f\u4e00\u79cdboolean\u67e5\u8be2\uff0c\u8fd9\u5c31\u610f\u5473\u67e5\u8be2\u7684text\u6587\u672c\u4f1a\u88ab\u5206\u8bcd\uff0c\u5e76\u4e14\u5206\u8bcd\u8fc7\u7a0b\u4f1a\u57fa\u4e8e\u63d0\u4f9b\u7684\u6587\u672c\u6784\u9020\u4e00\u4e2aboolean\u67e5\u8be2\u3002operator\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u4e3aor\u6216\u8005and\u6765\u63a7\u5236boolean\u67e5\u8be2\u8bed\u53e5\uff08\u9ed8\u8ba4\u662for\uff09\u3002 minimum_should_match \u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\uff0cshould\u8bed\u53e5\u7684\u6700\u5c0f\u5339\u914d\u6570\u91cf\u3002 \u4e0b\u9762\u662f\u4e00\u4e2aoperator\u53c2\u6570\u7684\u4f8b\u5b50\uff1a GET /_search { \"query\": { \"match\" : { \"message\" : { \"query\" : \"this is a test\", \"operator\" : \"and\" } } } } The analyzer can be set to control which analyzer will perform the analysis process on the text. It defaults to the field explicit mapping definition, or the default search analyzer. The lenient parameter can be set to true to ignore exceptions caused by data-type mismatches, such as trying to query a numeric field with a text query string. Defaults to false . analyzer\u53c2\u6570\u53ef\u4ee5\u5bf9text\u7c7b\u578b\u7684\u5b57\u6bb5\u5728\u5206\u8bcd\u9636\u6bb5\u4f7f\u7528\u54ea\u4e2a\u5206\u8bcd\u5668\u3002\u9ed8\u8ba4\u662f\u53d6mapping\u5b9a\u4e49\u4e2d\u663e\u5f0f\u8bbe\u7f6e\u7684\u5206\u8bcd\u5668\uff0c\u6ca1\u6709\u8bbe\u7f6e\u5219\u4f1a\u4f7f\u7528\u9ed8\u8ba4\u5206\u8bcd\u5668\uff08standard\u5206\u8bcd\u5668\uff09\u3002 lenient\u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u4e3atrue\u6765\u5ffd\u7565\u7c7b\u578b\u4e0d\u5339\u914d\u5bfc\u81f4\u7684\u5f02\u5e38\uff0c\u6bd4\u5982\u7528text\u7c7b\u578b\u53bb\u68c0\u7d22\u53bb\u67e5\u6570\u503c\u7c7b\u578b\uff0c\u9ed8\u8ba4\u662ffalse\u3002","title":"How the match query works -\u90a3\u4e48match \u67e5\u8be2\u662f\u600e\u4e48\u5de5\u4f5c\u7684\u5462"},{"location":"Elasticsearch/queries/Match%20query/#fuzziness-in-the-match-query-match","text":"fuzziness allows fuzzy matching based on the type of field being queried. See Fuzziness for allowed settings. The prefix_length and max_expansions can be set in this case to control the fuzzy process. If the fuzzy option is set the query will use top_terms_blended_freqs_${max_expansions} as its rewrite method the fuzzy_rewrite parameter allows to control how the query will get rewritten. Fuzzy transpositions ( ab \u2192 ba ) are allowed by default but can be disabled by setting fuzzy_transpositions to false . fuzziness\u53c2\u6570\u5141\u8bb8\u57fa\u4e8e\u88ab\u68c0\u7d22\u7684\u5b57\u6bb5\u8fdb\u884c\u6a21\u7cca\u5339\u914d\u3002\u53ef\u4ee5\u67e5\u770b Fuzziness \u66f4\u591a\u7684\u8bbe\u7f6e\u3002 prefix_length\u548cmax_expansions\u53c2\u6570\u53ef\u4ee5\u5728\u8fd9\u4e2a\u6848\u4f8b\u4e2d\u8bbe\u7f6e\u6765\u63a7\u5236\u6a21\u7cca\u67e5\u8be2\u6d41\u7a0b\u3002\u5982\u679c\u6a21\u7cca\u67e5\u8be2\u9009\u9879\u88ab\u8bbe\u7f6e\u4e86\uff0c\u8fd9\u4e2a\u67e5\u8be2\u4f1a\u4f7f\u7528top_terms_blended_freqs_${max_expansions}\u4f5c\u4e3a\u5b83\u7684\u91cd\u5199\u65b9\u6cd5\u3002fuzzy_rewrite\u53c2\u6570\u53ef\u4ee5\u63a7\u5236\u600e\u4e48\u91cd\u5199\u3002 \u6a21\u7cca\u7ffb\u8f6c\uff08ab->ba\uff09\u9ed8\u8ba4\u662f\u5f00\u542f\u7684\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u901a\u8fc7\u5c06fuzzy_transpositions\u53c2\u6570\u8bbe\u7f6e\u4e3afalse\u6765\u5173\u95ed\u3002 NOTE: Fuzzy matching is not applied to terms with synonyms or in cases where the analysis process produces multiple tokens at the same position. Under the hood these terms are expanded to a special synonym query that blends term frequencies, which does not support fuzzy expansion. \u5907\u6ce8\uff1a\u6a21\u7cca\u5339\u914d\u4e0d\u4f1a\u5e94\u7528\u5728\u540c\u4e49\u8bcd\u8bcd\u6761\u4e0a\uff0c\u5206\u8bcd\u8fc7\u7a0b\u4ea7\u751f\u7684\u4e00\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u591a\u4e2atoken\u4e0a\u4e5f\u4e0d\u4f1a\u751f\u6548\u3002\u5e95\u5c42\u8fd9\u4e9b\u8bcd\u6761\u4f1a\u6269\u5c55\u6210\u4e00\u4e2a\u7279\u6b8a\u7684\u540c\u4e49\u8bcdquery\uff0c\u5b83\u6df7\u5408\u4e86\u8bcd\u6761\u9891\u6570\uff0c\u4e0d\u652f\u6301\u6a21\u7cca\u6269\u5c55\u3002 GET /_search { \"query\": { \"match\" : { \"message\" : { \"query\" : \"this is a test\", \"operator\" : \"and\" } } } }","title":"Fuzziness in the match query - match\u4e2d\u7684\u6a21\u7cca\u641c\u7d22"},{"location":"Elasticsearch/queries/Match%20query/#zero-terms-query","text":"If the analyzer used removes all tokens in a query like a stop filter does, the default behavior is to match no documents at all. In order to change that the zero_terms_query option can be used, which accepts none (default) and all which corresponds to a match_all query. \u5982\u679c\u4f7f\u7528\u7684\u5206\u8bcd\u5668\u60f3stop\u5206\u8bcd\u8fc7\u6ee4\u4e00\u6837\u5220\u9664\u4e86\u6240\u6709\u7684token\uff0c\u90a3\u4e48\u5c31\u5339\u914d\u4e0d\u5230\u4efb\u4f55\u6587\u6863\u3002\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0czero_terms_query\u9009\u9879\u7684\u4f5c\u7528\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\uff0c\u8fd9\u4e2a\u9009\u9879\u53ef\u4ee5\u4f20\u5165none(\u9ed8\u8ba4)\u548call\uff08\u76f8\u5f53\u4e8ematch_all\uff09\u3002 GET /_search { \"query\": { \"match\" : { \"message\" : { \"query\" : \"to be or not to be\", \"operator\" : \"and\", \"zero_terms_query\": \"all\" } } } }","title":"Zero terms query"},{"location":"Elasticsearch/queries/Match%20query/#cutoff-frequency","text":"","title":"Cutoff frequency"},{"location":"Elasticsearch/queries/Match%20query/#warning","text":"","title":"WARNING"},{"location":"Elasticsearch/queries/Match%20query/#deprecated-in-730","text":"This option can be omitted as the Match can skip blocks of documents efficiently, without any configuration, provided that the total number of hits is not tracked. \u6ce8\u610f\uff1a 7.3.0\u4e2d\u5df2\u7ecf\u5e9f\u5f03\u4e86 \u7531\u4e8eMatch\u53ef\u7528\u6709\u6548\u7684\u8df3\u8fc7\u6587\u6863\u5757\uff0c\u6240\u4ee5\u8fd9\u4e2a\u9009\u9879\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5728\u4e0d\u8ddf\u8e2a\u4e2d\u547d\u4e2d\u603b\u6570\u7684\u524d\u63d0\u4e0b\uff0c\u65e0\u9700\u4efb\u4f55\u914d\u7f6e\u3002 The match query supports a cutoff_frequency that allows specifying an absolute or relative document frequency where high frequency terms are moved into an optional subquery and are only scored if one of the low frequency (below the cutoff) terms in the case of an or operator or all of the low frequency terms in the case of an and operator match. Match query\u652f\u6301cutoff_frequency\uff08\u622a\u6b62\u9891\u7387\uff09\uff0ccutoff_frequency\u5141\u8bb8\u4f60\u6307\u5b9a\u7edd\u5bf9\u6216\u8005\u76f8\u5bf9\u6587\u6863\u9891\u7387\uff0c\u5176\u4e2d\u9ad8\u9891\u8bcd\u9879\u88ab\u79fb\u52a8\u5230\u53ef\u9009\u7684\u5b50\u67e5\u8be2\u4e2d\uff0c\u5e76\u4e14\u53ea\u6709\u5728 or \u64cd\u4f5c\u7b26\u7684\u60c5\u51b5\u4e0b\u4f4e\u9891\u8bcd\uff08\u4f4e\u4e8e\u622a\u6b62\u503c\uff09\u4e4b\u4e00 \u6216\u6240\u6709\u5728 and \u8fd0\u7b97\u7b26\u5339\u914d\u7684\u60c5\u51b5\u4e0b\u7684\u4f4e\u9891\u8bcd\u9879\u3002 This query allows handling stopwords dynamically at runtime, is domain independent and doesn\u2019t require a stopword file. It prevents scoring / iterating high frequency terms and only takes the terms into account if a more significant / lower frequency term matches a document. Yet, if all of the query terms are above the given cutoff_frequency the query is automatically transformed into a pure conjunction ( and ) query to ensure fast execution. \u8fd9\u4e2aquery\u5141\u8bb8\u8fd0\u884c\u65f6\u52a8\u6001\u5904\u7406\u505c\u7528\u8bcd\uff0c\u72ec\u7acb\u4e8e\u57df\u5e76\u4e14\u4e0d\u9700\u8981\u4f9d\u8d56\u505c\u7528\u8bcd\u6587\u4ef6\u3002\u5b83\u53ef\u4ee5\u9632\u6b62\u5bf9\u9ad8\u9891\u8bcd\u6253\u5206\u3001\u8fed\u4ee3\uff0c\u5e76\u4e14\u4ec5\u5728\u66f4\u91cd\u8981/\u8f83\u4f4e\u9891\u7387\u7684\u8bcd\u4e0e\u6587\u6863\u5339\u914d\u65f6\u624d\u8003\u8651\u8fd9\u4e9b\u8bcd\u3002\u5982\u679c\u6240\u6709\u7684\u67e5\u8be2\u6b64\u9879\u90fd\u9ad8\u4e8e\u8ddf\u5b9a\u7684cuttof_frequency\uff0c\u8fd9\u4e2a\u67e5\u8be2\u4f1a\u81ea\u52a8\u8f6c\u6362\u4e3a\u7eaf\u8fde\u63a5\u8bcdquery\uff08and\uff09\u6765\u786e\u4fdd\u66f4\u5feb\u7684\u6267\u884c\u3002 The cutoff_frequency can either be relative to the total number of documents if in the range from 0 (inclusive) to 1 (exclusive) or absolute if greater or equal to 1.0 . cuttof_frequency \u65e2\u53ef\u4ee5\u4e0e\u6587\u6863\u603b\u6570\u6709\u5173\uff0c\u5982\u679c\u8303\u56f4\u5927\u4e8e\u7b49\u4e8e0\u5c0f\u4e8e1\uff0c\u4e5f\u53ef\u4ee5\u662f\u7edd\u5bf9\u7684\u5982\u679c\u5927\u4e8e\u7b49\u4e8e1.0\u3002 Here is an example showing a query composed of stopwords exclusively: \u8fd9\u91cc\u6709\u4e2a\u4f8b\u5b50\uff0c\u5b8c\u5168\u7531\u505c\u7528\u8bcd\u7ec4\u5408\u6210\u7684 GET /_search { \"query\": { \"match\" : { \"message\" : { \"query\" : \"to be or not to be\", \"cutoff_frequency\" : 0.001 } } } } The cutoff_frequency option operates on a per-shard-level. This means that when trying it out on test indexes with low document numbers you should follow the advice in Relevance is broken . cuttof_frequency\u9009\u9879\u5728\u5206\u7247\u7ea7\u522b\u4e0a\u751f\u6548\u3002\u8fd9\u5c31\u610f\u5473\u7740\u5f53\u5728\u6587\u6863\u6570\u5c11\u7684\u7d22\u5f15\u4e0a\u5c1d\u8bd5\u65f6\uff0c\u4f60\u5e94\u8be5\u9075\u5faaRelevance is broken\u7684\u5efa\u8bae\u3002","title":"Deprecated in 7.3.0."},{"location":"Elasticsearch/queries/Match%20query/#synonyms-","text":"The match query supports multi-terms synonym expansion with the synonym_graph token filter. When this filter is used, the parser creates a phrase query for each multi-terms synonyms. For example, the following synonym: \"ny, new york\" would produce: (ny OR (\"new york\")) It is also possible to match multi terms synonyms with conjunctions instead: match\u68c0\u7d22\u652f\u6301\u901a\u8fc7 synonym_graph \u8bcd\u6761\u8fc7\u6ee4\u5668\u6269\u5c55\u591a\u8bcd\u9879\u540c\u4e49\u8bcd\u3002\u5f53\u4f7f\u7528\u8fd9\u4e2a\u8fc7\u6ee4\u5668\u7684\u65f6\u5019\uff0c\u8bed\u6cd5\u89e3\u6790\u5668\u4f1a\u521b\u5efa\u4e00\u4e2a\u68c0\u7d22\u6bcf\u4e2a\u591a\u8bcd\u6761\u540c\u4e49\u8bcd\u7684\u8bed\u6cd5\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u540c\u4e49\u8bcd\uff1a\u201cny,new york\u201d\u4f1a\u88ab\u89e3\u6790\u6210\uff08ny OR (\"new york\")\uff09 \u4e5f\u6709\u53ef\u80fd\u4ee5\u8fde\u8bcd\u5339\u914d\u591a\u4e2a\u8bcd\u9879\u540c\u4e49\u8bcd\uff1a GET /_search { \"query\": { \"match\" : { \"message\": { \"query\" : \"ny city\", \"auto_generate_synonyms_phrase_query\" : false } } } } The example above creates a boolean query: (ny OR (new AND york)) city that matches documents with the term ny or the conjunction new AND york . By default the parameter auto_generate_synonyms_phrase_query is set to true . \u4e0a\u8ff0\u4f8b\u5b50\u4f1a\u521b\u5efa\u4e00\u4e2abool query\uff1a\uff08ny OR (new AND york)\uff09city \uff0c\u4ee5cy\u6216\u8005\u8fde\u8bcd new AND york \u5339\u914d\u6587\u6863\u3002\u9ed8\u8ba4auto_generate_synonyms_phrase_query\u53c2\u6570\u4e3atrue\u3002","title":"Synonyms--\u540c\u4e49\u8bcd"},{"location":"Elasticsearch/queries/Query%20DSL/","text":"Query DSL ES\u63d0\u4f9b\u4e86\u4e00\u5957\u57fa\u4e8ejson\u7684\u68c0\u7d22\u8bed\u8a00\uff0c\u8003\u8651\u5230query dsl\u662f\u4e00\u4e2a\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u5305\u542b\u4e24\u7c7b\u8bed\u6cd5\u3002 \u53f6\u5b50\u68c0\u7d22\u8bed\u6cd5 \u53f6\u5b50\u68c0\u7d22\u8bed\u6cd5\u770b\u8d77\u6765\u50cf\u662f\u4e00\u4e2a\u5728\u7279\u5b9a\u5b57\u6bb5\u653e\u4e00\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u6bd4\u5982\uff0cmatch,term\u6216\u8005range\u67e5\u8be2\u3002 \u590d\u5408\u67e5\u8be2\u8bed\u6cd5 \u590d\u5408\u67e5\u8be2\u8bed\u6cd5\u5c06\u53f6\u5b50\u6216\u8005\u590d\u6742\u67e5\u8be2\u5305\u88c5\u7ed3\u5408\u5230\u4e00\u4e2a\u590d\u5408\u67e5\u8be2\u4e2d\uff08\u6bd4\u5982bool\u3001dis_max\u67e5\u8be2\uff09\uff0c\u6216\u8005\u6539\u53d8\u539f\u6709\u7684\u67e5\u8be2\uff08\u6bd4\u5982constant_score\uff09 \u68c0\u7d22\u8bed\u6cd5\u6839\u636e\u5728query\u4e0a\u4e0b\u6587\u8fd8\u662ffilter\u4e0a\u4e0b\u6587\u7684\u4e0d\u540c\u4f1a\u6709\u4e00\u5b9a\u7684\u5dee\u5f02\u3002 Query and filter context \u76f8\u5173\u6027\u5206\u6570 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ces\u6392\u5e8f\u4f1a\u6839\u636e\u76f8\u5173\u6027\u5206\u6570\u5339\u914d\u641c\u7d22\u7ed3\u679c\u3002\u90a3\u5c31\u610f\u5473\u7740\u8868\u793a\u4e86\u6bcf\u4e00\u7bc7\u6587\u6863\u4e0equery\u8bed\u53e5\u7684\u5339\u914d\u7a0b\u5ea6\u3002 \u8fd9\u4e2a\u76f8\u5173\u6027\u5206\u6570\u662f\u4e00\u4e2a\u6b63\u6d6e\u70b9\u6570\uff0c\u641c\u7d22API\u4f1a\u8fd4\u56de\u8fd9\u4e2a\u5143\u6570\u636e\u5b57\u6bb5_score\u3002 _score\u8d8a\u9ad8\uff0c\u4e0e\u6587\u6863\u7684\u76f8\u5173\u6027\u8d8a\u9ad8\u3002\u800c\u4e14\u6bcf\u4e2aquery\u7c7b\u578b\u4f1a\u6709\u4e0d\u540c\u7684\u6253\u5206\u65b9\u5f0f\uff0c\u6253\u5206\u4e5f\u4f1a\u548cquery\u8fd8\u662ffilter\u67e5\u8be2\u7684\u4e0d\u540c\u800c\u4e0d\u540c\u3002 Query\u4e0a\u4e0b\u6587 \u5728\u68c0\u7d22\u4e0a\u4e0b\u6587\u5fe0\uff0c\u4e00\u4e2a\u68c0\u7d22\u8bed\u6cd5\u8868\u793a\u8fd9\u4e2a\u6587\u6863\u548c\u8fd9\u4e2a\u68c0\u7d22\u8bed\u53e5\u7684\u5339\u914d\u7a0b\u5ea6\u3002\u9664\u4e86\u5224\u5b9a\u662f\u5426\u548c\u6587\u6863\u5339\u914d\u5916\uff0cquery\u8bed\u53e5\u4e5f\u4f1a\u5728_score\u5143\u6570\u636e\u5b57\u6bb5\u4e2d\u8ba1\u7b97\u76f8\u5173\u5f97\u5206\u3002 \u65e0\u8bba\u4ec0\u4e48\u65f6\u5019\u68c0\u7d22\u8bed\u53e5\u88ab\u4f20\u9012\u5230query\u53c2\u6570\u4e2d\uff0c\u68c0\u7d22\u4e0a\u4e0b\u6587\u90fd\u4f1a\u751f\u6548\u3002\u4f8b\u5982searh api\u4e2d\u7684query\u3002 Filter \u4e0a\u4e0b\u6587 filter\u4e0a\u4e0b\u6587\u8868\u793a\u8fd9\u4e2a\u67e5\u8be2\u8bed\u53e5\u662f\u5426\u5339\u914d\uff0c\u7ed3\u679c\u53ea\u80fd\u662ftrue\u6216\u8005false\uff0c\u4e0d\u8ba1\u7b97\u5206\u6570\u3002\u4e00\u822c\u7528\u4e8e\u8fc7\u6ee4\u7ed3\u6784\u5316\u6570\u636e\u6bd4\u5982 timestamp\u3001status. filter\u4e0d\u53c2\u4e0e\u6253\u5206\uff0c\u4e0d\u8fc7\u5982\u679c\u8981\u6253\u5206\uff0c\u53ef\u4ee5\u5305\u88f9\u5728constant_socre\u4e2d GET /_search { \"query\": { \"bool\": { \"must\": [ { \"match\": { \"title\": \"Search\" }}, { \"match\": { \"content\": \"Elasticsearch\" }} ], \"filter\": [ { \"term\": { \"status\": \"published\" }}, { \"range\": { \"publish_date\": { \"gte\": \"2015-01-01\" }}} ] } } }","title":"Query DSL"},{"location":"Elasticsearch/queries/Query%20DSL/#query-dsl","text":"ES\u63d0\u4f9b\u4e86\u4e00\u5957\u57fa\u4e8ejson\u7684\u68c0\u7d22\u8bed\u8a00\uff0c\u8003\u8651\u5230query dsl\u662f\u4e00\u4e2a\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u5305\u542b\u4e24\u7c7b\u8bed\u6cd5\u3002","title":"Query DSL"},{"location":"Elasticsearch/queries/Query%20DSL/#_1","text":"\u53f6\u5b50\u68c0\u7d22\u8bed\u6cd5\u770b\u8d77\u6765\u50cf\u662f\u4e00\u4e2a\u5728\u7279\u5b9a\u5b57\u6bb5\u653e\u4e00\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u6bd4\u5982\uff0cmatch,term\u6216\u8005range\u67e5\u8be2\u3002","title":"\u53f6\u5b50\u68c0\u7d22\u8bed\u6cd5"},{"location":"Elasticsearch/queries/Query%20DSL/#_2","text":"\u590d\u5408\u67e5\u8be2\u8bed\u6cd5\u5c06\u53f6\u5b50\u6216\u8005\u590d\u6742\u67e5\u8be2\u5305\u88c5\u7ed3\u5408\u5230\u4e00\u4e2a\u590d\u5408\u67e5\u8be2\u4e2d\uff08\u6bd4\u5982bool\u3001dis_max\u67e5\u8be2\uff09\uff0c\u6216\u8005\u6539\u53d8\u539f\u6709\u7684\u67e5\u8be2\uff08\u6bd4\u5982constant_score\uff09 \u68c0\u7d22\u8bed\u6cd5\u6839\u636e\u5728query\u4e0a\u4e0b\u6587\u8fd8\u662ffilter\u4e0a\u4e0b\u6587\u7684\u4e0d\u540c\u4f1a\u6709\u4e00\u5b9a\u7684\u5dee\u5f02\u3002","title":"\u590d\u5408\u67e5\u8be2\u8bed\u6cd5"},{"location":"Elasticsearch/queries/Query%20DSL/#query-and-filter-context","text":"","title":"Query and filter context"},{"location":"Elasticsearch/queries/Query%20DSL/#_3","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0ces\u6392\u5e8f\u4f1a\u6839\u636e\u76f8\u5173\u6027\u5206\u6570\u5339\u914d\u641c\u7d22\u7ed3\u679c\u3002\u90a3\u5c31\u610f\u5473\u7740\u8868\u793a\u4e86\u6bcf\u4e00\u7bc7\u6587\u6863\u4e0equery\u8bed\u53e5\u7684\u5339\u914d\u7a0b\u5ea6\u3002 \u8fd9\u4e2a\u76f8\u5173\u6027\u5206\u6570\u662f\u4e00\u4e2a\u6b63\u6d6e\u70b9\u6570\uff0c\u641c\u7d22API\u4f1a\u8fd4\u56de\u8fd9\u4e2a\u5143\u6570\u636e\u5b57\u6bb5_score\u3002 _score\u8d8a\u9ad8\uff0c\u4e0e\u6587\u6863\u7684\u76f8\u5173\u6027\u8d8a\u9ad8\u3002\u800c\u4e14\u6bcf\u4e2aquery\u7c7b\u578b\u4f1a\u6709\u4e0d\u540c\u7684\u6253\u5206\u65b9\u5f0f\uff0c\u6253\u5206\u4e5f\u4f1a\u548cquery\u8fd8\u662ffilter\u67e5\u8be2\u7684\u4e0d\u540c\u800c\u4e0d\u540c\u3002","title":"\u76f8\u5173\u6027\u5206\u6570"},{"location":"Elasticsearch/queries/Query%20DSL/#query","text":"\u5728\u68c0\u7d22\u4e0a\u4e0b\u6587\u5fe0\uff0c\u4e00\u4e2a\u68c0\u7d22\u8bed\u6cd5\u8868\u793a\u8fd9\u4e2a\u6587\u6863\u548c\u8fd9\u4e2a\u68c0\u7d22\u8bed\u53e5\u7684\u5339\u914d\u7a0b\u5ea6\u3002\u9664\u4e86\u5224\u5b9a\u662f\u5426\u548c\u6587\u6863\u5339\u914d\u5916\uff0cquery\u8bed\u53e5\u4e5f\u4f1a\u5728_score\u5143\u6570\u636e\u5b57\u6bb5\u4e2d\u8ba1\u7b97\u76f8\u5173\u5f97\u5206\u3002 \u65e0\u8bba\u4ec0\u4e48\u65f6\u5019\u68c0\u7d22\u8bed\u53e5\u88ab\u4f20\u9012\u5230query\u53c2\u6570\u4e2d\uff0c\u68c0\u7d22\u4e0a\u4e0b\u6587\u90fd\u4f1a\u751f\u6548\u3002\u4f8b\u5982searh api\u4e2d\u7684query\u3002","title":"Query\u4e0a\u4e0b\u6587"},{"location":"Elasticsearch/queries/Query%20DSL/#filter","text":"filter\u4e0a\u4e0b\u6587\u8868\u793a\u8fd9\u4e2a\u67e5\u8be2\u8bed\u53e5\u662f\u5426\u5339\u914d\uff0c\u7ed3\u679c\u53ea\u80fd\u662ftrue\u6216\u8005false\uff0c\u4e0d\u8ba1\u7b97\u5206\u6570\u3002\u4e00\u822c\u7528\u4e8e\u8fc7\u6ee4\u7ed3\u6784\u5316\u6570\u636e\u6bd4\u5982 timestamp\u3001status. filter\u4e0d\u53c2\u4e0e\u6253\u5206\uff0c\u4e0d\u8fc7\u5982\u679c\u8981\u6253\u5206\uff0c\u53ef\u4ee5\u5305\u88f9\u5728constant_socre\u4e2d GET /_search { \"query\": { \"bool\": { \"must\": [ { \"match\": { \"title\": \"Search\" }}, { \"match\": { \"content\": \"Elasticsearch\" }} ], \"filter\": [ { \"term\": { \"status\": \"published\" }}, { \"range\": { \"publish_date\": { \"gte\": \"2015-01-01\" }}} ] } } }","title":"Filter \u4e0a\u4e0b\u6587"},{"location":"Elasticsearch/queries/Resocing/","text":"Rescoring \u200b \u91cd\u65b0\u6253\u5206\u53ef\u4ee5\u5bf9query\u548cpost_filter\u9636\u6bb5\u8fd4\u56de\u7684topN\uff08\u4f8b\u5982100-500\uff09\u7684\u6587\u6863\u8fdb\u884c\u91cd\u65b0\u6253\u5206\uff0c\u4ee5\u63d0\u9ad8\u7cbe\u5ea6\uff0c\u8fd9\u4e2a\u673a\u5236\u4f7f\u7528\u8f85\u52a9\u7b97\u6cd5\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u6210\u672c\u66f4\u9ad8\u7684\u7b97\u6cd5\u5bf9\u7d22\u5f15\u4e2d\u7684\u6240\u6709\u7d22\u5f15\u8fdb\u884c\u6253\u5206\u3002 \u200b rescore\u8bf7\u6c42\u662f\u6bcf\u4e2a\u5206\u7247\u7684\u8fd4\u56de\u7ed3\u679c\u5728\u8282\u70b9\u6392\u5e8f\u4e4b\u524d\u6267\u884c\u7684\u3002 \u200b \u76ee\u524d\u6765\u8bf4\uff0crescore API\u53ea\u6709\u4e00\u4e2a\u5b9e\u73b0\uff1a\u68c0\u7d22\u6253\u5206\uff08\u4f7f\u7528query\u6765\u8c03\u6574\u6253\u5206\uff09\u3002\u672a\u6765\u53ef\u80fd\u4f1a\u6709\u53ef\u66ff\u4ee3\u7684\u91cd\u65b0\u6253\u5206\u673a\u5236\u3002 search_type\u8bbe\u7f6e\u4e3ascan\u6216\u8005count\u4e4b\u540e\uff0crescore\u4e0d\u4f1a\u6267\u884c","title":"Resocing"},{"location":"Elasticsearch/queries/%E8%A1%B0%E5%87%8F%E5%87%BD%E6%95%B0/","text":"\u5f88\u591a\u53d8\u91cf\u90fd\u53ef\u4ee5\u5f71\u54cd\u7528\u6237\u5bf9\u4e8e\u9152\u5e97\u7684\u9009\u62e9\uff0c\u50cf\u662f\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u9152\u5e97\u79bb\u5e02\u4e2d\u5fc3\u8fd1\u4e00\u70b9\uff0c\u4f46\u662f\u5982\u679c\u4ef7\u683c\u8db3\u591f\u4fbf\u5b9c\uff0c\u4e5f\u613f\u610f\u4e3a\u4e86\u7701\u94b1\uff0c\u59a5\u534f\u9009\u62e9\u4e00\u4e2a\u66f4\u8fdc\u7684\u4f4f\u5904 \u5982\u679c\u6211\u4eec\u53ea\u662f\u4f7f\u7528\u4e00\u4e2a filter \u6392\u9664\u6240\u6709\u5e02\u4e2d\u5fc3\u65b9\u5706 100 \u7c73\u4ee5\u5916\u7684\u9152\u5e97\uff0c\u518d\u7528\u4e00\u4e2afilter\u6392\u9664\u6bcf\u665a\u4ef7\u683c\u8d85\u8fc7100\u5143\u7684\u9152\u5e97\uff0c\u8fd9\u79cd\u4f5c\u6cd5\u592a\u8fc7\u5f3a\u786c\uff0c\u53ef\u80fd\u6709\u4e00\u95f4\u623f\u5728 500\u7c73\uff0c\u4f46\u662f\u8d85\u7ea7\u4fbf\u5b9c\u4e00\u665a\u53ea\u898110\u5143\uff0c\u7528\u6237\u53ef\u80fd\u4f1a\u56e0\u6b64\u613f\u610f\u59a5\u534f\u4f4f\u8fd9\u95f4\u623f \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u6b64function_score\u67e5\u8be2\u63d0\u4f9b\u4e86\u4e00\u7ec4 \u8870\u51cf\u51fd\u6570 (decay functions)\uff0c \u8ba9\u6211\u4eec\u6709\u80fd\u529b\u5728\u4e24\u4e2a\u6ed1\u52a8\u6807\u51c6(\u5982\u5730\u70b9\u548c\u4ef7\u683c)\u4e4b\u95f4\u6743\u8861 function_score\u652f\u6301\u7684\u8870\u51cf\u51fd\u6570\u6709\u4e09\u79cd\uff0c\u5206\u522b\u662f linear\u3001exp \u548c gauss linear\u3001exp\u3001gauss\u4e09\u79cd\u8870\u51cf\u51fd\u6570\u7684\u5dee\u522b\u53ea\u5728\u4e8e\u8870\u51cf\u66f2\u7ebf\u7684\u5f62\u72b6\uff0c\u5728DSL\u7684\u8bed\u6cd5\u4e0a\u7684\u7528\u6cd5\u5b8c\u5168\u4e00\u6837 linear : \u7ebf\u6027\u51fd\u6570\u662f\u6761\u76f4\u7ebf\uff0c\u4e00\u65e6\u76f4\u7ebf\u4e0e\u6a2a\u8f740\u9999\u8549\uff0c\u6240\u6709\u5176\u4ed6\u503c\u7684\u8bc4\u5206\u90fd\u662f0 exp : \u6307\u6570\u51fd\u6570\u662f\u5148\u5267\u70c8\u8870\u51cf\u7136\u540e\u53d8\u7f13 guass(\u6700\u5e38\u7528) : \u9ad8\u65af\u51fd\u6570\u5219\u662f\u949f\u5f62\u7684\uff0c\u4ed6\u7684\u8870\u51cf\u901f\u7387\u662f\u5148\u7f13\u6162\uff0c\u7136\u540e\u53d8\u5feb\uff0c\u6700\u540e\u53c8\u653e\u7f13 \u8870\u51cf\u51fd\u6570\u4eec (linear\u3001exp\u3001gauss) \u652f\u6301\u7684\u53c2\u6570 origin : \u4e2d\u5fc3\u70b9\uff0c\u6216\u662f\u5b57\u6bb5\u53ef\u80fd\u7684\u6700\u4f73\u503c\uff0c\u843d\u5728\u539f\u70b9(origin)\u4e0a\u7684\u6587\u6863\u8bc4\u5206_score\u4e3a\u6ee1\u52061.0\uff0c\u652f\u6301\u6570\u503c\u3001\u65f6\u95f4 \u4ee5\u53ca \"\u7ecf\u7eac\u5ea6\u5730\u7406\u5ea7\u6807\u70b9\"(\u6700\u5e38\u7528) \u7684\u5b57\u6bb5 offset : \u4ece origin \u4e3a\u4e2d\u5fc3\uff0c\u4e3a\u4ed6\u8bbe\u7f6e\u4e00\u4e2a\u504f\u79fb\u91cfoffset\u8986\u76d6\u4e00\u4e2a\u8303\u56f4\uff0c\u5728\u6b64\u8303\u56f4\u5185\u6240\u6709\u7684\u8bc4\u5206_score\u4e5f\u90fd\u662f\u548corigin\u4e00\u6837\u6ee1\u52061.0 scale : \u8870\u51cf\u7387\uff0c\u5373\u662f\u4e00\u4e2a\u6587\u6863\u4eceorigin\u4e0b\u843d\u65f6\uff0c_score\u6539\u53d8\u7684\u901f\u5ea6 decay : \u4ece origin \u8870\u51cf\u5230 scale \u6240\u5f97\u7684\u8bc4\u5206_score\uff0c\u9ed8\u8ba4\u4e3a0.5 (\u4e00\u822c\u4e0d\u9700\u8981\u6539\u53d8\uff0c\u8fd9\u4e2a\u53c2\u6570\u4f7f\u7528\u9ed8\u8ba4\u7684\u5c31\u597d\u4e86) \u4ee5\u4e0a\u9762\u7684\u56fe\u4e3a\u4f8b \u6240\u6709\u66f2\u7ebf(linear\u3001exp\u3001gauss)\u7684origin\u90fd\u662f40\uff0coffset\u662f5\uff0c\u56e0\u6b64\u8303\u56f4\u572840-5 <= value <= 40+5\u7684\u6587\u6863\u7684\u8bc4\u5206_score\u90fd\u662f\u6ee1\u52061.0 \u800c\u5728\u6b64\u8303\u56f4\u4e4b\u5916\uff0c\u8bc4\u5206\u4f1a\u5f00\u59cb\u8870\u51cf\uff0c\u8870\u51cf\u7387\u7531scale\u503c(\u6b64\u5904\u662f5)\u548cdecay\u503c(\u6b64\u5904\u662f\u9ed8\u8ba4\u503c0.5)\u51b3\u5b9a\uff0c\u5728origin +/- (offset + scale)\u5904\u7684\u8bc4\u5206\u662fdecay\u503c\uff0c\u4e5f\u5c31\u662f\u572830\u300150\u7684\u8bc4\u5206\u5904\u662f0.5\u5206 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5728origin + offset + scale\u6216\u662forigin - offset - scale\u7684\u70b9\u4e0a\uff0c\u5f97\u5230\u7684\u5206\u6570\u4ec5\u6709decay\u5206","title":"\u8870\u51cf\u51fd\u6570"},{"location":"JVM/JFR%26JMC%26JCMD/","text":"JRF&JMC&JCMD JFR \u4ec0\u4e48\u662fJFR JFR \u662f Java Flight Record \uff08Java\u98de\u884c\u8bb0\u5f55\uff09 \u7684\u7f29\u5199\uff0c\u662f JVM \u5185\u7f6e\u7684\u57fa\u4e8e\u4e8b\u4ef6\u7684JDK\u76d1\u63a7\u8bb0\u5f55\u6846\u67b6\u3002\u8fd9\u4e2a\u8d77\u540d\u5c31\u662f\u53c2\u8003\u4e86\u9ed1\u5323\u5b50\u5bf9\u4e8e\u98de\u673a\u7684\u4f5c\u7528\uff0c\u5c06Java\u8fdb\u7a0b\u6bd4\u55bb\u6210\u98de\u673a\u98de\u884c\u3002\u987e\u540d\u601d\u4e49\uff0c\u8fd9\u662f\u4e00\u4e2a\u6536\u96c6\u8fd0\u884c\u7684JAVA\u5e94\u7528\u7684 \u8bca\u65ad\u4fe1\u606f \u548c \u5206\u6790\u6570\u636e \u3002 JDK11 \u5f00\u59cb\u96c6\u6210\u8fdbJVM\uff0c\u51e0\u4e4e\u4e0d\u4f1a\u9020\u6210\u6027\u80fd\u5f00\u9500\uff0c\u56e0\u6b64\u5373\u4f7f\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002 \u5982\u679c\u662f\u5229\u7528\u9ed8\u8ba4\u914d\u7f6e\u542f\u52a8\u8fd9\u4e2a\u8bb0\u5f55\uff0c\u6027\u80fd\u975e\u5e38\u9ad8\u6548\uff0c\u5bf9\u4e8e\u4e1a\u52a1\u5f71\u54cd\u5f88\u5c0f\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6846\u67b6\u672c\u6765\u5c31\u662f\u7528\u6765\u957f\u671f\u5728\u7ebf\u4e0a\u90e8\u7f72\u7684\u6846\u67b6\u3002\u8fd9\u4e2a\u8bb0\u5f55\u53ef\u4ee5\u8f93\u51fa\u6210\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u7528\u6237\u53ef\u4ee5\u6307\u5b9a\u6700\u5927\u8bb0\u5f55\u65f6\u95f4\uff0c\u6216\u8005\u6700\u5927\u8bb0\u5f55\u5927\u5c0f\uff0c\u4f9b\u7528\u6237\u5728\u9700\u8981\u7684\u65f6\u5019\u8f93\u51fa\u6210\u6587\u4ef6\u8fdb\u884c\u4e8b\u540e\u5206\u6790\u3002 \u4e3a\u4ec0\u4e48\u4f7f\u7528JFR \u6709\u4e9b\u95ee\u9898\u5f00\u53d1\u6d4b\u8bd5\u9636\u6bb5\u5f88\u96be\u53d1\u73b0\uff0c\u9700\u8981\u5728\u751f\u4ea7\u73af\u5883\u624d\u4f1a\u51fa\u73b0\u3002JFR\u4f7f\u7528\u5728\u751f\u4ea7\u73af\u5883\uff0c\u53ef\u4ee5\u66f4\u597d\u7684\u5b9a\u4f4d\u95ee\u9898\u3002\u5b98\u65b9\u8bf4\uff0c\u76ee\u6807\u662f\u5f00\u542f JFR \u76d1\u63a7\uff08\u9ed8\u8ba4\u914d\u7f6e\uff09\uff0c\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u57281%\u4e4b\u5185\uff0c\u5bf9JVM Runtime \u548c GC\uff0cOS \u4ee5\u53ca Java \u5e93\u8fdb\u884c\u5168\u65b9\u4f4d\u7684\u76d1\u63a7\u3002 \u6ce8\u610f \uff1a\u751f\u4ea7\u73af\u5883\u914d\u7f6e\u4e0d\u5efa\u8bae\u957f\u671f\u4f7f\u7528profile\uff0c\u5426\u5219\u4f1a\u589e\u52a0\u5f88\u5927\u7684\u6027\u80fd\u5f00\u9500\u3002settings\u7684\u8be6\u7ec6\u914d\u7f6e\u5728 $JAVA_HOME/lib/jfr/ \uff0cdefault.jfr\u548cprofile.jfr\u3002 \u6709\u54ea\u4e9b\u5173\u952e\u7279\u6027 \u4f4e\u5f00\u9500\uff08\u5728\u914d\u7f6e\u6b63\u786e\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u53ef\u5728\u751f\u4ea7\u73af\u5883\u6838\u5fc3\u4e1a\u52a1\u8fdb\u7a0b\u4e2d\u59cb\u7ec8\u5728\u7ebf\u8fd0\u884c\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u968f\u65f6\u5f00\u542f\u4e0e\u5173\u95ed\u3002 \u53ef\u4ee5\u67e5\u770b\u51fa\u95ee\u9898\u65f6\u95f4\u6bb5\u5185\u8fdb\u884c\u5206\u6790\uff0c\u53ef\u4ee5\u5206\u6790 Java \u5e94\u7528\u7a0b\u5e8f\uff0cJVM \u5185\u90e8\u4ee5\u53ca\u5f53\u524dJava\u8fdb\u7a0b\u8fd0\u884c\u73af\u5883\u7b49\u591a\u56e0\u7d20\u3002 JFR\u57fa\u4e8e\u4e8b\u4ef6\u91c7\u96c6\uff0c\u53ef\u4ee5\u5206\u6790\u975e\u5e38\u5e95\u5c42\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\u5bf9\u8c61\u5206\u914d\uff0c\u65b9\u6cd5\u91c7\u6837\u4e0e\u70ed\u70b9\u65b9\u6cd5\u5b9a\u4f4d\u4e0e\u8c03\u7528\u5806\u6808\uff0c\u5b89\u5168\u70b9\u5206\u6790\u4e0e\u9501\u5360\u7528\u65f6\u957f\u4e0e\u5806\u6808\u5206\u6790\uff0cGC \u76f8\u5173\u5206\u6790\u4ee5\u53ca JIT \u7f16\u8bd1\u5668\u76f8\u5173\u5206\u6790\uff08\u4f8b\u5982 CodeCache \uff09 \u5b8c\u5584\u7684 API \u5b9a\u4e49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u751f\u4ea7\u4e0e\u6d88\u8d39\u3002 JFR\u7684\u6838\u5fc3-\u4e8b\u4ef6Event \u5728JFR\u4e2d\uff0c\u4efb\u4f55JVM\u7684\u884c\u4e3a\u90fd\u662f\u4e00\u4e2aEvent\uff0c\u4f8b\u5982\u7c7b\u52a0\u8f7d\uff08Class Load Event\uff09\uff0cCPU\u8d1f\u8f7d\u53d8\u52a8\uff08CPULoad\uff09\uff0c\u5783\u573e\u56de\u6536\uff08GarbageCollection\uff09\u7b49\u3002\u8bb0\u5f55\u3001\u4e22\u5931Event\u90fd\u5c5e\u4e8e\u4e00\u4e2aEvent\u3002 Event\u6309\u7167\u91c7\u96c6\u65b9\u5f0f\u5206\u4e3a\u4e09\u79cd\uff1a Instant Event\uff1a\u987e\u540d\u601d\u4e49\uff0c\u8fd9\u79cd Event \u5728\u53d1\u751f\u65f6\u5c31\u7acb\u523b\u91c7\u96c6\u3002\u4f8b\u5982\uff1aThrow Exception Event \u8fd8\u6709 Thread Start Event\uff0c\u7c7b\u4f3c\u4e8e\u8fd9\u79cd\u5728\u67d0\u4e00\u65f6\u523b\u53d1\u751f\u7684 Event Duration Event\uff1a\u8fd9\u79cd Event \u9700\u8981\u8017\u8d39\u4e00\u4e9b\u65f6\u95f4\uff0c\u5728\u5b8c\u6210\u7684\u65f6\u5019\u4f1a\u8bb0\u5f55\u3002\u5bf9\u4e8e\u8fd9\u79cd\u7c7b\u578b\u7684 Event\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u65f6\u95f4\u9650\u5236\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4\u9650\u5236\u7684\u624d\u4f1a\u8bb0\u5f55\u3002\u4f8b\u5982 GC Event\uff0cThread Sleep Event\u3002 Sample Event\uff08\u6216\u8005\u662fRequestable Event\uff09\uff1a\u6309\u7167\u4e00\u5b9a\u7684\u9891\u7387\u91c7\u96c6\uff0c\u8fd9\u4e2a\u9891\u7387\u662f\u53ef\u4ee5\u914d\u7f6e\u7684\u3002\u4f8b\u5982 Thread Dump Event\uff0cMethod Sampling Event Event\u4f1a\u88ab\u5199\u5165\u5230.jfr\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\uff0c\u53ef\u901a\u8fc7\u53ef\u89c6\u5316\u5de5\u5177JMC\u53bb\u67e5\u770b\u3002 \u5982\u4f55\u5f00\u542fJFR \u5b98\u65b9\u6587\u6863\uff1a Running Java Flight Recorder \u53ef\u4ee5\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u5728 JVM \u8fdb\u7a0b\u542f\u52a8\u7684\u65f6\u5019\u5c31\u542f\u52a8 JFR\uff0c\u6216\u8005\u662f\u5229\u7528 jcmd \u5de5\u5177\uff0c\u52a8\u6001\u542f\u7528\u6216\u8005\u5173\u95ed JFR\u3002 JVM\u53c2\u6570\u542f\u52a8 \u542f\u52a8\u547d\u4ee4\uff1a java -XX:StartFlightRecording=disk=true,dumponexit=true,filename=recording.jfr,maxsize=1024m,maxage=1d,settings=profile,path-to-gc-roots=true test.Main \u5728 JDK 11 \u7248\u672c\u4e4b\u540e\uff0c\u542f\u52a8\u53c2\u6570\u88ab\u7b80\u5316\u4e86\u5f88\u591a\u5f88\u591a\uff1b\u76ee\u524dJFR\u6d89\u53ca\u7684\u53c2\u6570\u4ec5\u4ec5\u53ea\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u8d1f\u8d23\u542f\u52a8\uff08 -XX:StartFlightRecording \uff09\uff0c\u4e00\u4e2a\u8d1f\u8d23\u914d\u7f6e\uff08 -XX:FlightRecorderOptions \uff09\u3002JDK 8\u4e2d\u7684 -XX:+FlightRecorder \u6253\u5f00 FlightRecorder \u72b6\u6001\u3002\u6838\u5fc3\u5c31\u662f -XX:StartFlightRecording \uff0c\u6709\u4e86\u8fd9\u4e2a\u53c2\u6570\u5c31\u4f1a\u542f\u7528 JFR \u8bb0\u5f55\u3002 -XX:StartFlightRecording\u53c2\u6570\u8bf4\u660e \u53c2\u6570\u540d \u9ed8\u8ba4\u503c \u8bf4\u660e delay 0 \u5ef6\u8fdf\u591a\u4e45\u540e\u542f\u52a8 JFR \u8bb0\u5f55\uff0c\u652f\u6301\u5e26\u5355\u4f4d\u914d\u7f6e\uff0c \u4f8b\u5982 delay=60s\uff08\u79d2\uff09\uff0c delay=20m\uff08\u5206\u949f\uff09\uff0c delay=1h\uff08\u5c0f\u65f6\uff09\uff0c delay=1d\uff08\u5929\uff09\uff0c\u4e0d\u5e26\u5355\u4f4d\u5c31\u662f\u79d2\uff0c 0\u5c31\u662f\u6ca1\u6709\u5ef6\u8fdf\u76f4\u63a5\u5f00\u59cb\u8bb0\u5f55\u3002\u4e00\u822c\u4e3a\u4e86\u907f\u514d\u6846\u67b6\u521d\u59cb\u5316\u7b49\u5f71\u54cd\uff0c\u6211\u4eec\u4f1a\u5ef6\u8fdf 1 \u5206\u949f\u5f00\u59cb\u8bb0\u5f55\uff08\u4f8b\u5982Spring cloud\u5e94\u7528\uff0c\u53ef\u4ee5\u770b\u4e0b\u65e5\u5fd7\u4e2d\u5e94\u7528\u542f\u52a8\u8017\u65f6\uff0c\u6765\u51b3\u5b9a\u4e0b\u8fd9\u4e2a\u65f6\u95f4\uff09\u3002 disk true \u662f\u5426\u5199\u5165\u78c1\u76d8\uff0c\u8fd9\u4e2a\u5c31\u662f\u4e0a\u6587\u63d0\u5230\u7684\uff0c global buffer \u6ee1\u4e86\u4e4b\u540e\uff0c\u662f\u76f4\u63a5\u4e22\u5f03\u8fd8\u662f\u5199\u5165\u78c1\u76d8\u6587\u4ef6\u3002 dumponexit false \u7a0b\u5e8f\u9000\u51fa\u65f6\uff0c\u662f\u5426\u8981dump\u51fa .jfr\u6587\u4ef6 duration 0 JFR \u8bb0\u5f55\u6301\u7eed\u65f6\u95f4\uff0c\u540c\u6837\u652f\u6301\u5355\u4f4d\u914d\u7f6e\uff0c\u4e0d\u5e26\u5355\u4f4d\u5c31\u662f\u79d2\uff0c0\u4ee3\u8868\u4e0d\u9650\u5236\u6301\u7eed\u65f6\u95f4\uff0c\u4e00\u76f4\u8bb0\u5f55\u3002 filename - [\u542f\u52a8\u76ee\u5f55]/hotspot-pid-26732-id-1-2020_03_12_10_07_22.jfr\uff0cpid \u540e\u9762\u5c31\u662f pid\uff0c id \u540e\u9762\u662f\u7b2c\u51e0\u4e2a JFR \u8bb0\u5f55\uff0c\u53ef\u4ee5\u542f\u52a8\u591a\u4e2a JFR \u8bb0\u5f55\u3002\u6700\u540e\u5c31\u662f\u65f6\u95f4\u3002dump\u7684\u8f93\u51fa\u6587\u4ef6 name \u65e0 \u8bb0\u5f55\u540d\u79f0\uff0c\u7531\u4e8e\u53ef\u4ee5\u542f\u52a8\u591a\u4e2a JFR \u8bb0\u5f55\uff0c\u8fd9\u4e2a\u540d\u79f0\u7528\u4e8e\u533a\u5206\uff0c\u5426\u5219\u53ea\u80fd\u770b\u5230\u4e00\u4e2a\u8bb0\u5f55 id\uff0c\u4e0d\u597d\u533a\u5206\u3002 maxage 0 \u8fd9\u4e2a\u53c2\u6570\u53ea\u6709\u5728 disk \u4e3a true \u7684\u60c5\u51b5\u4e0b\u624d\u6709\u6548\u3002\u6700\u5927\u6587\u4ef6\u8bb0\u5f55\u4fdd\u5b58\u65f6\u95f4\uff0c\u5c31\u662f global buffer \u6ee1\u4e86\u9700\u8981\u5237\u5165\u672c\u5730\u4e34\u65f6\u76ee\u5f55\u4e0b\u4fdd\u5b58\uff0c\u8fd9\u4e9b\u6587\u4ef6\u6700\u591a\u4fdd\u7559\u591a\u4e45\u7684\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5355\u4f4d\u914d\u7f6e\uff0c\u6ca1\u6709\u5355\u4f4d\u5c31\u662f\u79d2\uff0c\u9ed8\u8ba4\u662f0\uff0c\u5c31\u662f\u4e0d\u9650\u5236 maxsize 250MB \u8fd9\u4e2a\u53c2\u6570\u53ea\u6709\u5728 disk \u4e3a true \u7684\u60c5\u51b5\u4e0b\u624d\u6709\u6548\u3002\u6700\u5927\u6587\u4ef6\u5927\u5c0f\uff0c\u652f\u6301\u5355\u4f4d\u914d\u7f6e\uff0c \u4e0d\u5e26\u5355\u4f4d\u662f\u5b57\u8282\uff0cm\u6216\u8005M\u4ee3\u8868MB\uff0cg\u6216\u8005G\u4ee3\u8868GB\u3002\u8bbe\u7f6e\u4e3a0\u4ee3\u8868\u4e0d\u9650\u5236\u5927\u5c0f \u3002\u867d\u7136\u5b98\u7f51\u8bf4\u9ed8\u8ba4\u5c31\u662f0\uff0c\u4f46\u662f\u5b9e\u9645\u7528\u7684\u65f6\u5019\uff0c\u4e0d\u8bbe\u7f6e\u4f1a\u6709\u63d0\u793a \uff1a No limit specified, using maxsize=250MB as default. \u6ce8\u610f\uff0c\u8fd9\u4e2a\u914d\u7f6e\u4e0d\u80fd\u5c0f\u4e8e\u540e\u9762\u5c06\u4f1a\u63d0\u5230\u7684 maxchunksize \u8fd9\u4e2a\u53c2\u6570\u3002 path-to-gc-roots false \u662f\u5426\u8bb0\u5f55GC\u6839\u8282\u70b9\u5230\u6d3b\u52a8\u5bf9\u8c61\u7684\u8def\u5f84\uff0c\u4e00\u822c\u4e0d\u6253\u5f00\u8fd9\u4e2a\uff0c\u9996\u5148\u8fd9\u4e2a\u5728\u6211\u4e2a\u4eba\u5b9a\u4f4d\u95ee\u9898\u7684\u65f6\u5019\uff0c\u5f88\u96be\u7528\u5230\uff0c\u53ea\u8981\u4f60\u7684\u7f16\u7a0b\u4e60\u60ef\u597d\u3002\u8fd8\u6709\u5c31\u662f\u6253\u5f00\u8fd9\u4e2a\uff0c\u6027\u80fd\u635f\u8017\u6bd4\u8f83\u5927\uff0c\u4f1a\u5bfc\u81f4FullGC\u4e00\u822c\u662f\u5728\u6000\u7591\u6709\u5185\u5b58\u6cc4\u6f0f\u7684\u65f6\u5019\u70ed\u542f\u52a8\u8fd9\u79cd\u91c7\u96c6\uff0c\u5e76\u4e14\u901a\u8fc7\u4ea7\u751f\u5bf9\u8c61\u5806\u6808\u65e0\u6cd5\u5b9a\u4f4d\u7684\u65f6\u5019\uff0c\u52a8\u6001\u6253\u5f00\u5373\u53ef\u3002\u4e00\u822c\u901a\u8fc7\u4ea7\u751f\u8fd9\u4e2a\u5bf9\u8c61\u7684\u5806\u6808\u5c31\u80fd\u5b9a\u4f4d\uff0c\u5982\u679c\u5b9a\u4f4d\u4e0d\u5230\uff0c\u6000\u7591\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u4f8b\u5982 ThreadLocal \u6ca1\u6709\u91ca\u653e\u8fd9\u6837\u7684\uff0c\u53ef\u4ee5\u5728 dump \u7684\u65f6\u5019\u91c7\u96c6 gc roots settings default \u91c7\u96c6 Event \u7684\u8be6\u7ec6\u914d\u7f6e\uff0c\u91c7\u96c6\u7684\u6bcf\u4e2a Event \u90fd\u6709\u81ea\u5df1\u7684\u8be6\u7ec6\u914d\u7f6e\u3002\u53e6\u4e00\u4e2a JDK \u81ea\u5e26\u7684\u914d\u7f6e\u662f profile.jfc\uff0c\u4f4d\u4e8e $JAVA_HOME/lib/jfr/profile.jfc \u3002 -XX:FlightRecorderOption\u53c2\u6570\u8bf4\u660e \u53c2\u6570\u540d \u9ed8\u8ba4\u503c \u8bf4\u660e allow_threadbuffers_to_disk false \u662f\u5426\u5141\u8bb8 \u5728 thread buffer \u7ebf\u7a0b\u963b\u585e\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u5c06 thread buffer \u7684\u5185\u5bb9\u5199\u5165\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e0d\u542f\u7528\uff0c\u4e00\u822c\u6ca1\u5fc5\u8981\u5f00\u542f\u8fd9\u4e2a\u53c2\u6570\uff0c\u53ea\u8981\u4f60\u8bbe\u7f6e\u7684\u53c2\u6570\u8ba9 global buffer \u5927\u5c0f\u5408\u7406\u4e0d\u81f3\u4e8e\u5237\u76d8\u5f88\u6162\uff0c\u5c31\u884c\u4e86\u3002 globalbuffersize \u5982\u679c\u4e0d\u8bbe\u7f6e\uff0c\u6839\u636e\u8bbe\u7f6e\u7684 memorysize \u81ea\u52a8\u8ba1\u7b97\u5f97\u51fa \u5355\u4e2a global buffer \u7684\u5927\u5c0f\uff0c\u4e00\u822c\u901a\u8fc7 memorysize \u8bbe\u7f6e\uff0c\u4e0d\u5efa\u8bae\u81ea\u5df1\u8bbe\u7f6e maxchunksize 12M \u5b58\u5165\u78c1\u76d8\u7684\u6bcf\u4e2a\u4e34\u65f6\u6587\u4ef6\u7684\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a12MB\uff0c\u4e0d\u80fd\u5c0f\u4e8e1M\u3002\u53ef\u4ee5\u7528\u5355\u4f4d\u914d\u7f6e\uff0c\u4e0d\u5e26\u5355\u4f4d\u662f\u5b57\u8282\uff0cm\u6216\u8005M\u4ee3\u8868MB\uff0cg\u6216\u8005G\u4ee3\u8868GB\u3002\u6ce8\u610f\u8fd9\u4e2a\u5927\u5c0f\u6700\u597d\u4e0d\u8981\u6bd4 memorySize \u5c0f\uff0c\u66f4\u4e0d\u80fd\u6bd4 globalbuffersize \u5c0f\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d memorysize 10M JFR\u7684 global buffer \u5360\u7528\u7684\u6574\u4f53\u5185\u5b58\u5927\u5c0f\uff0c\u4e00\u822c\u901a\u8fc7\u8bbe\u7f6e\u8fd9\u4e2a\u53c2\u6570\uff0cnumglobalbuffers \u8fd8\u6709 globalbuffersize \u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97\u51fa\u3002\u53ef\u4ee5\u7528\u5355\u4f4d\u914d\u7f6e\uff0c\u4e0d\u5e26\u5355\u4f4d\u662f\u5b57\u8282\uff0cm\u6216\u8005M\u4ee3\u8868MB\uff0cg\u6216\u8005G\u4ee3\u8868GB\u3002 numglobalbuffers \u5982\u679c\u4e0d\u8bbe\u7f6e\uff0c\u6839\u636e\u8bbe\u7f6e\u7684 memorysize \u81ea\u52a8\u8ba1\u7b97\u5f97\u51fa global buffer\u7684\u4e2a\u6570\uff0c\u4e00\u822c\u901a\u8fc7 memorysize \u8bbe\u7f6e\uff0c\u4e0d\u5efa\u8bae\u81ea\u5df1\u8bbe\u7f6e old-object-queue-size 256 \u5bf9\u4e8eProfiling\u4e2d\u7684 Old Object Sample \u4e8b\u4ef6\uff0c\u8bb0\u5f55\u591a\u5c11\u4e2a Old Object\uff0c\u8fd9\u4e2a\u914d\u7f6e\u5e76\u4e0d\u662f\u8d8a\u5927\u8d8a\u597d\u3002\u8bb0\u5f55\u662f\u600e\u4e48\u8bb0\u5f55\u7684\uff0c\u4f1a\u5728\u540e\u9762\u7684\u5404\u79cd Event \u4ecb\u7ecd\u91cc\u9762\u8be6\u7ec6\u4ecb\u7ecd\u3002\u6211\u7684\u5efa\u8bae\u662f\uff0c\u4e00\u822c\u5e94\u7528256\u5c31\u591f\uff0c\u65f6\u95f4\u8de8\u5ea6\u5927\u7684\uff0c\u4f8b\u5982 maxage \u4fdd\u5b58\u4e86\u4e00\u5468\u4ee5\u4e0a\u7684\uff0c\u53ef\u4ee5\u7ffb\u500d repository \u7b49\u540c\u4e8e -Djava.io.tmpdir \u6307\u5b9a\u7684\u76ee\u5f55 JFR \u4fdd\u5b58\u5230\u78c1\u76d8\u7684\u4e34\u65f6\u8bb0\u5f55\u7684\u4f4d\u7f6e retransform true \u662f\u5426\u901a\u8fc7 JVMTI \u8f6c\u6362 JFR \u76f8\u5173 Event \u7c7b\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a false\uff0c\u5219\u53ea\u5728 Event \u7c7b\u52a0\u8f7d\u7684\u65f6\u5019\u6dfb\u52a0\u76f8\u5e94\u7684 Java Instrumentation\uff0c\u8fd9\u4e2a\u4e00\u822c\u4e0d\u7528\u6539\uff0c\u8fd9\u70b9\u5185\u5b58 metaspace \u8fd8\u662f\u8db3\u591f\u7684 samplethreads true \u8fd9\u4e2a\u662f\u662f\u5426\u5f00\u542f\u7ebf\u7a0b\u91c7\u96c6\u7684\u72b6\u6001\u4f4d\u914d\u7f6e\uff0c\u53ea\u6709\u8fd9\u4e2a\u914d\u7f6e\u4e3a true\uff0c\u5e76\u4e14\u5728 Event \u914d\u7f6e\u4e2d\u5f00\u542f\u7ebf\u7a0b\u76f8\u5173\u7684\u91c7\u96c6\uff08\u8fd9\u4e2a\u540e\u9762\u4f1a\u63d0\u5230\uff09\uff0c\u624d\u4f1a\u91c7\u96c6\u8fd9\u4e9b\u4e8b\u4ef6\u3002 stackdepth 64 \u91c7\u96c6\u4e8b\u4ef6\u5806\u6808\u6df1\u5ea6\uff0c\u6709\u4e9b Event \u4f1a\u91c7\u96c6\u5806\u6808\uff0c\u8fd9\u4e2a\u5806\u6808\u91c7\u96c6\u7684\u6df1\u5ea6\uff0c\u7edf\u4e00\u7531\u8fd9\u4e2a\u914d\u7f6e\u6307\u5b9a\u3002\u6ce8\u610f\u8fd9\u4e2a\u503c\u4e0d\u80fd\u8bbe\u7f6e\u8fc7\u5927\uff0c\u5982\u679c\u4f60\u91c7\u96c6\u7684 Event\u79cd\u7c7b\u5f88\u591a\uff0c\u5806\u6808\u6df1\u5ea6\u5927\u5f88\u5f71\u54cd\u6027\u80fd\u3002\u6bd4\u5982\u4f60\u7528\u7684\u662f default.jfc \u914d\u7f6e\u7684\u91c7\u96c6\uff0c\u5806\u6808\u6df1\u5ea664\u57fa\u672c\u4e0a\u5c31\u662f\u4e0d\u5f71\u54cd\u6027\u80fd\u7684\u6781\u9650\u4e86\u3002\u4f60\u53ef\u4ee5\u81ea\u5b9a\u4e49\u91c7\u96c6\u67d0\u4e9b\u4e8b\u4ef6\uff0c\u589e\u52a0\u5806\u6808\u6df1\u5ea6\u3002 threadbuffersize 8KB threadBuffer \u5927\u5c0f\uff0c\u6700\u597d\u4e0d\u8981\u4fee\u6539\u8fd9\u4e2a\uff0c\u5982\u679c\u589e\u5927\uff0c\u90a3\u4e48\u968f\u7740\u4f60\u7684\u7ebf\u7a0b\u6570\u589e\u591a\uff0c\u5185\u5b58\u5360\u7528\u4f1a\u589e\u5927\u3002\u8fc7\u5c0f\u7684\u8bdd\uff0c\u5237\u5165 global buffer \u7684\u6b21\u6570\u5c31\u4f1a\u53d8\u591a\u30028KB \u5c31\u662f\u7ecf\u9a8c\u4e2d\u6700\u5408\u9002\u7684\u3002 JCMD\u542f\u52a8 \u81f3\u4e8eJCMD\u662f\u4ec0\u4e48\uff0c\u53ef\u4ee5\u770b\u4e0b JCMD 1\u3001 jcmd JFR.start \uff1a\u542f\u52a8 JFR \u8bb0\u5f55\uff0c\u53c2\u6570\u548c -XX:StartFlightRecording \u4e00\u6a21\u4e00\u6837\uff0c \u8bf7\u53c2\u8003\u4e0a\u9762\u7684\u8868\u683c \u3002\u4f46\u662f\u6ce8\u610f\u8fd9\u91cc\u4e0d\u518d\u662f\u9017\u53f7\u5206\u5272\uff0c\u800c\u662f\u7a7a\u683c \u793a\u4f8b\uff1a jcmd 21 JFR.start name=profile_online maxage=1d maxsize=1g \u8fd9\u4e2a\u5c31\u4ee3\u8868\u542f\u52a8\u4e00\u4e2a\u540d\u79f0\u4e3a profile_online, \u6700\u591a\u4fdd\u7559\u4e00\u5929\uff0c\u6700\u5927\u4fdd\u7559 1G \u7684\u672c\u5730\u6587\u4ef6\u8bb0\u5f55 2\u3001 jcmd JFR.stop . \u505c\u6b62 JFR \u8bb0\u5f55\uff0c\u9700\u8981\u4f20\u5165\u540d\u79f0\uff0c\u4f8b\u5982\u5982\u679c\u8981\u505c\u6b62\u4e0a\u9762\u6253\u5f00\u7684\uff0c\u5219\u6267\u884c\uff1a jcmd 21 JFR.stop name=profile_online copy_to_file=profile.jfr copy_to_file :\u505c\u6b62\u65f6\u540c\u65f6\u590d\u5236\u5230\u6587\u4ef6\uff0c\u6307\u5b9a\u6587\u4ef6\u8f93\u51fa\u4f4d\u7f6e 3\u3001jcmd JFR.check\uff0c\u67e5\u770b\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684 JFR \u8bb0\u5f55\u3002 \u793a\u4f8b\uff1a jcmd 21 JFR.check verbose=true \u8f93\u51fa\uff1a 21: Recording 1: name=profile_online maxsize=1.0GB maxage=1d (running) verbose\uff1a\u662f\u5426\u67e5\u770b\u6bcf\u79cdEvent\u91c7\u96c6\u8be6\u7ec6\u914d\u7f6e 4\u3001 jcmd JFR.configure \uff0c\u5982\u679c\u4e0d\u4f20\u5165\u53c2\u6570\uff0c\u5219\u662f\u67e5\u770b\u5f53\u524d\u914d\u7f6e\uff0c\u4f20\u5165\u53c2\u6570\u5c31\u662f\u4fee\u6539\u914d\u7f6e\u3002\u914d\u7f6e\u4e0e-XX:FlightRecorderOptions\u7684\u4e00\u6a21\u4e00\u6837\u3002 \u8bf7\u53c2\u8003\u4e0a\u9762\u7684\u8868\u683c \u793a\u4f8b\uff1a ./jcmd 21 JFR.configure \u8f93\u51fa\uff1a Repository path: /tmp/2020_03_18_08_41_44_21 Stack depth: 64 Global buffer count: 20 Global buffer size: 512.0 kB Thread buffer size: 8.0 kB Memory size: 10.0 MB Max chunk size: 12.0 MB Sample threads: true \u793a\u4f8b\uff1a ./jcmd 21 JFR.configure stackdepth=65 \u8f93\u51fa\uff1a 21: Stack depth: 65 5\u3001 jcmd <pid> JFR.dump :dump\u6027\u80fd\u65e5\u5fd7 \u53c2\u6570 \u9ed8\u8ba4\u503c \u63cf\u8ff0 name \u65e0 \u6307\u5b9a\u8981\u67e5\u770b\u7684 JFR \u8bb0\u5f55\u540d\u79f0 filename \u65e0 \u6307\u5b9a\u6587\u4ef6\u8f93\u51fa\u4f4d\u7f6e maxage 0 dump\u6700\u591a\u7684\u65f6\u95f4\u8303\u56f4\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5355\u4f4d\u914d\u7f6e\uff0c\u6ca1\u6709\u5355\u4f4d\u5c31\u662f\u79d2\uff0c\u9ed8\u8ba4\u662f0\uff0c\u5c31\u662f\u4e0d\u9650\u5236 maxsize 0 dump\u6700\u5927\u6587\u4ef6\u5927\u5c0f\uff0c\u652f\u6301\u5355\u4f4d\u914d\u7f6e\uff0c \u4e0d\u5e26\u5355\u4f4d\u662f\u5b57\u8282\uff0cm\u6216\u8005M\u4ee3\u8868MB\uff0cg\u6216\u8005G\u4ee3\u8868GB\u3002\u8bbe\u7f6e\u4e3a0\u4ee3\u8868\u4e0d\u9650\u5236\u5927\u5c0f begin \u65e0 dump\u5f00\u59cb\u4f4d\u7f6e\uff0c \u53ef\u4ee5\u8fd9\u4e48\u914d\u7f6e\uff1a09:00, 21:35:00, 2018-06-03T18:12:56.827Z, 2018-06-03T20:13:46.832, -10m, -3h, or -1d end : \u65e0 dump\u7ed3\u675f\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u8fd9\u4e48\u914d\u7f6e\uff1a 09:00, 21:35:00, 2018-06-03T18:12:56.827Z, 2018-06-03T20:13:46.832, -10m, -3h, or -1d (STRING, no default value) path-to-gc-roots false \u662f\u5426\u8bb0\u5f55GC\u6839\u8282\u70b9\u5230\u6d3b\u52a8\u5bf9\u8c61\u7684\u8def\u5f84\uff0c\u4e00\u822c\u4e0d\u8bb0\u5f55\uff0cdump \u7684\u65f6\u5019\u6253\u5f00\u8fd9\u4e2a\u80af\u5b9a\u4f1a\u89e6\u53d1\u4e00\u6b21 fullGC\uff0c\u5bf9\u7ebf\u4e0a\u5e94\u7528\u6709\u5f71\u54cd\u3002\u6700\u597d\u53c2\u8003\u4e4b\u524d\u5bf9\u4e8e JFR \u542f\u52a8\u8bb0\u5f55\u53c2\u6570\u7684\u8fd9\u4e2a\u53c2\u6570\u7684\u63cf\u8ff0\uff0c\u8003\u8651\u662f\u5426\u6709\u5fc5\u8981 JMC \u4ec0\u4e48\u662fJMC JMC\uff08JAVA MISSION CONTROL\uff09\u662f\u548cJFR\u7ed3\u5408\u4f7f\u7528\u7684\uff0c\u7531\u4e8eJFR\u751f\u6210\u7684\u62a5\u544a\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u6240\u4ee5\u9700\u8981\u6709\u4e00\u4e2a\u53ef\u89c6\u5316\u754c\u9762\u53bb\u5206\u6790\uff0c\u90a3\u4e48JMC\u5c31\u662f\u8fd9\u4e2a\u53ef\u89c6\u5316\u5de5\u5177\u3002\u53ef\u4ee5\u67e5\u770b\u5e94\u7528\uff08\u7ebf\u7a0b\u3001\u5185\u5b58\u3001IO\u3001\u5f02\u5e38\u7b49\uff09\u3001JVM\uff08GC\u3001GC\u914d\u7f6e\u3001\u7c7b\u52a0\u8f7d\u7b49\uff09\u3001\u73af\u5883\uff08\u73af\u5883\u53d8\u91cf\u3001\u7cfb\u7edf\u53d8\u91cf\u7b49\uff09\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u53ef\u4ee5\u901a\u8fc7\u8fde\u63a5JVM\u6216\u8005\u8bfb\u53d6jfr\u6587\u4ef6\u8bfb\u53d6\u76f8\u5e94\u4fe1\u606f \u5177\u4f53\u4f7f\u7528\u4e0d\u518d\u505a\u8be6\u7ec6\u8d58\u8ff0\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u4e0b\u8fd9\u7bc7\u535a\u5ba2: JMC\u4f7f\u7528\u8bf4\u660e JCMD \u53d1\u9001\u8bca\u65ad\u547d\u4ee4\u8bf7\u6c42\u5230\u6b63\u5728\u8fd0\u884c\u7684Java\u865a\u62df\u673a\uff08JVM\uff09\u3002\u5b83\u5fc5\u987b\u548cJVM\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u5e76\u4e14\u4e0e\u542f\u52a8JVM\u7528\u6237\u5177\u6709\u76f8\u540c\u7684\u7ec4\u6743\u9650\u3002 \u53ef\u901a\u8fc7jcmd help \u67e5\u770b\u547d\u4ee4\uff0c\u4e0b\u9762\u5217\u4e86\u4e00\u4e9b\u5e38\u7528 \u5e38\u7528\u547d\u4ee4 \u547d\u4ee4 \u63cf\u8ff0 jcmd PID VM.uptime \u67e5\u770b JVM \u7684\u542f\u52a8\u65f6\u957f jcmd PID GC.class_histogram \u67e5\u770b JVM \u7684\u7c7b\u4fe1\u606f\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u67e5\u770b\u6bcf\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u6570\u91cf\u548c\u5360\u7528\u7a7a\u95f4\u5927\u5c0f\u3002 jcmd PID Thread.print \u67e5\u770b JVM \u7684Thread Dump jcmd PID GC.heap_dump FILE_NAME \u67e5\u770b JVM \u7684Heap Dump,\u6ce8\u610f\uff0c\u5982\u679c\u53ea\u6307\u5b9a\u6587\u4ef6\u540d\uff0c\u9ed8\u8ba4\u4f1a\u751f\u6210\u5728\u542f\u52a8 JVM \u7684\u76ee\u5f55\u91cc\u3002 jcmd PID VM.system_properties \u67e5\u770b JVM \u7684\u5c5e\u6027\u4fe1\u606f jcmd PID VM.flags \u67e5\u770b JVM \u7684\u542f\u52a8\u53c2\u6570,\u6ce8\u610f\uff0c\u53ef\u4ee5\u770b\u5230 -X \u548c -XX \u7684\u53c2\u6570\u4fe1\u606f jcmd PID VM.command_line \u67e5\u770b JVM \u7684\u542f\u52a8\u547d\u4ee4\u884c jcmd PID GC.run_finalization \u5bf9 JVM \u6267\u884c java.lang.System.runFinalization(),\u5c3d\u91cfb\u522b\u53bb\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684finalize\u65b9\u6cd5\u3002 jcmd PID GC.run \u5bf9 JVM \u6267\u884c java.lang.System.gc()\uff0c\u544a\u8bc9\u5783\u573e\u6536\u96c6\u5668\u6253\u7b97\u8fdb\u884c\u5783\u573e\u6536\u96c6\uff0c\u800c\u5783\u573e\u6536\u96c6\u5668\u8fdb\u4e0d\u8fdb\u884c\u6536\u96c6\u662f\u4e0d\u786e\u5b9a\u7684 jcmd PID PerfCounter.print \u67e5\u770b JVM \u7684\u6027\u80fd","title":"JRF&JMC&JCMD"},{"location":"JVM/JFR%26JMC%26JCMD/#jrfjmcjcmd","text":"","title":"JRF&amp;JMC&amp;JCMD"},{"location":"JVM/JFR%26JMC%26JCMD/#jfr","text":"","title":"JFR"},{"location":"JVM/JFR%26JMC%26JCMD/#jfr_1","text":"JFR \u662f Java Flight Record \uff08Java\u98de\u884c\u8bb0\u5f55\uff09 \u7684\u7f29\u5199\uff0c\u662f JVM \u5185\u7f6e\u7684\u57fa\u4e8e\u4e8b\u4ef6\u7684JDK\u76d1\u63a7\u8bb0\u5f55\u6846\u67b6\u3002\u8fd9\u4e2a\u8d77\u540d\u5c31\u662f\u53c2\u8003\u4e86\u9ed1\u5323\u5b50\u5bf9\u4e8e\u98de\u673a\u7684\u4f5c\u7528\uff0c\u5c06Java\u8fdb\u7a0b\u6bd4\u55bb\u6210\u98de\u673a\u98de\u884c\u3002\u987e\u540d\u601d\u4e49\uff0c\u8fd9\u662f\u4e00\u4e2a\u6536\u96c6\u8fd0\u884c\u7684JAVA\u5e94\u7528\u7684 \u8bca\u65ad\u4fe1\u606f \u548c \u5206\u6790\u6570\u636e \u3002 JDK11 \u5f00\u59cb\u96c6\u6210\u8fdbJVM\uff0c\u51e0\u4e4e\u4e0d\u4f1a\u9020\u6210\u6027\u80fd\u5f00\u9500\uff0c\u56e0\u6b64\u5373\u4f7f\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002 \u5982\u679c\u662f\u5229\u7528\u9ed8\u8ba4\u914d\u7f6e\u542f\u52a8\u8fd9\u4e2a\u8bb0\u5f55\uff0c\u6027\u80fd\u975e\u5e38\u9ad8\u6548\uff0c\u5bf9\u4e8e\u4e1a\u52a1\u5f71\u54cd\u5f88\u5c0f\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6846\u67b6\u672c\u6765\u5c31\u662f\u7528\u6765\u957f\u671f\u5728\u7ebf\u4e0a\u90e8\u7f72\u7684\u6846\u67b6\u3002\u8fd9\u4e2a\u8bb0\u5f55\u53ef\u4ee5\u8f93\u51fa\u6210\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u7528\u6237\u53ef\u4ee5\u6307\u5b9a\u6700\u5927\u8bb0\u5f55\u65f6\u95f4\uff0c\u6216\u8005\u6700\u5927\u8bb0\u5f55\u5927\u5c0f\uff0c\u4f9b\u7528\u6237\u5728\u9700\u8981\u7684\u65f6\u5019\u8f93\u51fa\u6210\u6587\u4ef6\u8fdb\u884c\u4e8b\u540e\u5206\u6790\u3002","title":"\u4ec0\u4e48\u662fJFR"},{"location":"JVM/JFR%26JMC%26JCMD/#jfr_2","text":"\u6709\u4e9b\u95ee\u9898\u5f00\u53d1\u6d4b\u8bd5\u9636\u6bb5\u5f88\u96be\u53d1\u73b0\uff0c\u9700\u8981\u5728\u751f\u4ea7\u73af\u5883\u624d\u4f1a\u51fa\u73b0\u3002JFR\u4f7f\u7528\u5728\u751f\u4ea7\u73af\u5883\uff0c\u53ef\u4ee5\u66f4\u597d\u7684\u5b9a\u4f4d\u95ee\u9898\u3002\u5b98\u65b9\u8bf4\uff0c\u76ee\u6807\u662f\u5f00\u542f JFR \u76d1\u63a7\uff08\u9ed8\u8ba4\u914d\u7f6e\uff09\uff0c\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u57281%\u4e4b\u5185\uff0c\u5bf9JVM Runtime \u548c GC\uff0cOS \u4ee5\u53ca Java \u5e93\u8fdb\u884c\u5168\u65b9\u4f4d\u7684\u76d1\u63a7\u3002 \u6ce8\u610f \uff1a\u751f\u4ea7\u73af\u5883\u914d\u7f6e\u4e0d\u5efa\u8bae\u957f\u671f\u4f7f\u7528profile\uff0c\u5426\u5219\u4f1a\u589e\u52a0\u5f88\u5927\u7684\u6027\u80fd\u5f00\u9500\u3002settings\u7684\u8be6\u7ec6\u914d\u7f6e\u5728 $JAVA_HOME/lib/jfr/ \uff0cdefault.jfr\u548cprofile.jfr\u3002","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528JFR"},{"location":"JVM/JFR%26JMC%26JCMD/#_1","text":"\u4f4e\u5f00\u9500\uff08\u5728\u914d\u7f6e\u6b63\u786e\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u53ef\u5728\u751f\u4ea7\u73af\u5883\u6838\u5fc3\u4e1a\u52a1\u8fdb\u7a0b\u4e2d\u59cb\u7ec8\u5728\u7ebf\u8fd0\u884c\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u968f\u65f6\u5f00\u542f\u4e0e\u5173\u95ed\u3002 \u53ef\u4ee5\u67e5\u770b\u51fa\u95ee\u9898\u65f6\u95f4\u6bb5\u5185\u8fdb\u884c\u5206\u6790\uff0c\u53ef\u4ee5\u5206\u6790 Java \u5e94\u7528\u7a0b\u5e8f\uff0cJVM \u5185\u90e8\u4ee5\u53ca\u5f53\u524dJava\u8fdb\u7a0b\u8fd0\u884c\u73af\u5883\u7b49\u591a\u56e0\u7d20\u3002 JFR\u57fa\u4e8e\u4e8b\u4ef6\u91c7\u96c6\uff0c\u53ef\u4ee5\u5206\u6790\u975e\u5e38\u5e95\u5c42\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\u5bf9\u8c61\u5206\u914d\uff0c\u65b9\u6cd5\u91c7\u6837\u4e0e\u70ed\u70b9\u65b9\u6cd5\u5b9a\u4f4d\u4e0e\u8c03\u7528\u5806\u6808\uff0c\u5b89\u5168\u70b9\u5206\u6790\u4e0e\u9501\u5360\u7528\u65f6\u957f\u4e0e\u5806\u6808\u5206\u6790\uff0cGC \u76f8\u5173\u5206\u6790\u4ee5\u53ca JIT \u7f16\u8bd1\u5668\u76f8\u5173\u5206\u6790\uff08\u4f8b\u5982 CodeCache \uff09 \u5b8c\u5584\u7684 API \u5b9a\u4e49\uff0c\u7528\u6237\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u751f\u4ea7\u4e0e\u6d88\u8d39\u3002","title":"\u6709\u54ea\u4e9b\u5173\u952e\u7279\u6027"},{"location":"JVM/JFR%26JMC%26JCMD/#jfr-event","text":"\u5728JFR\u4e2d\uff0c\u4efb\u4f55JVM\u7684\u884c\u4e3a\u90fd\u662f\u4e00\u4e2aEvent\uff0c\u4f8b\u5982\u7c7b\u52a0\u8f7d\uff08Class Load Event\uff09\uff0cCPU\u8d1f\u8f7d\u53d8\u52a8\uff08CPULoad\uff09\uff0c\u5783\u573e\u56de\u6536\uff08GarbageCollection\uff09\u7b49\u3002\u8bb0\u5f55\u3001\u4e22\u5931Event\u90fd\u5c5e\u4e8e\u4e00\u4e2aEvent\u3002","title":"JFR\u7684\u6838\u5fc3-\u4e8b\u4ef6Event"},{"location":"JVM/JFR%26JMC%26JCMD/#event","text":"Instant Event\uff1a\u987e\u540d\u601d\u4e49\uff0c\u8fd9\u79cd Event \u5728\u53d1\u751f\u65f6\u5c31\u7acb\u523b\u91c7\u96c6\u3002\u4f8b\u5982\uff1aThrow Exception Event \u8fd8\u6709 Thread Start Event\uff0c\u7c7b\u4f3c\u4e8e\u8fd9\u79cd\u5728\u67d0\u4e00\u65f6\u523b\u53d1\u751f\u7684 Event Duration Event\uff1a\u8fd9\u79cd Event \u9700\u8981\u8017\u8d39\u4e00\u4e9b\u65f6\u95f4\uff0c\u5728\u5b8c\u6210\u7684\u65f6\u5019\u4f1a\u8bb0\u5f55\u3002\u5bf9\u4e8e\u8fd9\u79cd\u7c7b\u578b\u7684 Event\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u65f6\u95f4\u9650\u5236\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4\u9650\u5236\u7684\u624d\u4f1a\u8bb0\u5f55\u3002\u4f8b\u5982 GC Event\uff0cThread Sleep Event\u3002 Sample Event\uff08\u6216\u8005\u662fRequestable Event\uff09\uff1a\u6309\u7167\u4e00\u5b9a\u7684\u9891\u7387\u91c7\u96c6\uff0c\u8fd9\u4e2a\u9891\u7387\u662f\u53ef\u4ee5\u914d\u7f6e\u7684\u3002\u4f8b\u5982 Thread Dump Event\uff0cMethod Sampling Event Event\u4f1a\u88ab\u5199\u5165\u5230.jfr\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\uff0c\u53ef\u901a\u8fc7\u53ef\u89c6\u5316\u5de5\u5177JMC\u53bb\u67e5\u770b\u3002","title":"Event\u6309\u7167\u91c7\u96c6\u65b9\u5f0f\u5206\u4e3a\u4e09\u79cd\uff1a"},{"location":"JVM/JFR%26JMC%26JCMD/#jfr_3","text":"\u5b98\u65b9\u6587\u6863\uff1a Running Java Flight Recorder \u53ef\u4ee5\u901a\u8fc7\u542f\u52a8\u53c2\u6570\u5728 JVM \u8fdb\u7a0b\u542f\u52a8\u7684\u65f6\u5019\u5c31\u542f\u52a8 JFR\uff0c\u6216\u8005\u662f\u5229\u7528 jcmd \u5de5\u5177\uff0c\u52a8\u6001\u542f\u7528\u6216\u8005\u5173\u95ed JFR\u3002","title":"\u5982\u4f55\u5f00\u542fJFR"},{"location":"JVM/JFR%26JMC%26JCMD/#jvm","text":"\u542f\u52a8\u547d\u4ee4\uff1a java -XX:StartFlightRecording=disk=true,dumponexit=true,filename=recording.jfr,maxsize=1024m,maxage=1d,settings=profile,path-to-gc-roots=true test.Main \u5728 JDK 11 \u7248\u672c\u4e4b\u540e\uff0c\u542f\u52a8\u53c2\u6570\u88ab\u7b80\u5316\u4e86\u5f88\u591a\u5f88\u591a\uff1b\u76ee\u524dJFR\u6d89\u53ca\u7684\u53c2\u6570\u4ec5\u4ec5\u53ea\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u8d1f\u8d23\u542f\u52a8\uff08 -XX:StartFlightRecording \uff09\uff0c\u4e00\u4e2a\u8d1f\u8d23\u914d\u7f6e\uff08 -XX:FlightRecorderOptions \uff09\u3002JDK 8\u4e2d\u7684 -XX:+FlightRecorder \u6253\u5f00 FlightRecorder \u72b6\u6001\u3002\u6838\u5fc3\u5c31\u662f -XX:StartFlightRecording \uff0c\u6709\u4e86\u8fd9\u4e2a\u53c2\u6570\u5c31\u4f1a\u542f\u7528 JFR \u8bb0\u5f55\u3002","title":"JVM\u53c2\u6570\u542f\u52a8"},{"location":"JVM/JFR%26JMC%26JCMD/#-xxstartflightrecording","text":"\u53c2\u6570\u540d \u9ed8\u8ba4\u503c \u8bf4\u660e delay 0 \u5ef6\u8fdf\u591a\u4e45\u540e\u542f\u52a8 JFR \u8bb0\u5f55\uff0c\u652f\u6301\u5e26\u5355\u4f4d\u914d\u7f6e\uff0c \u4f8b\u5982 delay=60s\uff08\u79d2\uff09\uff0c delay=20m\uff08\u5206\u949f\uff09\uff0c delay=1h\uff08\u5c0f\u65f6\uff09\uff0c delay=1d\uff08\u5929\uff09\uff0c\u4e0d\u5e26\u5355\u4f4d\u5c31\u662f\u79d2\uff0c 0\u5c31\u662f\u6ca1\u6709\u5ef6\u8fdf\u76f4\u63a5\u5f00\u59cb\u8bb0\u5f55\u3002\u4e00\u822c\u4e3a\u4e86\u907f\u514d\u6846\u67b6\u521d\u59cb\u5316\u7b49\u5f71\u54cd\uff0c\u6211\u4eec\u4f1a\u5ef6\u8fdf 1 \u5206\u949f\u5f00\u59cb\u8bb0\u5f55\uff08\u4f8b\u5982Spring cloud\u5e94\u7528\uff0c\u53ef\u4ee5\u770b\u4e0b\u65e5\u5fd7\u4e2d\u5e94\u7528\u542f\u52a8\u8017\u65f6\uff0c\u6765\u51b3\u5b9a\u4e0b\u8fd9\u4e2a\u65f6\u95f4\uff09\u3002 disk true \u662f\u5426\u5199\u5165\u78c1\u76d8\uff0c\u8fd9\u4e2a\u5c31\u662f\u4e0a\u6587\u63d0\u5230\u7684\uff0c global buffer \u6ee1\u4e86\u4e4b\u540e\uff0c\u662f\u76f4\u63a5\u4e22\u5f03\u8fd8\u662f\u5199\u5165\u78c1\u76d8\u6587\u4ef6\u3002 dumponexit false \u7a0b\u5e8f\u9000\u51fa\u65f6\uff0c\u662f\u5426\u8981dump\u51fa .jfr\u6587\u4ef6 duration 0 JFR \u8bb0\u5f55\u6301\u7eed\u65f6\u95f4\uff0c\u540c\u6837\u652f\u6301\u5355\u4f4d\u914d\u7f6e\uff0c\u4e0d\u5e26\u5355\u4f4d\u5c31\u662f\u79d2\uff0c0\u4ee3\u8868\u4e0d\u9650\u5236\u6301\u7eed\u65f6\u95f4\uff0c\u4e00\u76f4\u8bb0\u5f55\u3002 filename - [\u542f\u52a8\u76ee\u5f55]/hotspot-pid-26732-id-1-2020_03_12_10_07_22.jfr\uff0cpid \u540e\u9762\u5c31\u662f pid\uff0c id \u540e\u9762\u662f\u7b2c\u51e0\u4e2a JFR \u8bb0\u5f55\uff0c\u53ef\u4ee5\u542f\u52a8\u591a\u4e2a JFR \u8bb0\u5f55\u3002\u6700\u540e\u5c31\u662f\u65f6\u95f4\u3002dump\u7684\u8f93\u51fa\u6587\u4ef6 name \u65e0 \u8bb0\u5f55\u540d\u79f0\uff0c\u7531\u4e8e\u53ef\u4ee5\u542f\u52a8\u591a\u4e2a JFR \u8bb0\u5f55\uff0c\u8fd9\u4e2a\u540d\u79f0\u7528\u4e8e\u533a\u5206\uff0c\u5426\u5219\u53ea\u80fd\u770b\u5230\u4e00\u4e2a\u8bb0\u5f55 id\uff0c\u4e0d\u597d\u533a\u5206\u3002 maxage 0 \u8fd9\u4e2a\u53c2\u6570\u53ea\u6709\u5728 disk \u4e3a true \u7684\u60c5\u51b5\u4e0b\u624d\u6709\u6548\u3002\u6700\u5927\u6587\u4ef6\u8bb0\u5f55\u4fdd\u5b58\u65f6\u95f4\uff0c\u5c31\u662f global buffer \u6ee1\u4e86\u9700\u8981\u5237\u5165\u672c\u5730\u4e34\u65f6\u76ee\u5f55\u4e0b\u4fdd\u5b58\uff0c\u8fd9\u4e9b\u6587\u4ef6\u6700\u591a\u4fdd\u7559\u591a\u4e45\u7684\u3002\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5355\u4f4d\u914d\u7f6e\uff0c\u6ca1\u6709\u5355\u4f4d\u5c31\u662f\u79d2\uff0c\u9ed8\u8ba4\u662f0\uff0c\u5c31\u662f\u4e0d\u9650\u5236 maxsize 250MB \u8fd9\u4e2a\u53c2\u6570\u53ea\u6709\u5728 disk \u4e3a true \u7684\u60c5\u51b5\u4e0b\u624d\u6709\u6548\u3002\u6700\u5927\u6587\u4ef6\u5927\u5c0f\uff0c\u652f\u6301\u5355\u4f4d\u914d\u7f6e\uff0c \u4e0d\u5e26\u5355\u4f4d\u662f\u5b57\u8282\uff0cm\u6216\u8005M\u4ee3\u8868MB\uff0cg\u6216\u8005G\u4ee3\u8868GB\u3002\u8bbe\u7f6e\u4e3a0\u4ee3\u8868\u4e0d\u9650\u5236\u5927\u5c0f \u3002\u867d\u7136\u5b98\u7f51\u8bf4\u9ed8\u8ba4\u5c31\u662f0\uff0c\u4f46\u662f\u5b9e\u9645\u7528\u7684\u65f6\u5019\uff0c\u4e0d\u8bbe\u7f6e\u4f1a\u6709\u63d0\u793a \uff1a No limit specified, using maxsize=250MB as default. \u6ce8\u610f\uff0c\u8fd9\u4e2a\u914d\u7f6e\u4e0d\u80fd\u5c0f\u4e8e\u540e\u9762\u5c06\u4f1a\u63d0\u5230\u7684 maxchunksize \u8fd9\u4e2a\u53c2\u6570\u3002 path-to-gc-roots false \u662f\u5426\u8bb0\u5f55GC\u6839\u8282\u70b9\u5230\u6d3b\u52a8\u5bf9\u8c61\u7684\u8def\u5f84\uff0c\u4e00\u822c\u4e0d\u6253\u5f00\u8fd9\u4e2a\uff0c\u9996\u5148\u8fd9\u4e2a\u5728\u6211\u4e2a\u4eba\u5b9a\u4f4d\u95ee\u9898\u7684\u65f6\u5019\uff0c\u5f88\u96be\u7528\u5230\uff0c\u53ea\u8981\u4f60\u7684\u7f16\u7a0b\u4e60\u60ef\u597d\u3002\u8fd8\u6709\u5c31\u662f\u6253\u5f00\u8fd9\u4e2a\uff0c\u6027\u80fd\u635f\u8017\u6bd4\u8f83\u5927\uff0c\u4f1a\u5bfc\u81f4FullGC\u4e00\u822c\u662f\u5728\u6000\u7591\u6709\u5185\u5b58\u6cc4\u6f0f\u7684\u65f6\u5019\u70ed\u542f\u52a8\u8fd9\u79cd\u91c7\u96c6\uff0c\u5e76\u4e14\u901a\u8fc7\u4ea7\u751f\u5bf9\u8c61\u5806\u6808\u65e0\u6cd5\u5b9a\u4f4d\u7684\u65f6\u5019\uff0c\u52a8\u6001\u6253\u5f00\u5373\u53ef\u3002\u4e00\u822c\u901a\u8fc7\u4ea7\u751f\u8fd9\u4e2a\u5bf9\u8c61\u7684\u5806\u6808\u5c31\u80fd\u5b9a\u4f4d\uff0c\u5982\u679c\u5b9a\u4f4d\u4e0d\u5230\uff0c\u6000\u7591\u6709\u5176\u4ed6\u5f15\u7528\uff0c\u4f8b\u5982 ThreadLocal \u6ca1\u6709\u91ca\u653e\u8fd9\u6837\u7684\uff0c\u53ef\u4ee5\u5728 dump \u7684\u65f6\u5019\u91c7\u96c6 gc roots settings default \u91c7\u96c6 Event \u7684\u8be6\u7ec6\u914d\u7f6e\uff0c\u91c7\u96c6\u7684\u6bcf\u4e2a Event \u90fd\u6709\u81ea\u5df1\u7684\u8be6\u7ec6\u914d\u7f6e\u3002\u53e6\u4e00\u4e2a JDK \u81ea\u5e26\u7684\u914d\u7f6e\u662f profile.jfc\uff0c\u4f4d\u4e8e $JAVA_HOME/lib/jfr/profile.jfc \u3002","title":"-XX:StartFlightRecording\u53c2\u6570\u8bf4\u660e"},{"location":"JVM/JFR%26JMC%26JCMD/#-xxflightrecorderoption","text":"\u53c2\u6570\u540d \u9ed8\u8ba4\u503c \u8bf4\u660e allow_threadbuffers_to_disk false \u662f\u5426\u5141\u8bb8 \u5728 thread buffer \u7ebf\u7a0b\u963b\u585e\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u5c06 thread buffer \u7684\u5185\u5bb9\u5199\u5165\u6587\u4ef6\u3002\u9ed8\u8ba4\u4e0d\u542f\u7528\uff0c\u4e00\u822c\u6ca1\u5fc5\u8981\u5f00\u542f\u8fd9\u4e2a\u53c2\u6570\uff0c\u53ea\u8981\u4f60\u8bbe\u7f6e\u7684\u53c2\u6570\u8ba9 global buffer \u5927\u5c0f\u5408\u7406\u4e0d\u81f3\u4e8e\u5237\u76d8\u5f88\u6162\uff0c\u5c31\u884c\u4e86\u3002 globalbuffersize \u5982\u679c\u4e0d\u8bbe\u7f6e\uff0c\u6839\u636e\u8bbe\u7f6e\u7684 memorysize \u81ea\u52a8\u8ba1\u7b97\u5f97\u51fa \u5355\u4e2a global buffer \u7684\u5927\u5c0f\uff0c\u4e00\u822c\u901a\u8fc7 memorysize \u8bbe\u7f6e\uff0c\u4e0d\u5efa\u8bae\u81ea\u5df1\u8bbe\u7f6e maxchunksize 12M \u5b58\u5165\u78c1\u76d8\u7684\u6bcf\u4e2a\u4e34\u65f6\u6587\u4ef6\u7684\u5927\u5c0f\u3002\u9ed8\u8ba4\u4e3a12MB\uff0c\u4e0d\u80fd\u5c0f\u4e8e1M\u3002\u53ef\u4ee5\u7528\u5355\u4f4d\u914d\u7f6e\uff0c\u4e0d\u5e26\u5355\u4f4d\u662f\u5b57\u8282\uff0cm\u6216\u8005M\u4ee3\u8868MB\uff0cg\u6216\u8005G\u4ee3\u8868GB\u3002\u6ce8\u610f\u8fd9\u4e2a\u5927\u5c0f\u6700\u597d\u4e0d\u8981\u6bd4 memorySize \u5c0f\uff0c\u66f4\u4e0d\u80fd\u6bd4 globalbuffersize \u5c0f\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d memorysize 10M JFR\u7684 global buffer \u5360\u7528\u7684\u6574\u4f53\u5185\u5b58\u5927\u5c0f\uff0c\u4e00\u822c\u901a\u8fc7\u8bbe\u7f6e\u8fd9\u4e2a\u53c2\u6570\uff0cnumglobalbuffers \u8fd8\u6709 globalbuffersize \u4f1a\u88ab\u81ea\u52a8\u8ba1\u7b97\u51fa\u3002\u53ef\u4ee5\u7528\u5355\u4f4d\u914d\u7f6e\uff0c\u4e0d\u5e26\u5355\u4f4d\u662f\u5b57\u8282\uff0cm\u6216\u8005M\u4ee3\u8868MB\uff0cg\u6216\u8005G\u4ee3\u8868GB\u3002 numglobalbuffers \u5982\u679c\u4e0d\u8bbe\u7f6e\uff0c\u6839\u636e\u8bbe\u7f6e\u7684 memorysize \u81ea\u52a8\u8ba1\u7b97\u5f97\u51fa global buffer\u7684\u4e2a\u6570\uff0c\u4e00\u822c\u901a\u8fc7 memorysize \u8bbe\u7f6e\uff0c\u4e0d\u5efa\u8bae\u81ea\u5df1\u8bbe\u7f6e old-object-queue-size 256 \u5bf9\u4e8eProfiling\u4e2d\u7684 Old Object Sample \u4e8b\u4ef6\uff0c\u8bb0\u5f55\u591a\u5c11\u4e2a Old Object\uff0c\u8fd9\u4e2a\u914d\u7f6e\u5e76\u4e0d\u662f\u8d8a\u5927\u8d8a\u597d\u3002\u8bb0\u5f55\u662f\u600e\u4e48\u8bb0\u5f55\u7684\uff0c\u4f1a\u5728\u540e\u9762\u7684\u5404\u79cd Event \u4ecb\u7ecd\u91cc\u9762\u8be6\u7ec6\u4ecb\u7ecd\u3002\u6211\u7684\u5efa\u8bae\u662f\uff0c\u4e00\u822c\u5e94\u7528256\u5c31\u591f\uff0c\u65f6\u95f4\u8de8\u5ea6\u5927\u7684\uff0c\u4f8b\u5982 maxage \u4fdd\u5b58\u4e86\u4e00\u5468\u4ee5\u4e0a\u7684\uff0c\u53ef\u4ee5\u7ffb\u500d repository \u7b49\u540c\u4e8e -Djava.io.tmpdir \u6307\u5b9a\u7684\u76ee\u5f55 JFR \u4fdd\u5b58\u5230\u78c1\u76d8\u7684\u4e34\u65f6\u8bb0\u5f55\u7684\u4f4d\u7f6e retransform true \u662f\u5426\u901a\u8fc7 JVMTI \u8f6c\u6362 JFR \u76f8\u5173 Event \u7c7b\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a false\uff0c\u5219\u53ea\u5728 Event \u7c7b\u52a0\u8f7d\u7684\u65f6\u5019\u6dfb\u52a0\u76f8\u5e94\u7684 Java Instrumentation\uff0c\u8fd9\u4e2a\u4e00\u822c\u4e0d\u7528\u6539\uff0c\u8fd9\u70b9\u5185\u5b58 metaspace \u8fd8\u662f\u8db3\u591f\u7684 samplethreads true \u8fd9\u4e2a\u662f\u662f\u5426\u5f00\u542f\u7ebf\u7a0b\u91c7\u96c6\u7684\u72b6\u6001\u4f4d\u914d\u7f6e\uff0c\u53ea\u6709\u8fd9\u4e2a\u914d\u7f6e\u4e3a true\uff0c\u5e76\u4e14\u5728 Event \u914d\u7f6e\u4e2d\u5f00\u542f\u7ebf\u7a0b\u76f8\u5173\u7684\u91c7\u96c6\uff08\u8fd9\u4e2a\u540e\u9762\u4f1a\u63d0\u5230\uff09\uff0c\u624d\u4f1a\u91c7\u96c6\u8fd9\u4e9b\u4e8b\u4ef6\u3002 stackdepth 64 \u91c7\u96c6\u4e8b\u4ef6\u5806\u6808\u6df1\u5ea6\uff0c\u6709\u4e9b Event \u4f1a\u91c7\u96c6\u5806\u6808\uff0c\u8fd9\u4e2a\u5806\u6808\u91c7\u96c6\u7684\u6df1\u5ea6\uff0c\u7edf\u4e00\u7531\u8fd9\u4e2a\u914d\u7f6e\u6307\u5b9a\u3002\u6ce8\u610f\u8fd9\u4e2a\u503c\u4e0d\u80fd\u8bbe\u7f6e\u8fc7\u5927\uff0c\u5982\u679c\u4f60\u91c7\u96c6\u7684 Event\u79cd\u7c7b\u5f88\u591a\uff0c\u5806\u6808\u6df1\u5ea6\u5927\u5f88\u5f71\u54cd\u6027\u80fd\u3002\u6bd4\u5982\u4f60\u7528\u7684\u662f default.jfc \u914d\u7f6e\u7684\u91c7\u96c6\uff0c\u5806\u6808\u6df1\u5ea664\u57fa\u672c\u4e0a\u5c31\u662f\u4e0d\u5f71\u54cd\u6027\u80fd\u7684\u6781\u9650\u4e86\u3002\u4f60\u53ef\u4ee5\u81ea\u5b9a\u4e49\u91c7\u96c6\u67d0\u4e9b\u4e8b\u4ef6\uff0c\u589e\u52a0\u5806\u6808\u6df1\u5ea6\u3002 threadbuffersize 8KB threadBuffer \u5927\u5c0f\uff0c\u6700\u597d\u4e0d\u8981\u4fee\u6539\u8fd9\u4e2a\uff0c\u5982\u679c\u589e\u5927\uff0c\u90a3\u4e48\u968f\u7740\u4f60\u7684\u7ebf\u7a0b\u6570\u589e\u591a\uff0c\u5185\u5b58\u5360\u7528\u4f1a\u589e\u5927\u3002\u8fc7\u5c0f\u7684\u8bdd\uff0c\u5237\u5165 global buffer \u7684\u6b21\u6570\u5c31\u4f1a\u53d8\u591a\u30028KB \u5c31\u662f\u7ecf\u9a8c\u4e2d\u6700\u5408\u9002\u7684\u3002","title":"-XX:FlightRecorderOption\u53c2\u6570\u8bf4\u660e"},{"location":"JVM/JFR%26JMC%26JCMD/#jcmd","text":"\u81f3\u4e8eJCMD\u662f\u4ec0\u4e48\uff0c\u53ef\u4ee5\u770b\u4e0b JCMD 1\u3001 jcmd JFR.start \uff1a\u542f\u52a8 JFR \u8bb0\u5f55\uff0c\u53c2\u6570\u548c -XX:StartFlightRecording \u4e00\u6a21\u4e00\u6837\uff0c \u8bf7\u53c2\u8003\u4e0a\u9762\u7684\u8868\u683c \u3002\u4f46\u662f\u6ce8\u610f\u8fd9\u91cc\u4e0d\u518d\u662f\u9017\u53f7\u5206\u5272\uff0c\u800c\u662f\u7a7a\u683c \u793a\u4f8b\uff1a jcmd 21 JFR.start name=profile_online maxage=1d maxsize=1g \u8fd9\u4e2a\u5c31\u4ee3\u8868\u542f\u52a8\u4e00\u4e2a\u540d\u79f0\u4e3a profile_online, \u6700\u591a\u4fdd\u7559\u4e00\u5929\uff0c\u6700\u5927\u4fdd\u7559 1G \u7684\u672c\u5730\u6587\u4ef6\u8bb0\u5f55 2\u3001 jcmd JFR.stop . \u505c\u6b62 JFR \u8bb0\u5f55\uff0c\u9700\u8981\u4f20\u5165\u540d\u79f0\uff0c\u4f8b\u5982\u5982\u679c\u8981\u505c\u6b62\u4e0a\u9762\u6253\u5f00\u7684\uff0c\u5219\u6267\u884c\uff1a jcmd 21 JFR.stop name=profile_online copy_to_file=profile.jfr copy_to_file :\u505c\u6b62\u65f6\u540c\u65f6\u590d\u5236\u5230\u6587\u4ef6\uff0c\u6307\u5b9a\u6587\u4ef6\u8f93\u51fa\u4f4d\u7f6e 3\u3001jcmd JFR.check\uff0c\u67e5\u770b\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684 JFR \u8bb0\u5f55\u3002 \u793a\u4f8b\uff1a jcmd 21 JFR.check verbose=true \u8f93\u51fa\uff1a 21: Recording 1: name=profile_online maxsize=1.0GB maxage=1d (running) verbose\uff1a\u662f\u5426\u67e5\u770b\u6bcf\u79cdEvent\u91c7\u96c6\u8be6\u7ec6\u914d\u7f6e 4\u3001 jcmd JFR.configure \uff0c\u5982\u679c\u4e0d\u4f20\u5165\u53c2\u6570\uff0c\u5219\u662f\u67e5\u770b\u5f53\u524d\u914d\u7f6e\uff0c\u4f20\u5165\u53c2\u6570\u5c31\u662f\u4fee\u6539\u914d\u7f6e\u3002\u914d\u7f6e\u4e0e-XX:FlightRecorderOptions\u7684\u4e00\u6a21\u4e00\u6837\u3002 \u8bf7\u53c2\u8003\u4e0a\u9762\u7684\u8868\u683c \u793a\u4f8b\uff1a ./jcmd 21 JFR.configure \u8f93\u51fa\uff1a Repository path: /tmp/2020_03_18_08_41_44_21 Stack depth: 64 Global buffer count: 20 Global buffer size: 512.0 kB Thread buffer size: 8.0 kB Memory size: 10.0 MB Max chunk size: 12.0 MB Sample threads: true \u793a\u4f8b\uff1a ./jcmd 21 JFR.configure stackdepth=65 \u8f93\u51fa\uff1a 21: Stack depth: 65 5\u3001 jcmd <pid> JFR.dump :dump\u6027\u80fd\u65e5\u5fd7 \u53c2\u6570 \u9ed8\u8ba4\u503c \u63cf\u8ff0 name \u65e0 \u6307\u5b9a\u8981\u67e5\u770b\u7684 JFR \u8bb0\u5f55\u540d\u79f0 filename \u65e0 \u6307\u5b9a\u6587\u4ef6\u8f93\u51fa\u4f4d\u7f6e maxage 0 dump\u6700\u591a\u7684\u65f6\u95f4\u8303\u56f4\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u5355\u4f4d\u914d\u7f6e\uff0c\u6ca1\u6709\u5355\u4f4d\u5c31\u662f\u79d2\uff0c\u9ed8\u8ba4\u662f0\uff0c\u5c31\u662f\u4e0d\u9650\u5236 maxsize 0 dump\u6700\u5927\u6587\u4ef6\u5927\u5c0f\uff0c\u652f\u6301\u5355\u4f4d\u914d\u7f6e\uff0c \u4e0d\u5e26\u5355\u4f4d\u662f\u5b57\u8282\uff0cm\u6216\u8005M\u4ee3\u8868MB\uff0cg\u6216\u8005G\u4ee3\u8868GB\u3002\u8bbe\u7f6e\u4e3a0\u4ee3\u8868\u4e0d\u9650\u5236\u5927\u5c0f begin \u65e0 dump\u5f00\u59cb\u4f4d\u7f6e\uff0c \u53ef\u4ee5\u8fd9\u4e48\u914d\u7f6e\uff1a09:00, 21:35:00, 2018-06-03T18:12:56.827Z, 2018-06-03T20:13:46.832, -10m, -3h, or -1d end : \u65e0 dump\u7ed3\u675f\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u8fd9\u4e48\u914d\u7f6e\uff1a 09:00, 21:35:00, 2018-06-03T18:12:56.827Z, 2018-06-03T20:13:46.832, -10m, -3h, or -1d (STRING, no default value) path-to-gc-roots false \u662f\u5426\u8bb0\u5f55GC\u6839\u8282\u70b9\u5230\u6d3b\u52a8\u5bf9\u8c61\u7684\u8def\u5f84\uff0c\u4e00\u822c\u4e0d\u8bb0\u5f55\uff0cdump \u7684\u65f6\u5019\u6253\u5f00\u8fd9\u4e2a\u80af\u5b9a\u4f1a\u89e6\u53d1\u4e00\u6b21 fullGC\uff0c\u5bf9\u7ebf\u4e0a\u5e94\u7528\u6709\u5f71\u54cd\u3002\u6700\u597d\u53c2\u8003\u4e4b\u524d\u5bf9\u4e8e JFR \u542f\u52a8\u8bb0\u5f55\u53c2\u6570\u7684\u8fd9\u4e2a\u53c2\u6570\u7684\u63cf\u8ff0\uff0c\u8003\u8651\u662f\u5426\u6709\u5fc5\u8981","title":"JCMD\u542f\u52a8"},{"location":"JVM/JFR%26JMC%26JCMD/#jmc","text":"","title":"JMC"},{"location":"JVM/JFR%26JMC%26JCMD/#jmc_1","text":"JMC\uff08JAVA MISSION CONTROL\uff09\u662f\u548cJFR\u7ed3\u5408\u4f7f\u7528\u7684\uff0c\u7531\u4e8eJFR\u751f\u6210\u7684\u62a5\u544a\u662f\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u6240\u4ee5\u9700\u8981\u6709\u4e00\u4e2a\u53ef\u89c6\u5316\u754c\u9762\u53bb\u5206\u6790\uff0c\u90a3\u4e48JMC\u5c31\u662f\u8fd9\u4e2a\u53ef\u89c6\u5316\u5de5\u5177\u3002\u53ef\u4ee5\u67e5\u770b\u5e94\u7528\uff08\u7ebf\u7a0b\u3001\u5185\u5b58\u3001IO\u3001\u5f02\u5e38\u7b49\uff09\u3001JVM\uff08GC\u3001GC\u914d\u7f6e\u3001\u7c7b\u52a0\u8f7d\u7b49\uff09\u3001\u73af\u5883\uff08\u73af\u5883\u53d8\u91cf\u3001\u7cfb\u7edf\u53d8\u91cf\u7b49\uff09\u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u53ef\u4ee5\u901a\u8fc7\u8fde\u63a5JVM\u6216\u8005\u8bfb\u53d6jfr\u6587\u4ef6\u8bfb\u53d6\u76f8\u5e94\u4fe1\u606f \u5177\u4f53\u4f7f\u7528\u4e0d\u518d\u505a\u8be6\u7ec6\u8d58\u8ff0\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u4e0b\u8fd9\u7bc7\u535a\u5ba2: JMC\u4f7f\u7528\u8bf4\u660e","title":"\u4ec0\u4e48\u662fJMC"},{"location":"JVM/JFR%26JMC%26JCMD/#jcmd_1","text":"\u53d1\u9001\u8bca\u65ad\u547d\u4ee4\u8bf7\u6c42\u5230\u6b63\u5728\u8fd0\u884c\u7684Java\u865a\u62df\u673a\uff08JVM\uff09\u3002\u5b83\u5fc5\u987b\u548cJVM\u8fd0\u884c\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\uff0c\u5e76\u4e14\u4e0e\u542f\u52a8JVM\u7528\u6237\u5177\u6709\u76f8\u540c\u7684\u7ec4\u6743\u9650\u3002 \u53ef\u901a\u8fc7jcmd help \u67e5\u770b\u547d\u4ee4\uff0c\u4e0b\u9762\u5217\u4e86\u4e00\u4e9b\u5e38\u7528","title":"JCMD"},{"location":"JVM/JFR%26JMC%26JCMD/#_2","text":"\u547d\u4ee4 \u63cf\u8ff0 jcmd PID VM.uptime \u67e5\u770b JVM \u7684\u542f\u52a8\u65f6\u957f jcmd PID GC.class_histogram \u67e5\u770b JVM \u7684\u7c7b\u4fe1\u606f\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u67e5\u770b\u6bcf\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u6570\u91cf\u548c\u5360\u7528\u7a7a\u95f4\u5927\u5c0f\u3002 jcmd PID Thread.print \u67e5\u770b JVM \u7684Thread Dump jcmd PID GC.heap_dump FILE_NAME \u67e5\u770b JVM \u7684Heap Dump,\u6ce8\u610f\uff0c\u5982\u679c\u53ea\u6307\u5b9a\u6587\u4ef6\u540d\uff0c\u9ed8\u8ba4\u4f1a\u751f\u6210\u5728\u542f\u52a8 JVM \u7684\u76ee\u5f55\u91cc\u3002 jcmd PID VM.system_properties \u67e5\u770b JVM \u7684\u5c5e\u6027\u4fe1\u606f jcmd PID VM.flags \u67e5\u770b JVM \u7684\u542f\u52a8\u53c2\u6570,\u6ce8\u610f\uff0c\u53ef\u4ee5\u770b\u5230 -X \u548c -XX \u7684\u53c2\u6570\u4fe1\u606f jcmd PID VM.command_line \u67e5\u770b JVM \u7684\u542f\u52a8\u547d\u4ee4\u884c jcmd PID GC.run_finalization \u5bf9 JVM \u6267\u884c java.lang.System.runFinalization(),\u5c3d\u91cfb\u522b\u53bb\u8c03\u7528\u8fd9\u4e2a\u5bf9\u8c61\u7684finalize\u65b9\u6cd5\u3002 jcmd PID GC.run \u5bf9 JVM \u6267\u884c java.lang.System.gc()\uff0c\u544a\u8bc9\u5783\u573e\u6536\u96c6\u5668\u6253\u7b97\u8fdb\u884c\u5783\u573e\u6536\u96c6\uff0c\u800c\u5783\u573e\u6536\u96c6\u5668\u8fdb\u4e0d\u8fdb\u884c\u6536\u96c6\u662f\u4e0d\u786e\u5b9a\u7684 jcmd PID PerfCounter.print \u67e5\u770b JVM \u7684\u6027\u80fd","title":"\u5e38\u7528\u547d\u4ee4"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","text":"1\u3001SEGMENT merge\uff08\u6bb5\u5408\u5e76\uff09\u6982\u8ff0 \u5728lucene\u4e2d\u5355\u4e2a\u5012\u6392\u7d22\u5f15\u6587\u4ef6\u88ab\u79f0\u4e3aSegment\u3002Segment \u5177\u6709\u4e0d\u53ef\u53d8\u6027\uff0c\u591a\u4e2a Segments \u6c47\u603b\u5728\u4e00\u8d77\uff0c\u79f0\u4e3a Lucene \u7684Index\uff0c\u5176\u5bf9\u5e94\u7684\u5c31\u662f ES \u4e2d\u7684 Shard\u3002\u4e00\u4e2a\u5927segment\u7684merge\u64cd\u4f5c\u662f\u5f88\u6d88\u8017CPU\u3001IO\u8d44\u6e90\u7684\uff0c\u5982\u679c\u4f7f\u7528\u4e0d\u5f53\u4f1a\u5f71\u54cd\u5230\u672c\u8eab\u7684serach\u67e5\u8be2\u6027\u80fd\u3002es\u9ed8\u8ba4\u4f1a\u63a7\u5236merge\u8fdb\u7a0b\u7684\u8d44\u6e90\u5360\u7528\u4ee5\u4fdd\u8bc1merge\u671f\u95f4search\u5177\u6709\u8db3\u591f\u8d44\u6e90\u3002 \u4e00\u4e2aIndex\u4f1a\u7531\u4e00\u4e2a\u6216\u591a\u4e2asub-index\u6784\u6210\uff0csub-index\u88ab\u79f0\u4e3aSegment\u3002Lucene\u7684Segment\u8bbe\u8ba1\u601d\u60f3\uff0c\u4e0eLSM\u7c7b\u4f3c\u4f46\u53c8\u6709\u4e9b\u4e0d\u540c\uff0c\u7ee7\u627f\u4e86LSM\u4e2d\u6570\u636e\u5199\u5165\u7684\u4f18\u70b9\uff0c\u4f46\u662f\u5728\u67e5\u8be2\u4e0a\u53ea\u80fd\u63d0\u4f9b\u8fd1\u5b9e\u65f6\u800c\u975e\u5b9e\u65f6\u67e5\u8be2\u3002 Lucene\u4e2d\u7684\u6570\u636e\u5199\u5165\u4f1a\u5148\u5199\u5185\u5b58\u7684\u4e00\u4e2aBuffer\uff08 \u53ea\u80fd\u5199\uff0c\u4e0d\u80fd\u8bfb \uff09\uff0c\u5f53Buffer\u5185\u6570\u636e\u5230\u4e00\u5b9a\u91cf\u540e\u4f1a\u88abflush\u6210\u4e00\u4e2aSegment\uff0c\u6bcf\u4e2aSegment\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u7d22\u5f15\uff0c \u53ef\u72ec\u7acb\u88ab\u67e5\u8be2 \uff0c\u4f46\u6570\u636e\u6c38\u8fdc \u4e0d\u80fd\u88ab\u66f4\u6539 \uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48Lucene\u88ab\u79f0\u4e3a\u63d0\u4f9b \u8fd1\u5b9e\u65f6\u800c\u975e\u5b9e\u65f6\u67e5\u8be2 \u7684\u539f\u56e0\u3002Segment\u4e2d\u5199\u5165\u7684\u6587\u6863\u4e0d\u53ef\u88ab\u4fee\u6539\uff0c\u4f46\u53ef\u88ab\u5220\u9664\u3002Index\u7684\u67e5\u8be2\u9700\u8981\u5bf9\u4e00\u4e2a\u6216\u8005\u591a\u4e2aSegment\u8fdb\u884c\u67e5\u8be2\uff0c\u5e76\u5bf9\u7ed3\u679c\u8fdb\u884c\u5408\u5e76\uff0c\u8fd8\u9700\u8981\u5904\u7406\u88ab\u5220\u9664\u7684\u6587\u6863\uff0c\u4e3a\u4e86\u5bf9\u67e5\u8be2\u8fdb\u884c\u4f18\u5316\uff0cLucene\u4f1a\u91c7\u7528\u6bb5\u5408\u5e76\u7b56\u7565\u5bf9\u591a\u4e2aSegment\u8fdb\u884c\u5408\u5e76\u3002 \u5728\u5206\u6bb5\u601d\u60f3\u4e0b\uff0c\u5bf9\u6570\u636e\u7684\u5199\u64cd\u4f5c\u5982\u4e0b\uff1a \u65b0\u589e\u3002\u5f53\u6709\u65b0\u7684\u6570\u636e\u9700\u8981\u521b\u5efa\u7d22\u5f15\u65f6\uff0c\u7531\u4e8e\u6bb5\u7684\u4e0d\u53d8\u6027\uff0c\u6240\u4ee5\u9009\u62e9\u65b0\u5efa\u4e00\u4e2a\u6bb5\u6765\u5b58\u50a8\u65b0\u589e\u7684\u6570\u636e\u3002 \u5220\u9664\u3002\u5f53\u9700\u8981\u5220\u9664\u6570\u636e\u65f6\uff0c\u7531\u4e8e\u6570\u636e\u6240\u5728\u7684\u6bb5\u53ea\u53ef\u8bfb\uff0c\u4e0d\u53ef\u5199\uff0c\u6240\u4ee5Lucene\u5728\u7d22\u5f15\u6587\u4ef6\u4e0b\u65b0\u589e\u4e86\u4e00\u4e2a.del\u7684\u6587\u4ef6\uff0c\u7528\u6765\u4e13\u95e8\u5b58\u50a8\u88ab\u5220\u9664\u7684\u6570\u636eid\u3002\u5f53\u67e5\u8be2\u65f6\uff0c\u88ab\u5220\u9664\u7684\u6570\u636e\u8fd8\u662f\u53ef\u4ee5\u88ab\u67e5\u5230\u7684\uff0c\u53ea\u662f\u5728\u8fdb\u884c\u6587\u6863\u94fe\u8868\u5408\u5e76\u65f6\uff0c\u624d\u628a\u5df2\u7ecf\u5220\u9664\u7684\u6570\u636e\u8fc7\u6ee4\u6389\u3002\u88ab\u5220\u9664\u7684\u6570\u636e\u5728\u8fdb\u884c\u6bb5\u5408\u5e76\u65f6\u624d\u4f1a\u771f\u6b63\u88ab\u79fb\u9664\u3002 \u66f4\u65b0\u3002\u66f4\u65b0\u7684\u64cd\u4f5c\u5176\u5b9e\u5c31\u662f\u5220\u9664\u548c\u65b0\u589e\u7684\u7ec4\u5408\uff0c\u5148\u5728.del\u6587\u4ef6\u4e2d\u8bb0\u5f55\u65e7\u6570\u636e\uff0c\u518d\u5728\u65b0\u6bb5\u4e2d\u6dfb\u52a0\u4e00\u6761\u66f4\u65b0\u540e\u7684\u6570\u636e\u3002 Merge\u7684\u89e6\u53d1\u5668 /** * segment flush. */ SEGMENT_FLUSH, /** * commit, NRT reader reopen or a close call on the index writer. */ FULL_FLUSH, /** * \u663e\u5f0f\u89e6\u53d1 */ EXPLICIT, /** * \u5408\u5e76\u7ed3\u675f */ MERGE_FINISHED, /** * IndexWriter\u5173\u95ed\u65f6. */ CLOSING, /** * commit. */ COMMIT, /** * \u6253\u5f00NRT readers\uff0c8\u4ee5\u540e\u589e\u52a0. */ GET_READER 3\u3001merge\u6d41\u7a0b \u6267\u884c\u6bb5\u5408\u5e76\u6d41\u7a0b\u56fe 4\u3001merge\u7b56\u7565 \u6bb5\u5408\u5e76\u53ef\u89c6\u5316\u8fc7\u7a0b:https://blog.mikemccandless.com/2011/02/visualizing-lucenes-segment-merges.html LogMergePolicy\uff08Lucene4 \u4e4b\u524d\u9ed8\u8ba4\uff09\u603b\u662f\u5408\u5e76\u76f8\u90bb\u7684\u6bb5\u6587\u4ef6\uff0c\u5408\u5e76\u76f8\u90bb\u7684\u6bb5\u6587\u4ef6\uff08Adjacent Segment\uff09\u63cf\u8ff0\u7684\u662f\u5bf9\u4e8eIndexWriter\u63d0\u4f9b\u7684\u6bb5\u96c6\uff0cLogMergePolicy\u4f1a\u9009\u53d6\u8fde\u7eed\u7684\u90e8\u5206(\u6216\u5168\u90e8)\u6bb5\u96c6\u533a\u95f4\u6765\u751f\u6210\u4e00\u4e2a\u5f85\u5408\u5e76\u6bb5\u96c6 TieredMergePolicy\uff08Lucene4\u4ee5\u540e\u9ed8\u8ba4\uff09\u4e2d\u4f1a\u5148\u5bf9IndexWriter\u63d0\u4f9b\u7684\u6bb5\u96c6\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5728\u6392\u5e8f\u540e\u7684\u6bb5\u96c6\u4e2d\u9009\u53d6\u90e8\u5206\uff08\u53ef\u80fd\u4e0d\u8fde\u7eed\uff09\u6bb5\u6765\u751f\u6210\u4e00\u4e2a\u5f85\u5408\u5e76\u6bb5\u96c6\uff0c\u5373\u975e\u76f8\u90bb\u7684\u6bb5\u6587\u4ef6\uff08Non-adjacent Segment\uff09\u3002 \u5982\u679c\u7528\u4e00\u53e5\u8bdd\u6765\u63cf\u8ff0\u5408\u5e76\u7b56\u7565TieredMergePolicy\u7684\u7279\u70b9\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\uff1a\u627e\u51fa\u5927\u5c0f\u63a5\u8fd1\u4e14\u6700\u4f18\u7684\u6bb5\u96c6\u3002 \u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecdTieredMergePolicy \u5f00\u59cb\uff1a \u5f53IndexWriter\u5bf9\u7d22\u5f15\u6709\u4efb\u610f\u7684\u66f4\u6539\u90fd\u4f1a\u8c03\u7528\u5408\u5e76\u7b56\u7565\u3002 \u6bb5\u96c6\uff1a IndexWriter\u63d0\u4f9b\u6bb5\u96c6\u7ed9\u5408\u5e76\u7b56\u7565 \u9884\u5904\u7406\uff1a \u9884\u5904\u7406\u7684\u8fc7\u7a0b\u5206\u4e3a4\u4e2a\u6b65\u9aa4\uff0c\u5206\u522b\u662f\u6392\u5e8f\u3001\u8fc7\u6ee4\u6b63\u5728\u5408\u5e76\u7684\u6bb5\u3001\u8fc7\u6ee4\u5927\u6bb5\u3001\u8ba1\u7b97\u7d22\u5f15\u6700\u5927\u5141\u8bb8\u6bb5\u7684\u4e2a\u6570\u3002 \u6392\u5e8f \u7b97\u6cd5\u4e3aTimSort\uff1a\u6392\u5e8f\u89c4\u5219\u4e3a\u6bd4\u8f83\u6bcf\u4e2a\u6bb5\u4e2d\u7d22\u5f15\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u4e0d\u5305\u62ec\u88ab\u5220\u9664\u7684\u6587\u6863\u7684\u7d22\u5f15\u4fe1\u606f\uff0c\u5927\u6bb5\u6392\u524d\u3002 \u8fc7\u6ee4\u6b63\u5728\u5408\u5e76\u7684\u6bb5 \uff1a\u5f53IndexWriter\u83b7\u5f97\u4e00\u4e2aoneMerge\u540e\uff0c\u4f1a\u4f7f\u7528\u540e\u53f0\u7ebf\u7a0b\u5bf9oneMerge\u4e2d\u7684\u6bb5\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u8fd9\u65f6\u5019\u7d22\u5f15\u518d\u6b21\u53d1\u751f\u66f4\u6539\u65f6\uff0cIndexWriter\u4f1a\u518d\u6b21\u8c03\u7528TieredMergePolicy\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u67d0\u4e9b\u5df2\u7ecf\u6b63\u5728\u5408\u5e76\u7684\u6bb5\u88ab\u5904\u7406\u4e3a\u4e00\u4e2a\u65b0\u7684oneMerge\uff0c \u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u5408\u5e76\uff0c\u9700\u8981\u8fc7\u6ee4\u90a3\u4e9b\u6b63\u5728\u5408\u5e76\u4e2d\u7684\u6bb5 \u3002\u540e\u53f0\u5408\u5e76\u7684\u7ebf\u7a0b\u4f1a\u5c06\u6b63\u5728\u5408\u5e76\u7684\u6bb5\u6dfb\u52a0\u5230Set\u5bf9\u8c61\u4e2d\uff0c\u5728IndexWriter\u8c03\u7528\u5408\u5e76\u7b56\u7565\u65f6\u4f20\u5165\u3002 \u8fc7\u6ee4\u5927\u6bb5(Large Segment) \uff1a \u5927\u6bb5\u7684\u5b9a\u4e49\uff1a\u8be5\u6bb5\u7684SegmentSize \u2265 (maxMergedSegmentBytes / 2) \u5e76\u4e14\u6ee1\u8db3 \u6bb5\u96c6\u4e2d\u7684\u88ab\u5220\u9664\u6587\u6863\u7684\u7d22\u5f15\u4fe1\u606f\u5927\u5c0f\u5360\u603b\u7d22\u5f15\u6587\u4ef6\u5927\u5c0f\u7684\u6bd4\u4f8btotalDelPct \u2264 deletesPctAllowed \u6216 \u8be5\u6bb5\u4e2d\u88ab\u5220\u9664\u6587\u6863\u7684\u7d22\u5f15\u4fe1\u606f\u5927\u5c0f\u5360\u6bb5\u4e2d\u7d22\u5f15\u6587\u4ef6\u5927\u5c0f\u7684\u6bd4\u4f8bsegDelPct \u2264 deletesPctAllowed \u8ba1\u7b97\u7d22\u5f15\u6700\u5927\u5141\u8bb8\u6bb5\u7684\u4e2a\u6570 \uff1aallowedSegCount\uff1a\u8be5\u503c\u63cf\u8ff0\u4e86\u6bb5\u96c6\u5185\u6bcf\u4e2a\u6bb5\u7684\u5927\u5c0fSegmentSize\u662f\u5426\u6bd4\u8f83\u63a5\u8fd1(segments of approximately equal size)\uff0c\u6839\u636e\u5f53\u524d\u7d22\u5f15\u5927\u5c0f\u6765\u4f30\u7b97\u5f53\u524d\u7d22\u5f15\u4e2d\"\u5e94\u8be5\"\u6709\u591a\u5c11\u4e2a\u6bb5\uff0c\u5982\u679c\u5b9e\u9645\u7684\u6bb5\u4e2a\u6570\u5c0f\u4e8e\u4f30\u7b97\u503c\uff0c\u90a3\u4e48\u8bf4\u660e\u7d22\u5f15\u4e2d\u7684\u6bb5\u4e0d\u6ee1\u8db3\u5dee\u4e0d\u591a\u90fd\u76f8\u540c\uff08approximately equal size\uff09\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u9009\u51faOneMerge \u6bb5\u96c6\u4e2d\u53ef\u4ee5\u5f97\u5230OneMerge \u5982\u679c\u540c\u65f6\u6ee1\u8db3\u4e0b\u9762\u4e09\u4e2a\u6761\u4ef6\uff0c\u90a3\u4e48\u8bf4\u660e\u6bb5\u96c6\u4e2d\u53ef\u4ee5\u5f97\u5230OneMerge\uff1a MergeType\uff1a\u5408\u5e76\u7c7b\u578b\uff0c\u5373\u4e0a\u6587\u4e2d\u7684MERGE_TYPE\uff0c\u5fc5\u987b\u662fNATURAL\u7c7b\u578b SegmentNumber\uff1a\u6bb5\u96c6\u4e2d\u6bb5\u7684\u4e2a\u6570\uff0c\u5982\u679cSegmentNumber \u2264 allowedSegCount remainingDelCount\uff1a\u5269\u4f59\u6bb5\u96c6\u4e2d\u88ab\u5220\u9664\u6587\u6863\u7684\u603b\u6570\uff0c\u5982\u679cremainingDelCount \u2264 allowedDelCount \u627e\u51fa\u4e00\u4e2aOneMerge \u987a\u5e8f\u904d\u5386\u6bb5\u96c6\uff0c\u5148\u9884\u5224\u4e0b\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u6bb5\u540e\uff0cOneMerge\u7684\u5927\u5c0f\u662f\u5426\u4f1a\u8d85\u8fc7maxMergedSegmentBytes\uff0c\u5982\u679c\u8d85\u8fc7\uff0c\u90a3\u4e48\u5c31\u8df3\u8fc7\u8fd9\u4e2a\u6bb5\uff0c\u7ee7\u7eed\u6dfb\u52a0\u4e0b\u4e00\u4e2a\u6bb5\uff0c\u76ee\u7684\u662f\u4f7f\u8fd9\u4e2aOneMerge\u7684\u5927\u5c0f\u5c3d\u91cf\u63a5\u8fd1maxMergedSegmentBytes\uff0c\u56e0\u4e3a\u6bb5\u96c6\u4e2d\u7684\u6bb5\u662f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u7684\uff0c\u5f53\u524d\u524d\u63d0\u662fOneMerge\u4e2d\u6bb5\u7684\u4e2a\u6570\u4e0d\u80fd\u8d85\u8fc7mergeFactor\u3002 \u4e3e\u4e2a\u6817\u5b50\u5427 \u4ece\u6bb51\u5f00\u59cb\uff0c\u9010\u4e2a\u6dfb\u52a0\u5230OneMerge\u4e2d\uff0c\u5f53\u904d\u5386\u5230\u6bb55\u65f6\u53d1\u73b0\uff0c\u5982\u679c\u6dfb\u52a0\u6bb55\uff0c\u90a3\u4e48OneMerge\u7684\u5927\u5c0f\uff0c\u537319 (\u6bb51) + 18 (\u6bb52)+ 16 (\u6bb53) + 15 (\u6bb54) + 15 (\u6bb55) = 83\uff0c\u8be5\u503c\u5927\u4e8e maxMergedSegmentBytes (80)\uff0c\u90a3\u4e48\u8fd9\u65f6\u5019\u9700\u8981\u8df3\u8fc7\u6bb55\uff0c\u5f80\u540e\u7ee7\u7eed\u627e\uff0c\u540c\u7406\u6bb56\u3001\u6bb57\u90fd\u4e0d\u884c\uff0c\u76f4\u5230\u904d\u5386\u5230\u6bb58\uff0cOneMerge\u7684\u5927\u5c0f\u4e3a19 (\u6bb51) + 18 (\u6bb52)+ 16 (\u6bb53) + 15 (\u6bb54) + 7 (\u6bb58) = 75\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u6bb58\u6dfb\u52a0\u5230OneMerge\u4e2d\uff0c\u5c3d\u7ba1\u6bb59\u6dfb\u52a0\u5230OneMerge\u4ee5\u540e\uff0cOneMerge\u7684\u5927\u5c0f\u4e3a 19 (\u6bb51) + 18 (\u6bb52)+ 16 (\u6bb53) + 15 (\u6bb54) + 7 (\u6bb58) + 4 (\u6bb59) = 79\uff0c\u8fd8\u662f\u5c0f\u4e8emaxMergedSegmentBytes (80)\uff0c\u4f46\u662f\u7531\u4e8eOneMerge\u4e2d\u6bb5\u7684\u4e2a\u6570\u4f1a\u8d85\u8fc7mergeFactor (5)\uff0c\u6240\u4ee5\u4e0d\u80fd\u6dfb\u52a0\u5230OneMerge\u4e2d\uff0c\u5e76\u4e14\u505c\u6b62\u904d\u5386 \u5bf9\u4e0a\u9762\u627e\u5230\u7684OneMerge\u6253\u5206 \u6253\u5206\u516c\u5f0f\u4e3a\uff1a \uff0cmergeScore\u8d8a\u5c0f\u8d8a\u597d\uff08smaller mergeScore is better)\u3002 skew\uff1a\u7c97\u7565\u7684\u8ba1\u7b97OneMerge\u7684\u504f\u659c\u503c(Roughly measure \"skew\" of the merge)\uff0c\u8861\u91cfOneMerge\u4e2d\u6bb5\u4e4b\u95f4\u5927\u5c0f\u7684\u662f\u5426\u90fd\u5dee\u4e0d\u591a\u76f8\u540c\uff0c\u5982\u679cOneMerge\u4e2d\u6bb5\u7684\u5927\u5c0f\u63a5\u8fd1maxMergedSegmentBytes\uff0c\u5373hitTooLarge\u4e3atrue\uff0c\u90a3\u4e48 \uff0c\u5426\u5219 \uff0c, \u5176\u4e2dMaxSegment\u4e3aOneMerge\u4e2d\u6700\u5927\u7684\u6bb5\u7684\u5927\u5c0f\uff0cSegmentSize\u4e3a\u6bcf\u4e00\u4e2a\u6bb5\u7684\u5927\u5c0f\uff0cmaxMergedSegmentBytes\u5728\u4e0a\u6587\u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u3002 totAfterMergeBytes\uff1a\u8be5\u503c\u662fOneMerge\u4e2d\u6240\u6709\u6bb5\u7684\u5927\u5c0f\uff0c\u8fd9\u4e2a\u53c2\u6570\u63cf\u8ff0\u4e86\u6bb5\u5408\u5e76\u6bd4\u8f83\u503e\u5411\u4e8e(Gently favor )\u8f83\u5c0f\u7684OneMerge nonDelRatio\uff1a\u8be5\u503c\u63cf\u8ff0\u4e86OneMerge\u4e2d\u6240\u6709\u6bb5\u5305\u542b\u88ab\u5220\u9664\u6587\u6863\u6bd4\u4f8b\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u7ed9\u51fa\u8ba1\u7b97\u516c\u5f0f\u4e86\uff0cnonDelRatio\u8d8a\u5c0f\u8bf4\u660eOneMerge\u4e2d\u5305\u542b\u66f4\u591a\u7684\u88ab\u5220\u9664\u7684\u6587\u6863\uff0c\u8be5\u503c\u76f8\u6bd4\u8f83totAfterMergeBytes\uff0c\u5bf9\u603b\u4f53\u6253\u5206\u5f71\u54cd\u5ea6\u66f4\u5927\uff0c\u56e0\u4e3a\u6bb5\u5408\u5e76\u7684\u4e00\u4e2a\u91cd\u8981\u76ee\u7684\u5c31\u662f\u53bb\u9664\u88ab\u5220\u9664\u7684\u6587\u6863(Strongly favor merges that reclaim deletes) \u6700\u7ec8\u6253\u5206\u516c\u5f0f\uff1a \u66ff\u6362\u6b21\u6709OneMerge \u5f53\u524d\u5c42\u4e2d\u53ea\u5141\u8bb8\u9009\u51fa\u4e00\u4e2aOneMerge\uff0c\u5373mergeScore\u6700\u4f4e\u7684OneMerge\u3002 \u6ca1\u6709\u65b0\u7684OneMerge \u904d\u5386\u7684\u5bf9\u8c61\u662f \u6bb51~\u6bb512\uff0c\u5e76\u4e14\u9009\u51fa\u4e86\u4e00\u4e2aOneMerge\uff0c\u63a5\u7740\u6211\u4eec\u9700\u8981\u518d\u6b21\u4ece \u6bb52~\u6bb512 \u4e2d\u9009\u51fa\u4e00\u4e2aOneMerge\u540e\uff0c\u518d\u4ece\u6bb53~\u6bb512\u4e2d\u518d\u627e\u51fa\u4e00\u4e2aOneMerge\uff0c\u5982\u6b64\u5f80\u590d\u76f4\u5230\u627e\u4e0d\u5230\u65b0\u7684OneMerge bestScore != null && hitTooLarge == false && SegmentNum < mergeFactor bestScore != null\uff1abestScore\u5982\u679c\u4e3a\u7a7a\uff0c\u8bf4\u660e\u5f53\u524d\u8fd8\u6ca1\u6709\u4ea7\u751f\u4efb\u4f55\u7684OneMerge\uff0c\u90a3\u4e48\u80af\u5b9a\u4f1a\u751f\u6210\u4e00\u4e2aOneMerge hitTooLarge == false\uff1a\u5982\u679cbestScore\u4e0d\u4e3a\u7a7a\uff0chitTooLarge\u4e3atrue\uff0c\u4e5f\u8981\u751f\u6210\u4e00\u4e2aOneMerge\u3002 \u5269\u4f59\u6bb5\u96c6\u4e2a\u6570\uff1abestScore\u4e0d\u4e3a\u7a7a\uff0chitTooLarge\u4e3afalse\uff0c\u5982\u679c\u5269\u4f59\u6bb5\u96c6\u4e2a\u6570SegmentNum\u5c0f\u4e8emergeFactor\u5c31\u4e0d\u5141\u8bb8\u751f\u6210\u4e00\u4e2aOneMerge \u6bb5\u96c6\u4e2d\u5254\u9664\u6700\u4f18OneMerge\u5305\u542b\u7684\u6bb5 \u5c42\u5185\u53ea\u80fd\u9009\u51fa\u4e00\u4e2aOneMerge\uff0c\u90a3\u4e48\u4ece\u6bb5\u96c6\u4e2d\u5254\u9664\u6700\u4f18\uff0c\u5373\u6253\u5206\u6700\u4f4e\u7684OneMerge\u4e2d\u5305\u542b\u7684\u6bb5\uff0c\u65b0\u7684\u6bb5\u96c6\u4f5c\u4e3a\u65b0\u7684\u4e00\u5c42\u7ee7\u7eed\u5904\u7406\u3002\u5047\u5982\u5f53\u524d\u5c42\u5185\u6700\u4f18\u7684OneMerge\u662f\u4ece\u6bb53~\u6bb512\u4e2d\u9009\u51fa\u7684\uff0c\u90a3\u4e48\u4e0b\u4e00\u5c42\u7684\u53ef\u5904\u7406\u7684\u6bb5\u96c6\u5982\u4e0b\u56fe\u6240\u793a\uff1a 5\u3001talk is cheap, show me the code \u4e2d\u95f4\u4e0d\u91cd\u8981\u4ee3\u7801\u5df2\u7ecf\u5220\u9664 1>\u5c06\u7f13\u5b58\u5199\u5165\u5230\u6bb5 IndexWriter\u5728\u6dfb\u52a0\u6587\u6863\u7684\u65f6\u5019\u8c03\u7528\u51fd\u6570addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs)\uff0c\u5305\u542b\u5982\u4e0b\u6b65\u9aa4\uff1a org.apache.lucene.index.IndexWriter#addDocuments org.apache.lucene.index.DocumentsWriter#updateDocuments //\u8fd4\u56de\u4e3a\u8d1f\u6570\uff0c\u89e6\u53d1maybeMerge org.apache.lucene.index.DocumentsWriter#updateDocuments org.apache.lucene.index.DocumentsWriterFlushControl#doAfterDocument org.apache.lucene.index.IndexWriter#maybeProcessEvents org.apache.lucene.index.IndexWriter#processEvents org.apache.lucene.index.IndexWriter#maybeMerge //merge\u6d41\u7a0b \u5f53\u7f13\u5b58flush\u5230\u78c1\u76d8\uff0c\u5f62\u6210\u4e86\u65b0\u7684\u6bb5\u540e\uff0c\u5c31\u6709\u53ef\u80fd\u89e6\u53d1\u4e00\u6b21\u6bb5\u5408\u5e76\uff0c\u6240\u4ee5\u8c03\u7528maybeMerge() maxBufferedDocs :\u7f13\u51b2\u533a\u6700\u5927\u6587\u6863\u6570\uff0c\u9ed8\u8ba4\u4e3a-1(\u5173\u95ed)\uff1b\u53ef\u8c03\u7528indexWriterConfig.setMaxBufferedDocs(int maxBufferedDocs)\u8bbe\u5b9a\u3002 ramBufferSizeMB:\u5185\u5b58\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u9ed8\u8ba416MB\uff0c\u9ed8\u8ba4\u6309\u7167\u7f13\u51b2\u533a\u5927\u5c0fflush\u3002\u53ef\u4ee5\u8c03\u7528IndexWriter.setRAMBufferSizeMB(double mb)\u8bbe\u5b9a\u3002 private final void maybeMerge(MergePolicy mergePolicy, MergeTrigger trigger, int maxNumSegments) throws IOException { ensureOpen(false); //updatePendingMerges \u6821\u9a8c\u6bb5\u96c6\u662f\u5426\u7b26\u5408merge\u6761\u4ef6\uff0c\u5982\u679c\u7b26\u5408\uff0c\u5219\u8fd4\u56de\u7b26\u5408\u6761\u4ef6\u7684MergePolicy.MergeSpecification\uff08\u8bb0\u5f55\u5f85\u5408\u5e76\u7684\u6bb5\u96c6OneMerge\uff09\uff0c\u5c06\u6bb5\u96c6\u653e\u5165pendingMerges if (updatePendingMerges(mergePolicy, trigger, maxNumSegments) != null) { executeMerge(trigger); } } org.apache.lucene.index.IndexWriter# updatePendingMerges merge\u7b56\u7565\u5728\u6b64\u5904\u9700\u8981\u627e\u5230\u7b26\u5408\u7b56\u7565\u7684\u6bb5\u96c6 \uff0c\u5e76\u4e14\u5c06\u6bb5\u96c6\u52a0\u5165\u5230pendingMerges\u961f\u5217 final MergePolicy.MergeSpecification spec; if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) { // \u663e\u5f0f\u6216\u8005merge\u5b8c\u6210\u540e\u518d\u6b21\u8c03\u7528\u8d70\u6b64\u6d41\u7a0b assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED : \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name(); spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge), this); if (spec != null) { final int numMerges = spec.merges.size(); for(int i=0;i<numMerges;i++) { final MergePolicy.OneMerge merge = spec.merges.get(i); merge.maxNumSegments = maxNumSegments; } } } else { // \u83b7\u53d6NRT reader \uff0ccommit\uff0csegment_flush\uff0cfull_flush\u8d70\u6b21\u903b\u8f91 switch (trigger) { case GET_READER: case COMMIT: spec = mergePolicy.findFullFlushMerges(trigger, segmentInfos, this); break; default: spec = mergePolicy.findMerges(trigger, segmentInfos, this); } } if (spec != null) { final int numMerges = spec.merges.size(); for(int i=0;i<numMerges;i++) { // \u6ce8\u518cmerge\uff0c\u6bcf\u6b21\u8fdb\u5165\u6b64\u65b9\u6cd5\u4f1a\u5148\u6821\u9a8cregisterDone\uff0c\u82e5\u4e3atrue\uff0c\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u6267\u884c\u540e\u9762\u903b\u8f91\uff0c\u5c06 OneMerge\u52a0\u5165\u5230pendingMerges\uff0c\u6807\u8bb0registerDone\u4e3atrue\uff0c registerMerge(spec.merges.get(i)); } } return spec; ps: OneMerge\uff0c\u5b83\u63cf\u8ff0\u4e86\u5f85\u5408\u5e76\u7684\u6bb5\u7684\u4fe1\u606f\uff0c\u5305\u542b\u7684\u51e0\u4e2a\u91cd\u8981\u7684\u4fe1\u606f\u5982\u4e0b\u6240\u793a\uff1a List segments\uff1a\u4f7f\u7528\u4e00\u4e2a\u94fe\u8868\u5b58\u653e\u6240\u6709\u5f85\u5408\u5e76\u7684\u6bb5\u4fe1\u606fSegmentCommitInfo\uff0c\u5176\u4e2dSegmentCommitInfo\u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u6bb5\u7684\u5b8c\u6574\u4fe1\u606f\uff08\u9664\u4e86\u5220\u9664\u4fe1\u606f\uff09\uff0c\u5b83\u5305\u542b\u7684\u4fe1\u606f\u4ee5\u53ca\u5bf9\u5e94\u5728\u7d22\u5f15\u6587\u4ef6\u7684\u5185\u5bb9 SegmentCommitInfo info\uff1a\u8be5\u5b57\u6bb5\u5728\u5f53\u524d\u9636\u6bb5\u662fnull\uff0c\u5728\u540e\u9762\u7684\u6d41\u7a0b\u4e2d\u4f1a\u88ab\u8d4b\u503c\uff0c\u5b83\u63cf\u8ff0\u7684\u662f\u5408\u5e76\u540e\u7684\u65b0\u6bb5\u7684\u4fe1\u606f List readers\uff1a\u8be5\u5b57\u6bb5\u5728\u5f53\u524d\u9636\u6bb5\u662fnull\uff0c\u5728\u540e\u9762\u7684\u6d41\u7a0b\u4e2d\u4f1a\u88ab\u8d4b\u503c\uff0creaders\u4e2d\u7684\u6bcf\u4e00\u4e2aSegmentReader\u63cf\u8ff0\u7684\u662f\u67d0\u4e2a\u5f85\u5408\u5e76\u7684\u6bb5\u7684\u4fe1\u606f\uff0cSegmentReader\u7684\u4ecb\u7ecd\u53ef\u4ee5\u770bSegmentReader\u7cfb\u5217\u6587\u7ae0 List hardLiveDocs\uff1a\u8be5\u5b57\u6bb5\u5728\u5f53\u524d\u9636\u6bb5\u662fnull\uff0c\u5728\u540e\u9762\u7684\u6d41\u7a0b\u4e2d\u4f1a\u88ab\u8d4b\u503c\uff0chardLiveDocs\u4e2d\u7684\u6bcf\u4e00\u4e2aBits\u63cf\u8ff0\u7684\u662f\u67d0\u4e2a\u5f85\u5408\u5e76\u7684\u6bb5\u4e2d\u88ab\u6807\u8bb0\u4e3a\u5220\u9664\u7684\u6587\u6863\u53f7\u96c6\u5408 org.apache.lucene.index.ConcurrentMergeScheduler#merge \u4eceMergeSource\u6301\u6709\u7684indexWriter\u7684pendingMerges\u961f\u5217\u4e2d\u62c9\u53d6OneMerge\uff0c\u5305\u88c5\u4e3amerge\u7ebf\u7a0b\uff0c\u6267\u884c\u7ebf\u7a0b\uff0c\u66f4\u65b0pendingMerges while (true) { if (maybeStall(mergeSource) == false) { break; } //\u4ecependingMerges\u4e2d\u53d6\u51faOneMerge OneMerge merge = mergeSource.getNextMerge(); // \u4ecemergeSource\u4e2d\u7684OneMerge\u5305\u88c5\u4e3a\u4e00\u4e2aMerge\u7ebf\u7a0b final MergeThread newMergeThread = getMergeThread(mergeSource, merge); mergeThreads.add(newMergeThread); //\u66f4\u65b0\u9650\u6d41\u4fe1\u606f updateIOThrottle(newMergeThread.merge, newMergeThread.rateLimiter); // \u542f\u52a8merge \u7ebf\u7a0b\uff0c\u6267\u884c\u771f\u6b63\u7684merge\u64cd\u4f5c newMergeThread.start(); updateMergeThreads(); } // org.apache.lucene.index.IndexWriter#getNextMerge private synchronized MergePolicy.OneMerge getNextMerge() { if (pendingMerges.size() == 0) { return null; } else { // \u4ecependingMerges\u94fe\u8868\u4e2d\u53d6\u51fa\u7b2c\u4e00\u4e2aOneMerge\uff0c\u6dfb\u52a0\u5230runningMerges\u94fe\u8868\u4e2d MergePolicy.OneMerge merge = pendingMerges.removeFirst(); runningMerges.add(merge); return merge; } } // org.apache.lucene.index.ConcurrentMergeScheduler#updateMergeThreads protected synchronized void updateMergeThreads() { // Only look at threads that are alive & not in the // process of stopping (ie have an active merge): final List<MergeThread> activeMerges = new ArrayList<>(); //\u53d6\u51fa\u6240\u6709\u5f85\u5408\u5e76\u7ebf\u7a0b\uff0c\u5c06\u5176\u52a0\u5165\u5230\u6b63\u5728merge\u7684\u5217\u8868\u4e2d int threadIdx = 0; while (threadIdx < mergeThreads.size()) { final MergeThread mergeThread = mergeThreads.get(threadIdx); if (!mergeThread.isAlive()) { // Prune any dead threads mergeThreads.remove(threadIdx); continue; } activeMerges.add(mergeThread); threadIdx++; } // \u5bf9merge\u5217\u8868\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f,\u6700\u5927\u7684\u6bb5\u6392\u5728\u524d\u9762 /** public int compareTo(MergeThread other) { return Long.compare(other.merge.estimatedMergeBytes, merge.estimatedMergeBytes); } */ CollectionUtil.timSort(activeMerges); final int activeMergeCount = activeMerges.size(); //\u5927\u6bb5\u6570\u91cf\u5904\u7406\uff0c\u4e3a\u4e86\u9650\u6d41 int bigMergeCount = 0; for (threadIdx=activeMergeCount-1;threadIdx>=0;threadIdx--) { MergeThread mergeThread = activeMerges.get(threadIdx); // \u5927\u4e8eMIN_BIG_MERGE_MB = 50.0MB\u7684\u4e3a\u5927\u6bb5 if (mergeThread.merge.estimatedMergeBytes > MIN_BIG_MERGE_MB*1024*1024) { bigMergeCount = 1+threadIdx; break; } } for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) { MergeThread mergeThread = activeMerges.get(threadIdx); OneMerge merge = mergeThread.merge; // \u5982\u679c\u5f53\u524d\u7684merge\u7ebf\u7a0bid\u5c0f\u4e8e\u5927\u6bb5\u7684\u6570\u91cf-\u6700\u5927\u7ebf\u7a0b\u6570\uff0c\u5219\u6682\u505cmerge final boolean doPause = threadIdx < bigMergeCount - maxThreadCount; double newMBPerSec; //\u6682\u505c if (doPause) { newMBPerSec = 0.0; } else if (merge.maxNumSegments != -1) { newMBPerSec = forceMergeMBPerSec; } else if (doAutoIOThrottle == false) { newMBPerSec = Double.POSITIVE_INFINITY; } else if (merge.estimatedMergeBytes < MIN_BIG_MERGE_MB*1024*1024) { // \u5c0f\u6bb5\u4e0d\u9650\u6d41 newMBPerSec = Double.POSITIVE_INFINITY; } else { newMBPerSec = targetMBPerSec; } MergeRateLimiter rateLimiter = mergeThread.rateLimiter; double curMBPerSec = rateLimiter.getMBPerSec(); rateLimiter.setMBPerSec(newMBPerSec); } } //merge final MergePolicy mergePolicy = config.getMergePolicy(); /** merge\u521d\u59cb\u5316\uff0c 1.\u5c06\u5220\u9664\u6587\u6863\u5199\u5165\u786c\u76d8; 2.\u751f\u6210SegmentCommitInfo\u4ee5\u53ca\u8bca\u65ad\u4fe1\u606f\uff0cMergePolicy.OneMerge.setMergeInfo(SegmentCommitInfo\uff09 */ mergeInit(merge); //\u771f\u6b63\u7684merge\u64cd\u4f5c\uff0c\u8017\u65f6\u64cd\u4f5c\uff0c\u4f46\u4e0d\u6301\u6709IW\u7684\u9501 mergeMiddle(merge, mergePolicy); //\u6b64\u7248\u672c\u6ca1\u6709\u64cd\u4f5c mergeSuccess(merge); //merge\u5b8c\u6210\uff0c\u5524\u9192\u5176\u4ed6\u7ebf\u7a0b\uff0c\u4ecerunningMerges\u5220\u9664\u5df2\u5b8c\u6210\u7684OneMerge mergeFinish(merge); //\u66f4\u65b0pendingMerges\u94fe\u8868 updatePendingMerges(mergePolicy, MergeTrigger.MERGE_FINISHED, merge.maxNumSegments); ------------------------------------------------------------------------- // merge middle private int mergeMiddle(MergePolicy.OneMerge merge, MergePolicy mergePolicy) throws IOException { final SegmentMerger merger = new SegmentMerger(mergeReaders, merge.info.info, infoStream, dirWrapper, globalFieldNumberMap, context); merge.info.setSoftDelCount(Math.toIntExact(softDeleteCount.get())); merge.checkAborted(); merge.mergeStartNS = System.nanoTime(); // This is where all the work happens: if (merger.shouldMerge()) { merger.merge(); } MergeState mergeState = merger.mergeState; assert mergeState.segmentInfo == merge.info.info; merge.info.info.setFiles(new HashSet<>(dirWrapper.getCreatedFiles())); Codec codec = config.getCodec(); // Very important to do this before opening the reader // because codec must know if prox was written for // this segment: boolean useCompoundFile; synchronized (this) { // Guard segmentInfos useCompoundFile = mergePolicy.useCompoundFile(segmentInfos, merge.info, this); } // \u4e3atrue\uff0c\u5219\u521b\u5efa\u590d\u5408\u6587\u4ef6 if (useCompoundFile) { createCompoundFile(infoStream, trackingCFSDir, merge.info.info, context, this::deleteNewFiles); } } ------------------------------------------------------------------------- org.apache.lucene.index.SegmentMerger#merge \u6bb5\u5408\u5e76\u5668\u6267\u884c\u771f\u6b63\u7684merge 1\u3001\u5408\u5e76\u57df\u4fe1\u606f\uff1amergeFieldInfos 2\u3001\u5408\u5e76\u57df\uff1amergeFields() 3\u3001\u5408\u5e76\u6807\u51c6\u5316\u56e0\u5b50\uff1amergeNorms() 4\u3001\u5408\u5e76Points\uff1amergePoints() 5\u3001\u5408\u5e76\u8bcd\u5178\u548c\u5012\u6392\u8868\uff1amergeTerms() 6\u3001\u5408\u5e76docValues\uff1amergeDocValues\uff08\uff09 7\u3001\u5408\u5e76\u8bcd\u5411\u91cf\uff1amergeVectors() MergeState merge() throws IOException { mergeFieldInfos(); int numMerged = mergeFields(); final SegmentWriteState segmentWriteState = new SegmentWriteState(mergeState.infoStream, directory, mergeState.segmentInfo, mergeState.mergeFieldInfos, null, context); final SegmentReadState segmentReadState = new SegmentReadState(directory, mergeState.segmentInfo, mergeState.mergeFieldInfos, IOContext.READ, segmentWriteState.segmentSuffix); if (mergeState.mergeFieldInfos.hasNorms()) { mergeNorms(segmentWriteState); } try (NormsProducer norms = mergeState.mergeFieldInfos.hasNorms() ? codec.normsFormat().normsProducer(segmentReadState) : null) { NormsProducer normsMergeInstance = null; if (norms != null) { // Use the merge instance in order to reuse the same IndexInput for all terms normsMergeInstance = norms.getMergeInstance(); } mergeTerms(segmentWriteState, normsMergeInstance); } if (mergeState.mergeFieldInfos.hasDocValues()) { mergeDocValues(segmentWriteState); } if (mergeState.mergeFieldInfos.hasPointValues()) { mergePoints(segmentWriteState); } if (mergeState.mergeFieldInfos.hasVectors()) { numMerged = mergeVectors(); } // write the merged infos if (mergeState.infoStream.isEnabled(\"SM\")) { t0 = System.nanoTime(); } codec.fieldInfosFormat().write(directory, mergeState.segmentInfo, \"\", mergeState.mergeFieldInfos, context); } 5\u3001merge\u4f18\u5316\u573a\u666f 1\u3001\u5bf9\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u4e0d\u9ad8\u7684\u573a\u666f\uff0c\u53ef\u4ee5\u589e\u52a0elasticsearch refresh\u95f4\u9694\uff0c\u51cf\u5c11\u843d\u6bb5\u7684\u9891\u7387\uff0c\u51cf\u5c11IO\u64cd\u4f5c 2\u3001\u8c03\u5927indices.memory.index_buffer_size\uff08\u9ed8\u8ba410%\uff09\uff0cLucene \u7f13\u51b2\u533aramBufferSizeMB\u9ed8\u8ba4\u4e3a16MB 3\u3001\u6839\u636e\u4e1a\u52a1\u9700\u6c42\uff0c\u9002\u5f53\u8c03\u6574\u6bcf\u5c42\u6bb5\u6570\u3001\u5141\u8bb8\u5408\u5e76\u6700\u5927\u6bb5\u5927\u5c0f 4\u3001\u5f53index\u4e0d\u518d\u6709\u5199\u5165\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5efa\u8bae\u5bf9\u5176\u8fdb\u884cforce merge\uff1a\u63d0\u5347\u67e5\u8be2\u901f\u5ea6\u3001\u51cf\u5c11\u5185\u5b58\u5f00\u9500\uff0c\u4f8b\u5982\uff1a\u4f7f\u7528\u4f4e\u5cf0\u5b9a\u65f6merge","title":"Lucene Segment Merge\u539f\u7406\u53ca\u6e90\u7801\u5206\u6790"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#1segment-merge","text":"\u5728lucene\u4e2d\u5355\u4e2a\u5012\u6392\u7d22\u5f15\u6587\u4ef6\u88ab\u79f0\u4e3aSegment\u3002Segment \u5177\u6709\u4e0d\u53ef\u53d8\u6027\uff0c\u591a\u4e2a Segments \u6c47\u603b\u5728\u4e00\u8d77\uff0c\u79f0\u4e3a Lucene \u7684Index\uff0c\u5176\u5bf9\u5e94\u7684\u5c31\u662f ES \u4e2d\u7684 Shard\u3002\u4e00\u4e2a\u5927segment\u7684merge\u64cd\u4f5c\u662f\u5f88\u6d88\u8017CPU\u3001IO\u8d44\u6e90\u7684\uff0c\u5982\u679c\u4f7f\u7528\u4e0d\u5f53\u4f1a\u5f71\u54cd\u5230\u672c\u8eab\u7684serach\u67e5\u8be2\u6027\u80fd\u3002es\u9ed8\u8ba4\u4f1a\u63a7\u5236merge\u8fdb\u7a0b\u7684\u8d44\u6e90\u5360\u7528\u4ee5\u4fdd\u8bc1merge\u671f\u95f4search\u5177\u6709\u8db3\u591f\u8d44\u6e90\u3002 \u4e00\u4e2aIndex\u4f1a\u7531\u4e00\u4e2a\u6216\u591a\u4e2asub-index\u6784\u6210\uff0csub-index\u88ab\u79f0\u4e3aSegment\u3002Lucene\u7684Segment\u8bbe\u8ba1\u601d\u60f3\uff0c\u4e0eLSM\u7c7b\u4f3c\u4f46\u53c8\u6709\u4e9b\u4e0d\u540c\uff0c\u7ee7\u627f\u4e86LSM\u4e2d\u6570\u636e\u5199\u5165\u7684\u4f18\u70b9\uff0c\u4f46\u662f\u5728\u67e5\u8be2\u4e0a\u53ea\u80fd\u63d0\u4f9b\u8fd1\u5b9e\u65f6\u800c\u975e\u5b9e\u65f6\u67e5\u8be2\u3002 Lucene\u4e2d\u7684\u6570\u636e\u5199\u5165\u4f1a\u5148\u5199\u5185\u5b58\u7684\u4e00\u4e2aBuffer\uff08 \u53ea\u80fd\u5199\uff0c\u4e0d\u80fd\u8bfb \uff09\uff0c\u5f53Buffer\u5185\u6570\u636e\u5230\u4e00\u5b9a\u91cf\u540e\u4f1a\u88abflush\u6210\u4e00\u4e2aSegment\uff0c\u6bcf\u4e2aSegment\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u7d22\u5f15\uff0c \u53ef\u72ec\u7acb\u88ab\u67e5\u8be2 \uff0c\u4f46\u6570\u636e\u6c38\u8fdc \u4e0d\u80fd\u88ab\u66f4\u6539 \uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48Lucene\u88ab\u79f0\u4e3a\u63d0\u4f9b \u8fd1\u5b9e\u65f6\u800c\u975e\u5b9e\u65f6\u67e5\u8be2 \u7684\u539f\u56e0\u3002Segment\u4e2d\u5199\u5165\u7684\u6587\u6863\u4e0d\u53ef\u88ab\u4fee\u6539\uff0c\u4f46\u53ef\u88ab\u5220\u9664\u3002Index\u7684\u67e5\u8be2\u9700\u8981\u5bf9\u4e00\u4e2a\u6216\u8005\u591a\u4e2aSegment\u8fdb\u884c\u67e5\u8be2\uff0c\u5e76\u5bf9\u7ed3\u679c\u8fdb\u884c\u5408\u5e76\uff0c\u8fd8\u9700\u8981\u5904\u7406\u88ab\u5220\u9664\u7684\u6587\u6863\uff0c\u4e3a\u4e86\u5bf9\u67e5\u8be2\u8fdb\u884c\u4f18\u5316\uff0cLucene\u4f1a\u91c7\u7528\u6bb5\u5408\u5e76\u7b56\u7565\u5bf9\u591a\u4e2aSegment\u8fdb\u884c\u5408\u5e76\u3002","title":"1\u3001SEGMENT merge\uff08\u6bb5\u5408\u5e76\uff09\u6982\u8ff0"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#_1","text":"\u65b0\u589e\u3002\u5f53\u6709\u65b0\u7684\u6570\u636e\u9700\u8981\u521b\u5efa\u7d22\u5f15\u65f6\uff0c\u7531\u4e8e\u6bb5\u7684\u4e0d\u53d8\u6027\uff0c\u6240\u4ee5\u9009\u62e9\u65b0\u5efa\u4e00\u4e2a\u6bb5\u6765\u5b58\u50a8\u65b0\u589e\u7684\u6570\u636e\u3002 \u5220\u9664\u3002\u5f53\u9700\u8981\u5220\u9664\u6570\u636e\u65f6\uff0c\u7531\u4e8e\u6570\u636e\u6240\u5728\u7684\u6bb5\u53ea\u53ef\u8bfb\uff0c\u4e0d\u53ef\u5199\uff0c\u6240\u4ee5Lucene\u5728\u7d22\u5f15\u6587\u4ef6\u4e0b\u65b0\u589e\u4e86\u4e00\u4e2a.del\u7684\u6587\u4ef6\uff0c\u7528\u6765\u4e13\u95e8\u5b58\u50a8\u88ab\u5220\u9664\u7684\u6570\u636eid\u3002\u5f53\u67e5\u8be2\u65f6\uff0c\u88ab\u5220\u9664\u7684\u6570\u636e\u8fd8\u662f\u53ef\u4ee5\u88ab\u67e5\u5230\u7684\uff0c\u53ea\u662f\u5728\u8fdb\u884c\u6587\u6863\u94fe\u8868\u5408\u5e76\u65f6\uff0c\u624d\u628a\u5df2\u7ecf\u5220\u9664\u7684\u6570\u636e\u8fc7\u6ee4\u6389\u3002\u88ab\u5220\u9664\u7684\u6570\u636e\u5728\u8fdb\u884c\u6bb5\u5408\u5e76\u65f6\u624d\u4f1a\u771f\u6b63\u88ab\u79fb\u9664\u3002 \u66f4\u65b0\u3002\u66f4\u65b0\u7684\u64cd\u4f5c\u5176\u5b9e\u5c31\u662f\u5220\u9664\u548c\u65b0\u589e\u7684\u7ec4\u5408\uff0c\u5148\u5728.del\u6587\u4ef6\u4e2d\u8bb0\u5f55\u65e7\u6570\u636e\uff0c\u518d\u5728\u65b0\u6bb5\u4e2d\u6dfb\u52a0\u4e00\u6761\u66f4\u65b0\u540e\u7684\u6570\u636e\u3002","title":"\u5728\u5206\u6bb5\u601d\u60f3\u4e0b\uff0c\u5bf9\u6570\u636e\u7684\u5199\u64cd\u4f5c\u5982\u4e0b\uff1a"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#merge","text":"/** * segment flush. */ SEGMENT_FLUSH, /** * commit, NRT reader reopen or a close call on the index writer. */ FULL_FLUSH, /** * \u663e\u5f0f\u89e6\u53d1 */ EXPLICIT, /** * \u5408\u5e76\u7ed3\u675f */ MERGE_FINISHED, /** * IndexWriter\u5173\u95ed\u65f6. */ CLOSING, /** * commit. */ COMMIT, /** * \u6253\u5f00NRT readers\uff0c8\u4ee5\u540e\u589e\u52a0. */ GET_READER","title":"Merge\u7684\u89e6\u53d1\u5668"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#3merge","text":"","title":"3\u3001merge\u6d41\u7a0b"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#_2","text":"","title":"\u6267\u884c\u6bb5\u5408\u5e76\u6d41\u7a0b\u56fe"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#4merge","text":"\u6bb5\u5408\u5e76\u53ef\u89c6\u5316\u8fc7\u7a0b:https://blog.mikemccandless.com/2011/02/visualizing-lucenes-segment-merges.html LogMergePolicy\uff08Lucene4 \u4e4b\u524d\u9ed8\u8ba4\uff09\u603b\u662f\u5408\u5e76\u76f8\u90bb\u7684\u6bb5\u6587\u4ef6\uff0c\u5408\u5e76\u76f8\u90bb\u7684\u6bb5\u6587\u4ef6\uff08Adjacent Segment\uff09\u63cf\u8ff0\u7684\u662f\u5bf9\u4e8eIndexWriter\u63d0\u4f9b\u7684\u6bb5\u96c6\uff0cLogMergePolicy\u4f1a\u9009\u53d6\u8fde\u7eed\u7684\u90e8\u5206(\u6216\u5168\u90e8)\u6bb5\u96c6\u533a\u95f4\u6765\u751f\u6210\u4e00\u4e2a\u5f85\u5408\u5e76\u6bb5\u96c6 TieredMergePolicy\uff08Lucene4\u4ee5\u540e\u9ed8\u8ba4\uff09\u4e2d\u4f1a\u5148\u5bf9IndexWriter\u63d0\u4f9b\u7684\u6bb5\u96c6\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5728\u6392\u5e8f\u540e\u7684\u6bb5\u96c6\u4e2d\u9009\u53d6\u90e8\u5206\uff08\u53ef\u80fd\u4e0d\u8fde\u7eed\uff09\u6bb5\u6765\u751f\u6210\u4e00\u4e2a\u5f85\u5408\u5e76\u6bb5\u96c6\uff0c\u5373\u975e\u76f8\u90bb\u7684\u6bb5\u6587\u4ef6\uff08Non-adjacent Segment\uff09\u3002 \u5982\u679c\u7528\u4e00\u53e5\u8bdd\u6765\u63cf\u8ff0\u5408\u5e76\u7b56\u7565TieredMergePolicy\u7684\u7279\u70b9\u7684\u8bdd\uff0c\u90a3\u5c31\u662f\uff1a\u627e\u51fa\u5927\u5c0f\u63a5\u8fd1\u4e14\u6700\u4f18\u7684\u6bb5\u96c6\u3002 \u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecdTieredMergePolicy","title":"4\u3001merge\u7b56\u7565"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#_3","text":"\u5f53IndexWriter\u5bf9\u7d22\u5f15\u6709\u4efb\u610f\u7684\u66f4\u6539\u90fd\u4f1a\u8c03\u7528\u5408\u5e76\u7b56\u7565\u3002","title":"\u5f00\u59cb\uff1a"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#_4","text":"IndexWriter\u63d0\u4f9b\u6bb5\u96c6\u7ed9\u5408\u5e76\u7b56\u7565","title":"\u6bb5\u96c6\uff1a"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#_5","text":"\u9884\u5904\u7406\u7684\u8fc7\u7a0b\u5206\u4e3a4\u4e2a\u6b65\u9aa4\uff0c\u5206\u522b\u662f\u6392\u5e8f\u3001\u8fc7\u6ee4\u6b63\u5728\u5408\u5e76\u7684\u6bb5\u3001\u8fc7\u6ee4\u5927\u6bb5\u3001\u8ba1\u7b97\u7d22\u5f15\u6700\u5927\u5141\u8bb8\u6bb5\u7684\u4e2a\u6570\u3002 \u6392\u5e8f \u7b97\u6cd5\u4e3aTimSort\uff1a\u6392\u5e8f\u89c4\u5219\u4e3a\u6bd4\u8f83\u6bcf\u4e2a\u6bb5\u4e2d\u7d22\u5f15\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u4e0d\u5305\u62ec\u88ab\u5220\u9664\u7684\u6587\u6863\u7684\u7d22\u5f15\u4fe1\u606f\uff0c\u5927\u6bb5\u6392\u524d\u3002 \u8fc7\u6ee4\u6b63\u5728\u5408\u5e76\u7684\u6bb5 \uff1a\u5f53IndexWriter\u83b7\u5f97\u4e00\u4e2aoneMerge\u540e\uff0c\u4f1a\u4f7f\u7528\u540e\u53f0\u7ebf\u7a0b\u5bf9oneMerge\u4e2d\u7684\u6bb5\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u8fd9\u65f6\u5019\u7d22\u5f15\u518d\u6b21\u53d1\u751f\u66f4\u6539\u65f6\uff0cIndexWriter\u4f1a\u518d\u6b21\u8c03\u7528TieredMergePolicy\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u67d0\u4e9b\u5df2\u7ecf\u6b63\u5728\u5408\u5e76\u7684\u6bb5\u88ab\u5904\u7406\u4e3a\u4e00\u4e2a\u65b0\u7684oneMerge\uff0c \u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u5408\u5e76\uff0c\u9700\u8981\u8fc7\u6ee4\u90a3\u4e9b\u6b63\u5728\u5408\u5e76\u4e2d\u7684\u6bb5 \u3002\u540e\u53f0\u5408\u5e76\u7684\u7ebf\u7a0b\u4f1a\u5c06\u6b63\u5728\u5408\u5e76\u7684\u6bb5\u6dfb\u52a0\u5230Set\u5bf9\u8c61\u4e2d\uff0c\u5728IndexWriter\u8c03\u7528\u5408\u5e76\u7b56\u7565\u65f6\u4f20\u5165\u3002 \u8fc7\u6ee4\u5927\u6bb5(Large Segment) \uff1a \u5927\u6bb5\u7684\u5b9a\u4e49\uff1a\u8be5\u6bb5\u7684SegmentSize \u2265 (maxMergedSegmentBytes / 2) \u5e76\u4e14\u6ee1\u8db3 \u6bb5\u96c6\u4e2d\u7684\u88ab\u5220\u9664\u6587\u6863\u7684\u7d22\u5f15\u4fe1\u606f\u5927\u5c0f\u5360\u603b\u7d22\u5f15\u6587\u4ef6\u5927\u5c0f\u7684\u6bd4\u4f8btotalDelPct \u2264 deletesPctAllowed \u6216 \u8be5\u6bb5\u4e2d\u88ab\u5220\u9664\u6587\u6863\u7684\u7d22\u5f15\u4fe1\u606f\u5927\u5c0f\u5360\u6bb5\u4e2d\u7d22\u5f15\u6587\u4ef6\u5927\u5c0f\u7684\u6bd4\u4f8bsegDelPct \u2264 deletesPctAllowed \u8ba1\u7b97\u7d22\u5f15\u6700\u5927\u5141\u8bb8\u6bb5\u7684\u4e2a\u6570 \uff1aallowedSegCount\uff1a\u8be5\u503c\u63cf\u8ff0\u4e86\u6bb5\u96c6\u5185\u6bcf\u4e2a\u6bb5\u7684\u5927\u5c0fSegmentSize\u662f\u5426\u6bd4\u8f83\u63a5\u8fd1(segments of approximately equal size)\uff0c\u6839\u636e\u5f53\u524d\u7d22\u5f15\u5927\u5c0f\u6765\u4f30\u7b97\u5f53\u524d\u7d22\u5f15\u4e2d\"\u5e94\u8be5\"\u6709\u591a\u5c11\u4e2a\u6bb5\uff0c\u5982\u679c\u5b9e\u9645\u7684\u6bb5\u4e2a\u6570\u5c0f\u4e8e\u4f30\u7b97\u503c\uff0c\u90a3\u4e48\u8bf4\u660e\u7d22\u5f15\u4e2d\u7684\u6bb5\u4e0d\u6ee1\u8db3\u5dee\u4e0d\u591a\u90fd\u76f8\u540c\uff08approximately equal size\uff09\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u9009\u51faOneMerge","title":"\u9884\u5904\u7406\uff1a"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#onemerge","text":"\u5982\u679c\u540c\u65f6\u6ee1\u8db3\u4e0b\u9762\u4e09\u4e2a\u6761\u4ef6\uff0c\u90a3\u4e48\u8bf4\u660e\u6bb5\u96c6\u4e2d\u53ef\u4ee5\u5f97\u5230OneMerge\uff1a MergeType\uff1a\u5408\u5e76\u7c7b\u578b\uff0c\u5373\u4e0a\u6587\u4e2d\u7684MERGE_TYPE\uff0c\u5fc5\u987b\u662fNATURAL\u7c7b\u578b SegmentNumber\uff1a\u6bb5\u96c6\u4e2d\u6bb5\u7684\u4e2a\u6570\uff0c\u5982\u679cSegmentNumber \u2264 allowedSegCount remainingDelCount\uff1a\u5269\u4f59\u6bb5\u96c6\u4e2d\u88ab\u5220\u9664\u6587\u6863\u7684\u603b\u6570\uff0c\u5982\u679cremainingDelCount \u2264 allowedDelCount","title":"\u6bb5\u96c6\u4e2d\u53ef\u4ee5\u5f97\u5230OneMerge"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#onemerge_1","text":"\u987a\u5e8f\u904d\u5386\u6bb5\u96c6\uff0c\u5148\u9884\u5224\u4e0b\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u6bb5\u540e\uff0cOneMerge\u7684\u5927\u5c0f\u662f\u5426\u4f1a\u8d85\u8fc7maxMergedSegmentBytes\uff0c\u5982\u679c\u8d85\u8fc7\uff0c\u90a3\u4e48\u5c31\u8df3\u8fc7\u8fd9\u4e2a\u6bb5\uff0c\u7ee7\u7eed\u6dfb\u52a0\u4e0b\u4e00\u4e2a\u6bb5\uff0c\u76ee\u7684\u662f\u4f7f\u8fd9\u4e2aOneMerge\u7684\u5927\u5c0f\u5c3d\u91cf\u63a5\u8fd1maxMergedSegmentBytes\uff0c\u56e0\u4e3a\u6bb5\u96c6\u4e2d\u7684\u6bb5\u662f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u7684\uff0c\u5f53\u524d\u524d\u63d0\u662fOneMerge\u4e2d\u6bb5\u7684\u4e2a\u6570\u4e0d\u80fd\u8d85\u8fc7mergeFactor\u3002","title":"\u627e\u51fa\u4e00\u4e2aOneMerge"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#_6","text":"\u4ece\u6bb51\u5f00\u59cb\uff0c\u9010\u4e2a\u6dfb\u52a0\u5230OneMerge\u4e2d\uff0c\u5f53\u904d\u5386\u5230\u6bb55\u65f6\u53d1\u73b0\uff0c\u5982\u679c\u6dfb\u52a0\u6bb55\uff0c\u90a3\u4e48OneMerge\u7684\u5927\u5c0f\uff0c\u537319 (\u6bb51) + 18 (\u6bb52)+ 16 (\u6bb53) + 15 (\u6bb54) + 15 (\u6bb55) = 83\uff0c\u8be5\u503c\u5927\u4e8e maxMergedSegmentBytes (80)\uff0c\u90a3\u4e48\u8fd9\u65f6\u5019\u9700\u8981\u8df3\u8fc7\u6bb55\uff0c\u5f80\u540e\u7ee7\u7eed\u627e\uff0c\u540c\u7406\u6bb56\u3001\u6bb57\u90fd\u4e0d\u884c\uff0c\u76f4\u5230\u904d\u5386\u5230\u6bb58\uff0cOneMerge\u7684\u5927\u5c0f\u4e3a19 (\u6bb51) + 18 (\u6bb52)+ 16 (\u6bb53) + 15 (\u6bb54) + 7 (\u6bb58) = 75\uff0c\u90a3\u4e48\u53ef\u4ee5\u5c06\u6bb58\u6dfb\u52a0\u5230OneMerge\u4e2d\uff0c\u5c3d\u7ba1\u6bb59\u6dfb\u52a0\u5230OneMerge\u4ee5\u540e\uff0cOneMerge\u7684\u5927\u5c0f\u4e3a 19 (\u6bb51) + 18 (\u6bb52)+ 16 (\u6bb53) + 15 (\u6bb54) + 7 (\u6bb58) + 4 (\u6bb59) = 79\uff0c\u8fd8\u662f\u5c0f\u4e8emaxMergedSegmentBytes (80)\uff0c\u4f46\u662f\u7531\u4e8eOneMerge\u4e2d\u6bb5\u7684\u4e2a\u6570\u4f1a\u8d85\u8fc7mergeFactor (5)\uff0c\u6240\u4ee5\u4e0d\u80fd\u6dfb\u52a0\u5230OneMerge\u4e2d\uff0c\u5e76\u4e14\u505c\u6b62\u904d\u5386","title":"\u4e3e\u4e2a\u6817\u5b50\u5427"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#onemerge_2","text":"\u6253\u5206\u516c\u5f0f\u4e3a\uff1a \uff0cmergeScore\u8d8a\u5c0f\u8d8a\u597d\uff08smaller mergeScore is better)\u3002 skew\uff1a\u7c97\u7565\u7684\u8ba1\u7b97OneMerge\u7684\u504f\u659c\u503c(Roughly measure \"skew\" of the merge)\uff0c\u8861\u91cfOneMerge\u4e2d\u6bb5\u4e4b\u95f4\u5927\u5c0f\u7684\u662f\u5426\u90fd\u5dee\u4e0d\u591a\u76f8\u540c\uff0c\u5982\u679cOneMerge\u4e2d\u6bb5\u7684\u5927\u5c0f\u63a5\u8fd1maxMergedSegmentBytes\uff0c\u5373hitTooLarge\u4e3atrue\uff0c\u90a3\u4e48 \uff0c\u5426\u5219 \uff0c, \u5176\u4e2dMaxSegment\u4e3aOneMerge\u4e2d\u6700\u5927\u7684\u6bb5\u7684\u5927\u5c0f\uff0cSegmentSize\u4e3a\u6bcf\u4e00\u4e2a\u6bb5\u7684\u5927\u5c0f\uff0cmaxMergedSegmentBytes\u5728\u4e0a\u6587\u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u3002 totAfterMergeBytes\uff1a\u8be5\u503c\u662fOneMerge\u4e2d\u6240\u6709\u6bb5\u7684\u5927\u5c0f\uff0c\u8fd9\u4e2a\u53c2\u6570\u63cf\u8ff0\u4e86\u6bb5\u5408\u5e76\u6bd4\u8f83\u503e\u5411\u4e8e(Gently favor )\u8f83\u5c0f\u7684OneMerge nonDelRatio\uff1a\u8be5\u503c\u63cf\u8ff0\u4e86OneMerge\u4e2d\u6240\u6709\u6bb5\u5305\u542b\u88ab\u5220\u9664\u6587\u6863\u6bd4\u4f8b\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8be6\u7ec6\u7ed9\u51fa\u8ba1\u7b97\u516c\u5f0f\u4e86\uff0cnonDelRatio\u8d8a\u5c0f\u8bf4\u660eOneMerge\u4e2d\u5305\u542b\u66f4\u591a\u7684\u88ab\u5220\u9664\u7684\u6587\u6863\uff0c\u8be5\u503c\u76f8\u6bd4\u8f83totAfterMergeBytes\uff0c\u5bf9\u603b\u4f53\u6253\u5206\u5f71\u54cd\u5ea6\u66f4\u5927\uff0c\u56e0\u4e3a\u6bb5\u5408\u5e76\u7684\u4e00\u4e2a\u91cd\u8981\u76ee\u7684\u5c31\u662f\u53bb\u9664\u88ab\u5220\u9664\u7684\u6587\u6863(Strongly favor merges that reclaim deletes) \u6700\u7ec8\u6253\u5206\u516c\u5f0f\uff1a","title":"\u5bf9\u4e0a\u9762\u627e\u5230\u7684OneMerge\u6253\u5206"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#onemerge_3","text":"\u5f53\u524d\u5c42\u4e2d\u53ea\u5141\u8bb8\u9009\u51fa\u4e00\u4e2aOneMerge\uff0c\u5373mergeScore\u6700\u4f4e\u7684OneMerge\u3002","title":"\u66ff\u6362\u6b21\u6709OneMerge"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#onemerge_4","text":"\u904d\u5386\u7684\u5bf9\u8c61\u662f \u6bb51~\u6bb512\uff0c\u5e76\u4e14\u9009\u51fa\u4e86\u4e00\u4e2aOneMerge\uff0c\u63a5\u7740\u6211\u4eec\u9700\u8981\u518d\u6b21\u4ece \u6bb52~\u6bb512 \u4e2d\u9009\u51fa\u4e00\u4e2aOneMerge\u540e\uff0c\u518d\u4ece\u6bb53~\u6bb512\u4e2d\u518d\u627e\u51fa\u4e00\u4e2aOneMerge\uff0c\u5982\u6b64\u5f80\u590d\u76f4\u5230\u627e\u4e0d\u5230\u65b0\u7684OneMerge bestScore != null && hitTooLarge == false && SegmentNum < mergeFactor bestScore != null\uff1abestScore\u5982\u679c\u4e3a\u7a7a\uff0c\u8bf4\u660e\u5f53\u524d\u8fd8\u6ca1\u6709\u4ea7\u751f\u4efb\u4f55\u7684OneMerge\uff0c\u90a3\u4e48\u80af\u5b9a\u4f1a\u751f\u6210\u4e00\u4e2aOneMerge hitTooLarge == false\uff1a\u5982\u679cbestScore\u4e0d\u4e3a\u7a7a\uff0chitTooLarge\u4e3atrue\uff0c\u4e5f\u8981\u751f\u6210\u4e00\u4e2aOneMerge\u3002 \u5269\u4f59\u6bb5\u96c6\u4e2a\u6570\uff1abestScore\u4e0d\u4e3a\u7a7a\uff0chitTooLarge\u4e3afalse\uff0c\u5982\u679c\u5269\u4f59\u6bb5\u96c6\u4e2a\u6570SegmentNum\u5c0f\u4e8emergeFactor\u5c31\u4e0d\u5141\u8bb8\u751f\u6210\u4e00\u4e2aOneMerge","title":"\u6ca1\u6709\u65b0\u7684OneMerge"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#onemerge_5","text":"\u5c42\u5185\u53ea\u80fd\u9009\u51fa\u4e00\u4e2aOneMerge\uff0c\u90a3\u4e48\u4ece\u6bb5\u96c6\u4e2d\u5254\u9664\u6700\u4f18\uff0c\u5373\u6253\u5206\u6700\u4f4e\u7684OneMerge\u4e2d\u5305\u542b\u7684\u6bb5\uff0c\u65b0\u7684\u6bb5\u96c6\u4f5c\u4e3a\u65b0\u7684\u4e00\u5c42\u7ee7\u7eed\u5904\u7406\u3002\u5047\u5982\u5f53\u524d\u5c42\u5185\u6700\u4f18\u7684OneMerge\u662f\u4ece\u6bb53~\u6bb512\u4e2d\u9009\u51fa\u7684\uff0c\u90a3\u4e48\u4e0b\u4e00\u5c42\u7684\u53ef\u5904\u7406\u7684\u6bb5\u96c6\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"\u6bb5\u96c6\u4e2d\u5254\u9664\u6700\u4f18OneMerge\u5305\u542b\u7684\u6bb5"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#5talk-is-cheap-show-me-the-code","text":"\u4e2d\u95f4\u4e0d\u91cd\u8981\u4ee3\u7801\u5df2\u7ecf\u5220\u9664","title":"5\u3001talk is cheap, show me the code"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#1","text":"IndexWriter\u5728\u6dfb\u52a0\u6587\u6863\u7684\u65f6\u5019\u8c03\u7528\u51fd\u6570addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs)\uff0c\u5305\u542b\u5982\u4e0b\u6b65\u9aa4\uff1a org.apache.lucene.index.IndexWriter#addDocuments org.apache.lucene.index.DocumentsWriter#updateDocuments //\u8fd4\u56de\u4e3a\u8d1f\u6570\uff0c\u89e6\u53d1maybeMerge org.apache.lucene.index.DocumentsWriter#updateDocuments org.apache.lucene.index.DocumentsWriterFlushControl#doAfterDocument org.apache.lucene.index.IndexWriter#maybeProcessEvents org.apache.lucene.index.IndexWriter#processEvents org.apache.lucene.index.IndexWriter#maybeMerge //merge\u6d41\u7a0b \u5f53\u7f13\u5b58flush\u5230\u78c1\u76d8\uff0c\u5f62\u6210\u4e86\u65b0\u7684\u6bb5\u540e\uff0c\u5c31\u6709\u53ef\u80fd\u89e6\u53d1\u4e00\u6b21\u6bb5\u5408\u5e76\uff0c\u6240\u4ee5\u8c03\u7528maybeMerge() maxBufferedDocs :\u7f13\u51b2\u533a\u6700\u5927\u6587\u6863\u6570\uff0c\u9ed8\u8ba4\u4e3a-1(\u5173\u95ed)\uff1b\u53ef\u8c03\u7528indexWriterConfig.setMaxBufferedDocs(int maxBufferedDocs)\u8bbe\u5b9a\u3002 ramBufferSizeMB:\u5185\u5b58\u7f13\u51b2\u533a\u5927\u5c0f\uff0c\u9ed8\u8ba416MB\uff0c\u9ed8\u8ba4\u6309\u7167\u7f13\u51b2\u533a\u5927\u5c0fflush\u3002\u53ef\u4ee5\u8c03\u7528IndexWriter.setRAMBufferSizeMB(double mb)\u8bbe\u5b9a\u3002 private final void maybeMerge(MergePolicy mergePolicy, MergeTrigger trigger, int maxNumSegments) throws IOException { ensureOpen(false); //updatePendingMerges \u6821\u9a8c\u6bb5\u96c6\u662f\u5426\u7b26\u5408merge\u6761\u4ef6\uff0c\u5982\u679c\u7b26\u5408\uff0c\u5219\u8fd4\u56de\u7b26\u5408\u6761\u4ef6\u7684MergePolicy.MergeSpecification\uff08\u8bb0\u5f55\u5f85\u5408\u5e76\u7684\u6bb5\u96c6OneMerge\uff09\uff0c\u5c06\u6bb5\u96c6\u653e\u5165pendingMerges if (updatePendingMerges(mergePolicy, trigger, maxNumSegments) != null) { executeMerge(trigger); } }","title":"1&gt;\u5c06\u7f13\u5b58\u5199\u5165\u5230\u6bb5"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#orgapacheluceneindexindexwriterupdatependingmerges","text":"merge\u7b56\u7565\u5728\u6b64\u5904\u9700\u8981\u627e\u5230\u7b26\u5408\u7b56\u7565\u7684\u6bb5\u96c6 \uff0c\u5e76\u4e14\u5c06\u6bb5\u96c6\u52a0\u5165\u5230pendingMerges\u961f\u5217 final MergePolicy.MergeSpecification spec; if (maxNumSegments != UNBOUNDED_MAX_MERGE_SEGMENTS) { // \u663e\u5f0f\u6216\u8005merge\u5b8c\u6210\u540e\u518d\u6b21\u8c03\u7528\u8d70\u6b64\u6d41\u7a0b assert trigger == MergeTrigger.EXPLICIT || trigger == MergeTrigger.MERGE_FINISHED : \"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: \" + trigger.name(); spec = mergePolicy.findForcedMerges(segmentInfos, maxNumSegments, Collections.unmodifiableMap(segmentsToMerge), this); if (spec != null) { final int numMerges = spec.merges.size(); for(int i=0;i<numMerges;i++) { final MergePolicy.OneMerge merge = spec.merges.get(i); merge.maxNumSegments = maxNumSegments; } } } else { // \u83b7\u53d6NRT reader \uff0ccommit\uff0csegment_flush\uff0cfull_flush\u8d70\u6b21\u903b\u8f91 switch (trigger) { case GET_READER: case COMMIT: spec = mergePolicy.findFullFlushMerges(trigger, segmentInfos, this); break; default: spec = mergePolicy.findMerges(trigger, segmentInfos, this); } } if (spec != null) { final int numMerges = spec.merges.size(); for(int i=0;i<numMerges;i++) { // \u6ce8\u518cmerge\uff0c\u6bcf\u6b21\u8fdb\u5165\u6b64\u65b9\u6cd5\u4f1a\u5148\u6821\u9a8cregisterDone\uff0c\u82e5\u4e3atrue\uff0c\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u6267\u884c\u540e\u9762\u903b\u8f91\uff0c\u5c06 OneMerge\u52a0\u5165\u5230pendingMerges\uff0c\u6807\u8bb0registerDone\u4e3atrue\uff0c registerMerge(spec.merges.get(i)); } } return spec; ps: OneMerge\uff0c\u5b83\u63cf\u8ff0\u4e86\u5f85\u5408\u5e76\u7684\u6bb5\u7684\u4fe1\u606f\uff0c\u5305\u542b\u7684\u51e0\u4e2a\u91cd\u8981\u7684\u4fe1\u606f\u5982\u4e0b\u6240\u793a\uff1a List segments\uff1a\u4f7f\u7528\u4e00\u4e2a\u94fe\u8868\u5b58\u653e\u6240\u6709\u5f85\u5408\u5e76\u7684\u6bb5\u4fe1\u606fSegmentCommitInfo\uff0c\u5176\u4e2dSegmentCommitInfo\u7528\u6765\u63cf\u8ff0\u4e00\u4e2a\u6bb5\u7684\u5b8c\u6574\u4fe1\u606f\uff08\u9664\u4e86\u5220\u9664\u4fe1\u606f\uff09\uff0c\u5b83\u5305\u542b\u7684\u4fe1\u606f\u4ee5\u53ca\u5bf9\u5e94\u5728\u7d22\u5f15\u6587\u4ef6\u7684\u5185\u5bb9 SegmentCommitInfo info\uff1a\u8be5\u5b57\u6bb5\u5728\u5f53\u524d\u9636\u6bb5\u662fnull\uff0c\u5728\u540e\u9762\u7684\u6d41\u7a0b\u4e2d\u4f1a\u88ab\u8d4b\u503c\uff0c\u5b83\u63cf\u8ff0\u7684\u662f\u5408\u5e76\u540e\u7684\u65b0\u6bb5\u7684\u4fe1\u606f List readers\uff1a\u8be5\u5b57\u6bb5\u5728\u5f53\u524d\u9636\u6bb5\u662fnull\uff0c\u5728\u540e\u9762\u7684\u6d41\u7a0b\u4e2d\u4f1a\u88ab\u8d4b\u503c\uff0creaders\u4e2d\u7684\u6bcf\u4e00\u4e2aSegmentReader\u63cf\u8ff0\u7684\u662f\u67d0\u4e2a\u5f85\u5408\u5e76\u7684\u6bb5\u7684\u4fe1\u606f\uff0cSegmentReader\u7684\u4ecb\u7ecd\u53ef\u4ee5\u770bSegmentReader\u7cfb\u5217\u6587\u7ae0 List hardLiveDocs\uff1a\u8be5\u5b57\u6bb5\u5728\u5f53\u524d\u9636\u6bb5\u662fnull\uff0c\u5728\u540e\u9762\u7684\u6d41\u7a0b\u4e2d\u4f1a\u88ab\u8d4b\u503c\uff0chardLiveDocs\u4e2d\u7684\u6bcf\u4e00\u4e2aBits\u63cf\u8ff0\u7684\u662f\u67d0\u4e2a\u5f85\u5408\u5e76\u7684\u6bb5\u4e2d\u88ab\u6807\u8bb0\u4e3a\u5220\u9664\u7684\u6587\u6863\u53f7\u96c6\u5408","title":"org.apache.lucene.index.IndexWriter#updatePendingMerges"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#orgapacheluceneindexconcurrentmergeschedulermerge","text":"\u4eceMergeSource\u6301\u6709\u7684indexWriter\u7684pendingMerges\u961f\u5217\u4e2d\u62c9\u53d6OneMerge\uff0c\u5305\u88c5\u4e3amerge\u7ebf\u7a0b\uff0c\u6267\u884c\u7ebf\u7a0b\uff0c\u66f4\u65b0pendingMerges while (true) { if (maybeStall(mergeSource) == false) { break; } //\u4ecependingMerges\u4e2d\u53d6\u51faOneMerge OneMerge merge = mergeSource.getNextMerge(); // \u4ecemergeSource\u4e2d\u7684OneMerge\u5305\u88c5\u4e3a\u4e00\u4e2aMerge\u7ebf\u7a0b final MergeThread newMergeThread = getMergeThread(mergeSource, merge); mergeThreads.add(newMergeThread); //\u66f4\u65b0\u9650\u6d41\u4fe1\u606f updateIOThrottle(newMergeThread.merge, newMergeThread.rateLimiter); // \u542f\u52a8merge \u7ebf\u7a0b\uff0c\u6267\u884c\u771f\u6b63\u7684merge\u64cd\u4f5c newMergeThread.start(); updateMergeThreads(); } // org.apache.lucene.index.IndexWriter#getNextMerge private synchronized MergePolicy.OneMerge getNextMerge() { if (pendingMerges.size() == 0) { return null; } else { // \u4ecependingMerges\u94fe\u8868\u4e2d\u53d6\u51fa\u7b2c\u4e00\u4e2aOneMerge\uff0c\u6dfb\u52a0\u5230runningMerges\u94fe\u8868\u4e2d MergePolicy.OneMerge merge = pendingMerges.removeFirst(); runningMerges.add(merge); return merge; } } // org.apache.lucene.index.ConcurrentMergeScheduler#updateMergeThreads protected synchronized void updateMergeThreads() { // Only look at threads that are alive & not in the // process of stopping (ie have an active merge): final List<MergeThread> activeMerges = new ArrayList<>(); //\u53d6\u51fa\u6240\u6709\u5f85\u5408\u5e76\u7ebf\u7a0b\uff0c\u5c06\u5176\u52a0\u5165\u5230\u6b63\u5728merge\u7684\u5217\u8868\u4e2d int threadIdx = 0; while (threadIdx < mergeThreads.size()) { final MergeThread mergeThread = mergeThreads.get(threadIdx); if (!mergeThread.isAlive()) { // Prune any dead threads mergeThreads.remove(threadIdx); continue; } activeMerges.add(mergeThread); threadIdx++; } // \u5bf9merge\u5217\u8868\u8fdb\u884c\u5f52\u5e76\u6392\u5e8f,\u6700\u5927\u7684\u6bb5\u6392\u5728\u524d\u9762 /** public int compareTo(MergeThread other) { return Long.compare(other.merge.estimatedMergeBytes, merge.estimatedMergeBytes); } */ CollectionUtil.timSort(activeMerges); final int activeMergeCount = activeMerges.size(); //\u5927\u6bb5\u6570\u91cf\u5904\u7406\uff0c\u4e3a\u4e86\u9650\u6d41 int bigMergeCount = 0; for (threadIdx=activeMergeCount-1;threadIdx>=0;threadIdx--) { MergeThread mergeThread = activeMerges.get(threadIdx); // \u5927\u4e8eMIN_BIG_MERGE_MB = 50.0MB\u7684\u4e3a\u5927\u6bb5 if (mergeThread.merge.estimatedMergeBytes > MIN_BIG_MERGE_MB*1024*1024) { bigMergeCount = 1+threadIdx; break; } } for (threadIdx=0;threadIdx<activeMergeCount;threadIdx++) { MergeThread mergeThread = activeMerges.get(threadIdx); OneMerge merge = mergeThread.merge; // \u5982\u679c\u5f53\u524d\u7684merge\u7ebf\u7a0bid\u5c0f\u4e8e\u5927\u6bb5\u7684\u6570\u91cf-\u6700\u5927\u7ebf\u7a0b\u6570\uff0c\u5219\u6682\u505cmerge final boolean doPause = threadIdx < bigMergeCount - maxThreadCount; double newMBPerSec; //\u6682\u505c if (doPause) { newMBPerSec = 0.0; } else if (merge.maxNumSegments != -1) { newMBPerSec = forceMergeMBPerSec; } else if (doAutoIOThrottle == false) { newMBPerSec = Double.POSITIVE_INFINITY; } else if (merge.estimatedMergeBytes < MIN_BIG_MERGE_MB*1024*1024) { // \u5c0f\u6bb5\u4e0d\u9650\u6d41 newMBPerSec = Double.POSITIVE_INFINITY; } else { newMBPerSec = targetMBPerSec; } MergeRateLimiter rateLimiter = mergeThread.rateLimiter; double curMBPerSec = rateLimiter.getMBPerSec(); rateLimiter.setMBPerSec(newMBPerSec); } } //merge final MergePolicy mergePolicy = config.getMergePolicy(); /** merge\u521d\u59cb\u5316\uff0c 1.\u5c06\u5220\u9664\u6587\u6863\u5199\u5165\u786c\u76d8; 2.\u751f\u6210SegmentCommitInfo\u4ee5\u53ca\u8bca\u65ad\u4fe1\u606f\uff0cMergePolicy.OneMerge.setMergeInfo(SegmentCommitInfo\uff09 */ mergeInit(merge); //\u771f\u6b63\u7684merge\u64cd\u4f5c\uff0c\u8017\u65f6\u64cd\u4f5c\uff0c\u4f46\u4e0d\u6301\u6709IW\u7684\u9501 mergeMiddle(merge, mergePolicy); //\u6b64\u7248\u672c\u6ca1\u6709\u64cd\u4f5c mergeSuccess(merge); //merge\u5b8c\u6210\uff0c\u5524\u9192\u5176\u4ed6\u7ebf\u7a0b\uff0c\u4ecerunningMerges\u5220\u9664\u5df2\u5b8c\u6210\u7684OneMerge mergeFinish(merge); //\u66f4\u65b0pendingMerges\u94fe\u8868 updatePendingMerges(mergePolicy, MergeTrigger.MERGE_FINISHED, merge.maxNumSegments); ------------------------------------------------------------------------- // merge middle private int mergeMiddle(MergePolicy.OneMerge merge, MergePolicy mergePolicy) throws IOException { final SegmentMerger merger = new SegmentMerger(mergeReaders, merge.info.info, infoStream, dirWrapper, globalFieldNumberMap, context); merge.info.setSoftDelCount(Math.toIntExact(softDeleteCount.get())); merge.checkAborted(); merge.mergeStartNS = System.nanoTime(); // This is where all the work happens: if (merger.shouldMerge()) { merger.merge(); } MergeState mergeState = merger.mergeState; assert mergeState.segmentInfo == merge.info.info; merge.info.info.setFiles(new HashSet<>(dirWrapper.getCreatedFiles())); Codec codec = config.getCodec(); // Very important to do this before opening the reader // because codec must know if prox was written for // this segment: boolean useCompoundFile; synchronized (this) { // Guard segmentInfos useCompoundFile = mergePolicy.useCompoundFile(segmentInfos, merge.info, this); } // \u4e3atrue\uff0c\u5219\u521b\u5efa\u590d\u5408\u6587\u4ef6 if (useCompoundFile) { createCompoundFile(infoStream, trackingCFSDir, merge.info.info, context, this::deleteNewFiles); } } ------------------------------------------------------------------------- org.apache.lucene.index.SegmentMerger#merge \u6bb5\u5408\u5e76\u5668\u6267\u884c\u771f\u6b63\u7684merge 1\u3001\u5408\u5e76\u57df\u4fe1\u606f\uff1amergeFieldInfos 2\u3001\u5408\u5e76\u57df\uff1amergeFields() 3\u3001\u5408\u5e76\u6807\u51c6\u5316\u56e0\u5b50\uff1amergeNorms() 4\u3001\u5408\u5e76Points\uff1amergePoints() 5\u3001\u5408\u5e76\u8bcd\u5178\u548c\u5012\u6392\u8868\uff1amergeTerms() 6\u3001\u5408\u5e76docValues\uff1amergeDocValues\uff08\uff09 7\u3001\u5408\u5e76\u8bcd\u5411\u91cf\uff1amergeVectors() MergeState merge() throws IOException { mergeFieldInfos(); int numMerged = mergeFields(); final SegmentWriteState segmentWriteState = new SegmentWriteState(mergeState.infoStream, directory, mergeState.segmentInfo, mergeState.mergeFieldInfos, null, context); final SegmentReadState segmentReadState = new SegmentReadState(directory, mergeState.segmentInfo, mergeState.mergeFieldInfos, IOContext.READ, segmentWriteState.segmentSuffix); if (mergeState.mergeFieldInfos.hasNorms()) { mergeNorms(segmentWriteState); } try (NormsProducer norms = mergeState.mergeFieldInfos.hasNorms() ? codec.normsFormat().normsProducer(segmentReadState) : null) { NormsProducer normsMergeInstance = null; if (norms != null) { // Use the merge instance in order to reuse the same IndexInput for all terms normsMergeInstance = norms.getMergeInstance(); } mergeTerms(segmentWriteState, normsMergeInstance); } if (mergeState.mergeFieldInfos.hasDocValues()) { mergeDocValues(segmentWriteState); } if (mergeState.mergeFieldInfos.hasPointValues()) { mergePoints(segmentWriteState); } if (mergeState.mergeFieldInfos.hasVectors()) { numMerged = mergeVectors(); } // write the merged infos if (mergeState.infoStream.isEnabled(\"SM\")) { t0 = System.nanoTime(); } codec.fieldInfosFormat().write(directory, mergeState.segmentInfo, \"\", mergeState.mergeFieldInfos, context); }","title":"org.apache.lucene.index.ConcurrentMergeScheduler#merge"},{"location":"Lucene/Lucene%20Segment%20Merge%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#5merge","text":"1\u3001\u5bf9\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u4e0d\u9ad8\u7684\u573a\u666f\uff0c\u53ef\u4ee5\u589e\u52a0elasticsearch refresh\u95f4\u9694\uff0c\u51cf\u5c11\u843d\u6bb5\u7684\u9891\u7387\uff0c\u51cf\u5c11IO\u64cd\u4f5c 2\u3001\u8c03\u5927indices.memory.index_buffer_size\uff08\u9ed8\u8ba410%\uff09\uff0cLucene \u7f13\u51b2\u533aramBufferSizeMB\u9ed8\u8ba4\u4e3a16MB 3\u3001\u6839\u636e\u4e1a\u52a1\u9700\u6c42\uff0c\u9002\u5f53\u8c03\u6574\u6bcf\u5c42\u6bb5\u6570\u3001\u5141\u8bb8\u5408\u5e76\u6700\u5927\u6bb5\u5927\u5c0f 4\u3001\u5f53index\u4e0d\u518d\u6709\u5199\u5165\u64cd\u4f5c\u7684\u65f6\u5019\uff0c\u5efa\u8bae\u5bf9\u5176\u8fdb\u884cforce merge\uff1a\u63d0\u5347\u67e5\u8be2\u901f\u5ea6\u3001\u51cf\u5c11\u5185\u5b58\u5f00\u9500\uff0c\u4f8b\u5982\uff1a\u4f7f\u7528\u4f4e\u5cf0\u5b9a\u65f6merge","title":"5\u3001merge\u4f18\u5316\u573a\u666f"},{"location":"Lucene/Lucene%20index%20file%28translation%29/","text":"Introduction This document defines the index file formats used in this version of Lucene. If you are using a different version of Lucene, please consult the copy of docs/ that was distributed with the version you are using. This document attempts to provide a high-level definition of the Apache Lucene file formats. \u4e3b\u8981\u4ecb\u7ecd\u7d22\u5f15\u6587\u4ef6\u7684\u683c\u5f0f\u5b9a\u4e49 Apache\u539f\u6587\u94fe\u63a5 Definitions The fundamental concepts in Lucene are index, document, field and term. \u7d22\u5f15\u3001\u6587\u6863\u3001\u57df\u3001\u8bcd\u9879\u3002 An index contains a sequence of documents. \u4e00\u4e2a\u7d22\u5f15\u5305\u542b\u4e00\u4e2a\u6587\u6863\u5e8f\u5217 A document is a sequence of fields. \u4e00\u4e2a\u6587\u6863\u5305\u542b\u4e00\u7cfb\u5217\u57df A field is a named sequence of terms. \u4e00\u4e2a\u57df\u5305\u542b\u4e00\u7cfb\u5217\u8bcd\u9879 A term is a sequence of bytes. \u4e00\u4e2aterm\u662f\u4e00\u4e2a\u5b57\u8282\u5e8f\u5217\uff0cToken\u662f\u4e00\u79cd\u5728\u5bf9\u6587\u672c\u8fdb\u884c\u5206\u8bcd\u65f6\u4ea7\u751f\u7684\u5bf9\u8c61\uff0c\u5305\u542b\u5206\u8bcd\u5bf9\u8c61\uff08Term\uff09\u7684\u8bcd\u8bed\u5185\u5bb9\uff0c\u8bcd\u8bed\u5728\u6587\u672c\u4e2d\u7684\u5f00\u59cb\u3001\u7ed3\u675f\u4f4d\u7f6e\uff0c\u548c\u4e00\u4e2a\u8bcd\u8bed\u7c7b\u578b\uff08\u5173\u952e\u5b57\u3001\u505c\u7528\u8bcd\uff09\u5b57\u7b26\u4e32\u3002 The same sequence of bytes in two different fields is considered a different term. Thus terms are represented as a pair: the string naming the field, and the bytes within the field. Inverted Indexing The index stores statistics about terms in order to make term-based search more efficient. Lucene's index falls into the family of indexes known as an inverted index. This is because it can list, for a term, the documents that contain it. This is the inverse of the natural relationship, in which documents list terms. \u5012\u6392\u7d22\u5f15\u5b58\u50a8\u4e86terms\u7684\u7edf\u8ba1\uff0c\u4f7f\u57fa\u4e8eterm\u7684\u641c\u7d22\u66f4\u52a0\u9ad8\u6548\u3002Lucene\u7684\u7d22\u5f15\u5c5e\u4e8e\u5012\u6392\u7d22\u5f15 Types of Fields In Lucene, fields may be stored, in which case their text is stored in the index literally, in a non-inverted manner. Fields that are inverted are called indexed. A field may be both stored and indexed. Lucene \u4e2d \u57df\u53ef\u4ee5\u6709\u5e8f\u7684\u88ab\u5b58\u50a8\u5728\u7d22\u5f15\u4e2d\uff0c\u5012\u6392\u540e\u7684\u57df\u88ab\u79f0\u4e3a\u5df2\u7d22\u5f15\uff0c\u4e00\u4e2a\u57df\u53ef\u4ee5\u540c\u65f6\u88ab\u5b58\u50a8\u548c\u7d22\u5f15\u3002 The text of a field may be tokenized into terms to be indexed, or the text of a field may be used literally as a term to be indexed. Most fields are tokenized, but sometimes it is useful for certain identifier fields to be indexed literally. text\u57df\u53ef\u4ee5\u88ab\u6807\u8bb0\u6210\u8981\u7d22\u5f15\u7684terms\uff0c\u6216\u8005\u4e00\u4e2a\u57df\u7684text\u53ef\u4ee5\u6709\u5e8f\u7684\u4f5c\u4e3a\u4e00\u4e2a\u7d22\u5f15\u7684term\u3002 Segments Lucene indexes may be composed of multiple sub-indexes, or segments. Each segment is a fully independent index, which could be searched separately. Indexes evolve by: Creating new segments for newly added documents. Merging existing segments. Searches may involve multiple segments and/or multiple indexes, each index potentially composed of a set of segments. Lucene \u7d22\u5f15\u53ef\u4ee5\u7ec4\u6210\u591a\u4e2a\u5b50\u7d22\u5f15\u6216\u8005\u6bb5\u3002\u6bcf\u4e00\u4e2a\u6bb5\u662f\u4e00\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u5355\u72ec\u88ab\u641c\u7d22\u5230\u3002 \u7d22\u5f15\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6f14\u53d8\uff1a \u4e3a\u65b0\u6dfb\u52a0\u7684\u6587\u6863\u521b\u5efa\u65b0\u6bb5\u3002 \u5408\u5e76\u73b0\u6709\u6bb5\u3002 \u641c\u7d22\u53ef\u80fd\u6d89\u53ca\u591a\u4e2a\u6bb5\u548c/\u6216\u591a\u4e2a\u7d22\u5f15\uff0c\u6bcf\u4e2a\u7d22\u5f15\u53ef\u80fd\u7531\u4e00\u7ec4\u6bb5\u7ec4\u6210\u3002 Document Numbers-\u6587\u6863\u7f16\u53f7 Internally, Lucene refers to documents by an integer document number. The first document added to an index is numbered zero, and each subsequent document added gets a number one greater than the previous. Lucene\u5185\u90e8\uff0c\u6587\u6863\u901a\u8fc7\u6574\u578b\u6587\u6863\u7f16\u53f7\u4e0e\u6587\u6863\u5173\u8054\u3002\u7b2c\u4e00\u4e2a\u6587\u6863\u5165\u5230\u7d22\u5f15\u4e2d\u6587\u6863\u7f16\u53f7\u4e3a0\uff0c\u6bcf\u4e00\u4e2a\u540e\u7eed\u7d22\u5f15\u7684\u6587\u6863\u4f1a\u5728\u4e4b\u524d\u7684\u6587\u6863\u7f16\u53f7\u57fa\u7840\u4e0a\u52a01 Note that a document's number may change, so caution should be taken when storing these numbers outside of Lucene. In particular, numbers may change in the following situations: \u4e00\u4e2a\u6587\u6863\u7684\u7f16\u53f7\u53ef\u80fd\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u4ece\u5916\u90e8\u5b58\u50a8\u5230Lucene\u7684\u65f6\u5019\u8981\u683c\u5916\u6ce8\u610f\u3002\u4e0b\u9762\u7684\u51e0\u79cd\u60c5\u51b5\u53ef\u80fd\u4f1a\u6539\u53d8\u6587\u6863\u7f16\u53f7\uff1a The numbers stored in each segment are unique only within the segment, and must be converted before they can be used in a larger context. The standard technique is to allocate each segment a range of values, based on the range of numbers used in that segment. To convert a document number from a segment to an external value, the segment's base document number is added. To convert an external value back to a segment-specific value, the segment is identified by the range that the external value is in, and the segment's base value is subtracted. For example two five document segments might be combined, so that the first segment has a base value of zero, and the second of five. Document three from the second segment would have an external value of eight. \u53ea\u6709\u5b58\u50a8\u5728\u6bcf\u4e2a\u6bb5\u5185\u7684\u7f16\u53f7\u662f\u552f\u4e00\u7684\uff0c\u5fc5\u987b\u5148\u8fdb\u884c\u8f6c\u6362\uff0c\u624d\u80fd\u5728\u66f4\u5927\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u3002\u6807\u51c6\u7684\u65b9\u6cd5\u662f\u7ed9\u6bcf\u4e2a\u6bb5\u5206\u914d\u4e00\u4e2a\u503c\u7684\u8303\u56f4\uff0c\u8981\u57fa\u4e8e\u8fd9\u4e2a\u6bb5\u53bb\u5206\u914d\u3002\u8981\u5c06\u6587\u6863\u7f16\u53f7\u8f6c\u6362\u4e3a\u5916\u90e8\u503c\uff0c\u9700\u6dfb\u52a0\u6bb5\u7684 \u57fa\u672c \u5355\u636e\u7f16\u53f7\u3002\u8981\u5c06\u5916\u90e8\u503c\u8f6c\u6362\u56de\u6bb5\u7279\u5b9a\u503c\uff0c\u6bb5\u7531\u5916\u90e8\u503c\u6240\u5728\u7684\u8303\u56f4\u6807\u8bc6\uff0c\u5e76\u51cf\u53bb\u6bb5\u7684\u57fa\u503c\u3002\u4f8b\u5982\uff0c\u5c06\u4e24\u4e2a5\u7bc7\u6587\u6863\u7684\u6bb5\u5408\u5e76\uff0c\u7b2c\u4e00\u4e2a\u6bb5\u7684\u57fa\u7840\u503c\u4e3a0\uff0c\u7b2c\u4e8c\u4e2a\u77ed\u7684\u57fa\u7840\u503c\u4e3a5\u3002\u7b2c\u4e8c\u4e2a\u6bb5\u4e2d\u7684\u7b2c\u4e09\u7bc7\u6587\u6863\u7684\u6709\u4e2a\u5916\u90e8\u503c\u4e3a8\u3002 When documents are deleted, gaps are created in the numbering. These are eventually removed as the index evolves through merging. Deleted documents are dropped when segments are merged. A freshly-merged segment thus has no gaps in its numbering. \u6587\u6863\u88ab\u5220\u9664\u65f6\uff0c\u4f1a\u4ea7\u751f\u5e8f\u5217\u4e0a\u7684\u95f4\u9699\u3002\u8fd9\u4e9b\u95f4\u9699\u6700\u7ec8\u4f1a\u5728\u6bb5\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u901a\u8fc7merge\u5904\u7406\u6389\u3002 Index Structure Overview ---\u6240\u4ee5\u7ed3\u6784\u6982\u8ff0 Each segment index maintains the following: Segment info . This contains metadata about a segment, such as the number of documents, what files it uses, and information about how the segment is sorted \u6bb5\u4fe1\u606f\uff1a\u5305\u542b\u6bb5\u5143\u6570\u636e\u4fe1\u606f\uff0c\u4f8b\u5982\uff1a\u6587\u6863\u6570\uff0c\u4f7f\u7528\u7684\u6587\u4ef6\uff0c\u6bb5\u6392\u5e8f\u4fe1\u606f Field names . This contains the set of field names used in the index. \u57df\u540d\u79f0\uff1a\u5305\u542b\u5f53\u524d\u7d22\u5f15\u4e2d\u6240\u6709\u7684\u57df\u540d\u79f0 Stored Field values . This contains, for each document, a list of attribute-value pairs, where the attributes are field names. These are used to store auxiliary information about the document, such as its title, url, or an identifier to access a database. The set of stored fields are what is returned for each hit when searching. This is keyed by document number. \u5b58\u50a8\u7684\u57df\u503c\uff1a\u5305\u542b\u6bcf\u7bc7\u6587\u6863\uff0c\u5c5e\u6027-\u503c \u5bf9\u7684\u5217\u8868\uff1a\u5c5e\u6027\u4e3a\u57df\u540d\uff0c\u7528\u6765\u5b58\u50a8\u6587\u6863\u7684\u8f85\u52a9\u4fe1\u606f\uff0c\u6bd4\u5982title\uff0curl\uff0c\u6216\u8005\u8bbf\u95ee\u6570\u636e\u5e93\u7684identifier\u3002\u8fd9\u4e2a\u5b58\u50a8\u5b57\u6bb5\u96c6\u5408\u5305\u542b\u641c\u7d22\u65f6\u7684hit\u3002\u8fd9\u4e2a\u548c\u6587\u6863\u7f16\u53f7\u5173\u8054\u7684\u3002 Term dictionary . A dictionary containing all of the terms used in all of the indexed fields of all of the documents. The dictionary also contains the number of documents which contain the term, and pointers to the term's frequency and proximity data. term\u8bcd\u5178\uff1a\u5305\u542b\u6240\u6709\u6587\u6863\u7684\u6240\u6709\u88ab\u7d22\u5f15\u57df\u7684\u6240\u6709term\u3002\u8be5\u8bcd\u5178\u8fd8\u5305\u542b\u5305\u542b\u8be5\u672f\u8bed\u7684\u6587\u6863\u6570\u91cf\uff0c\u4ee5\u53ca\u6307\u5411\u8be5\u672f\u8bed\u7684\u9891\u7387\u548c\u63a5\u8fd1\u5ea6\u6570\u636e\u7684\u6307\u9488\u3002 Term Frequency data . For each term in the dictionary, the numbers of all the documents that contain that term, and the frequency of the term in that document, unless frequencies are omitted (IndexOptions.DOCS) \u5bf9\u4e8e\u5b57\u5178\u4e2d\u7684\u6bcf\u4e2a\u672f\u8bed\uff0c\u5305\u542b\u8be5\u672f\u8bed\u7684\u6240\u6709\u6587\u6863\u7684\u7f16\u53f7\uff0c\u4ee5\u53ca\u8be5\u672f\u8bed\u5728\u8be5\u6587\u6863\u4e2d\u7684\u9891\u7387\uff0c\u9664\u975e\u9891\u7387\u88ab\u7701\u7565 Term Proximity data . For each term in the dictionary, the positions that the term occurs in each document. Note that this will not exist if all fields in all documents omit position data. Normalization factors . For each field in each document, a value is stored that is multiplied into the score for hits on that field. Term Vectors . For each field in each document, the term vector (sometimes called document vector) may be stored. A term vector consists of term text and term frequency. To add Term Vectors to your index see the Field constructors Per-document values . Like stored values, these are also keyed by document number, but are generally intended to be loaded into main memory for fast access. Whereas stored values are generally intended for summary results from searches, per-document values are useful for things like scoring factors. Live documents . An optional file indicating which documents are live. Point values . Optional pair of files, recording dimensionally indexed fields, to enable fast numeric range filtering and large numeric values like BigInteger and BigDecimal (1D) and geographic shape intersection (2D, 3D). Details on each of these are provided in their linked pages. \u8bb0\u5f55\u7ef4\u5ea6\u7d22\u5f15\u5b57\u6bb5\uff0c\u4ee5\u542f\u7528\u5feb\u901f\u6570\u503c\u8303\u56f4\u8fc7\u6ee4\u548c\u5927\u6570\u503c\u50cfBigInteger\u3001BigDecimal\u4ee5\u53ca\u5730\u7406\u4f4d\u7f6e\uff082D,3D\uff09 File Naming All files belonging to a segment have the same name with varying extensions. The extensions correspond to the different file formats described below. When using the Compound File format (default for small segments) these files (except for the Segment info file, the Lock file, and Deleted documents file) are collapsed into a single .cfs file (see below for details) \u5c5e\u4e8e\u4e00\u4e2a\u6bb5\u7684\u6240\u6709\u6587\u4ef6\u90fd\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u548c\u4e0d\u540c\u7684\u6269\u5c55\u540d\u3002\u6269\u5c55\u540d\u5bf9\u5e94\u4e8e\u4e0b\u9762\u63cf\u8ff0\u7684\u4e0d\u540c\u6587\u4ef6\u683c\u5f0f\u3002\u4f7f\u7528\u590d\u5408\u6587\u4ef6\u683c\u5f0f\uff08\u9ed8\u8ba4\u7528\u4e8e\u5c0f\u6bb5\uff09\u65f6\uff0c\u8fd9\u4e9b\u6587\u4ef6\uff08\u6bb5\u4fe1\u606f\u6587\u4ef6\u3001\u9501\u5b9a\u6587\u4ef6\u548c\u5df2\u5220\u9664\u6587\u6863\u6587\u4ef6\u9664\u5916\uff09\u5c06\u6298\u53e0\u6210\u5355\u4e2a .cfs \u6587\u4ef6\uff08\u8be6\u60c5\u89c1\u4e0b\u6587 Typically, all segments in an index are stored in a single directory, although this is not required. File names are never re-used. That is, when any file is saved to the Directory it is given a never before used filename. This is achieved using a simple generations approach. For example, the first segments file is segments_1, then segments_2, etc. The generation is a sequential long integer represented in alpha-numeric (base 36) form. \u901a\u5e38\uff0c\u7d22\u5f15\u4e2d\u7684\u6240\u6709\u6bb5\u90fd\u5b58\u50a8\u5728\u5355\u4e2a\u76ee\u5f55\u4e2d\uff0c\u5c3d\u7ba1\u8fd9\u4e0d\u662f\u5fc5\u9700\u7684\u3002 \u6c38\u8fdc\u4e0d\u4f1a\u91cd\u590d\u4f7f\u7528\u6587\u4ef6\u540d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4efb\u4f55\u6587\u4ef6\u88ab\u4fdd\u5b58\u5230\u76ee\u5f55\u65f6\uff0c\u5b83\u4f1a\u88ab\u8d4b\u4e88\u4e00\u4e2a\u4ee5\u524d\u4ece\u672a\u4f7f\u7528\u8fc7\u7684\u6587\u4ef6\u540d\u3002\u8fd9\u662f\u4f7f\u7528\u7b80\u5355\u7684\u751f\u6210\u65b9\u6cd5\u5b9e\u73b0\u7684\u3002\u4f8b\u5982\uff0c\u7b2c\u4e00\u4e2a\u6bb5\u6587\u4ef6\u662fsegments_1\uff0c\u7136\u540e\u662fsegments_2\uff0c\u7b49\u7b49\u3002\u751f\u6210\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u957f\u6574\u6570\uff0c\u4ee5\u5b57\u6bcd\u6570\u5b57\uff08\u57fa\u6570\u4e3a36\uff09\u7684\u5f62\u5f0f\u8868\u793a\u3002 Summary of File Extensions--\u6587\u4ef6\u6269\u5c55\u540d\u6458\u8981 The following table summarizes the names and extensions of the files in Lucene: lucene filenames by extension Name Extension Brief Description Segments File segments_N Stores information about a commit point \u6bb5\u6587\u4ef6 segments_N \u5b58\u50a8\u6709\u5173\u63d0\u4ea4\u70b9\u7684\u4fe1\u606f Lock File write.lock The Write lock prevents multiple IndexWriters from writing to the same file. \u9501\u6587\u4ef6\uff1a\u5199\u9501\u9632\u6b62\u591a\u4e2aIndexWriter\u5199\u5165\u540c\u4e00\u4e2a\u6587\u4ef6 Segment Info .si Stores metadata about a segment \u6bb5\u4fe1\u606f\uff1a\u5b58\u50a8\u6bb5\u7684\u5143\u6570\u636e\u4fe1\u606f Compound File .cfs, .cfe An optional \"virtual\" file consisting of all the other index files for systems that frequently run out of file handles. \u590d\u5408\u6587\u4ef6\uff1a\u4e00\u4e2a\u53ef\u9009\u7684\u201d\u865a\u62df\u201c\u6587\u4ef6\uff0c\u63a7\u5236\u6587\u4ef6\u53e5\u67c4\u8fc7\u591a\u3002 Fields .fnm Stores information about the fields \u57df\uff1a\u5b58\u50a8\u57df\u4fe1\u606f Field Index .fdx Contains pointers to field data \u57df\u7d22\u5f15\uff1a\u5305\u542b\u57df\u503c\u7684\u6307\u9488 Field Data .fdt The stored fields for documents \u57df\u6570\u636e\uff1a\u6587\u6863\u5b58\u50a8\u7684\u6240\u6709\u7684\u57df Term Dictionary .tim The term dictionary, stores term info \u8bcd\u9879\u8bcd\u5178\uff1aterm\u8bcd\u5178\uff0c\u5b58\u50a8term\u4fe1\u606f Term Index .tip The index into the Term Dictionary term\u7d22\u5f15\uff1aterm\u8bcd\u5178\u4e2d\u7684\u7d22\u5f15 Frequencies .doc Contains the list of docs which contain each term along with frequency \u9891\u6570\uff1a\u5305\u542b\u6587\u6863\u5217\u8868\u4e2d\u6bcf\u4e2aterm\u548c\u8bcd\u9891 Positions .pos Stores position information about where a term occurs in the index \u4f4d\u7f6e\u4fe1\u606f\uff1a\u5b58\u50a8term\u5728\u7d22\u5f15\u4e2d\u7684\u4f4d\u7f6e\u4fe1\u606f\u3002 Payloads .pay Stores additional per-position metadata information such as character offsets and user payloads \u5b58\u50a8\u989d\u5916\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u5143\u6570\u636e\u4fe1\u606f\uff0c\u4f8b\u5982\u5b57\u7b26\u504f\u79fb\u91cf\u548c\u7528\u6237\u7684payloads Norms .nvd, .nvm Encodes length and boost factors for docs and fields Norms\uff1a\u7f16\u7801\u6587\u6863\u548c\u57df\u7684\u957f\u5ea6\u548c\u63d0\u5347\u56e0\u5b50 Per-Document Values .dvd, .dvm Encodes additional scoring factors or other per-document information. \u7f16\u7801\u989d\u5916\u7684\u8bc4\u5206\u56e0\u5b50\u6216\u5176\u4ed6\u6bcf\u4e2a\u6587\u6863\u7684\u4fe1\u606f Term Vector Index .tvx Stores offset into the document data file \u5b58\u50a8\u504f\u79fb\u91cf\u5230\u6587\u6863\u6570\u636e\u6587\u4ef6 Term Vector Data .tvd Contains term vector data. \u5305\u542bterm\u5411\u91cf\u6587\u4ef6 Live Documents .liv Info about what documents are live \u6709\u5173\u54ea\u4e9b\u6587\u6863\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u7684\u4fe1\u606f Point values .dii, .dim Holds indexed points, if any \u5b58\u50a8\u7d22\u5f15\u7684points Lock File The write lock, which is stored in the index directory by default, is named \"write.lock\". If the lock directory is different from the index directory then the write lock will be named \"XXXX-write.lock\" where XXXX is a unique prefix derived from the full path to the index directory. When this file is present, a writer is currently modifying the index (adding or removing documents). This lock file ensures that only one writer is modifying the index at a time. \u5199\u9501\uff0c\u5b58\u50a8\u5728\u7d22\u5f15\u76ee\u5f55\u7684\u5199\u9501\u6587\u4ef6\uff0c\u9ed8\u8ba4\u547d\u540d\u4e3awrite.lock\u3002\u5982\u679c\u8fd9\u4e2a\u9501\u76ee\u5f55\u548c\u7d22\u5f15\u76ee\u5f55\u4e0d\u540c\uff0c\u5199\u9501\u4f1a\u547d\u540d\u4e3a\u201dXXX-write.lock\u201c\uff0c\u5176\u4e2dXXX\u662f\u7d22\u5f15\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\u6d3e\u751f\u7684\u552f\u4e00\u524d\u7f00\u3002\u5f53\u6b64\u6587\u4ef6\u5b58\u5728\u65f6\uff0cwriter\u5f53\u524d\u6b63\u5728\u4fee\u6539\u7d22\u5f15\uff08\u589e\u52a0\u6216\u8005\u5220\u9664\u6587\u6863\uff09\uff0c\u8fd9\u4e2a\u9501\u6587\u4ef6\u786e\u4fdd\u53ea\u6709\u4e00\u4e2awriter\u540c\u65f6\u4fee\u6539\u4e00\u4e2a\u7d22\u5f15\u3002","title":"Lucene index file(translation)"},{"location":"Lucene/Lucene%20index%20file%28translation%29/#introduction","text":"This document defines the index file formats used in this version of Lucene. If you are using a different version of Lucene, please consult the copy of docs/ that was distributed with the version you are using. This document attempts to provide a high-level definition of the Apache Lucene file formats. \u4e3b\u8981\u4ecb\u7ecd\u7d22\u5f15\u6587\u4ef6\u7684\u683c\u5f0f\u5b9a\u4e49 Apache\u539f\u6587\u94fe\u63a5","title":"Introduction"},{"location":"Lucene/Lucene%20index%20file%28translation%29/#definitions","text":"The fundamental concepts in Lucene are index, document, field and term. \u7d22\u5f15\u3001\u6587\u6863\u3001\u57df\u3001\u8bcd\u9879\u3002 An index contains a sequence of documents. \u4e00\u4e2a\u7d22\u5f15\u5305\u542b\u4e00\u4e2a\u6587\u6863\u5e8f\u5217 A document is a sequence of fields. \u4e00\u4e2a\u6587\u6863\u5305\u542b\u4e00\u7cfb\u5217\u57df A field is a named sequence of terms. \u4e00\u4e2a\u57df\u5305\u542b\u4e00\u7cfb\u5217\u8bcd\u9879 A term is a sequence of bytes. \u4e00\u4e2aterm\u662f\u4e00\u4e2a\u5b57\u8282\u5e8f\u5217\uff0cToken\u662f\u4e00\u79cd\u5728\u5bf9\u6587\u672c\u8fdb\u884c\u5206\u8bcd\u65f6\u4ea7\u751f\u7684\u5bf9\u8c61\uff0c\u5305\u542b\u5206\u8bcd\u5bf9\u8c61\uff08Term\uff09\u7684\u8bcd\u8bed\u5185\u5bb9\uff0c\u8bcd\u8bed\u5728\u6587\u672c\u4e2d\u7684\u5f00\u59cb\u3001\u7ed3\u675f\u4f4d\u7f6e\uff0c\u548c\u4e00\u4e2a\u8bcd\u8bed\u7c7b\u578b\uff08\u5173\u952e\u5b57\u3001\u505c\u7528\u8bcd\uff09\u5b57\u7b26\u4e32\u3002 The same sequence of bytes in two different fields is considered a different term. Thus terms are represented as a pair: the string naming the field, and the bytes within the field.","title":"Definitions"},{"location":"Lucene/Lucene%20index%20file%28translation%29/#inverted-indexing","text":"The index stores statistics about terms in order to make term-based search more efficient. Lucene's index falls into the family of indexes known as an inverted index. This is because it can list, for a term, the documents that contain it. This is the inverse of the natural relationship, in which documents list terms. \u5012\u6392\u7d22\u5f15\u5b58\u50a8\u4e86terms\u7684\u7edf\u8ba1\uff0c\u4f7f\u57fa\u4e8eterm\u7684\u641c\u7d22\u66f4\u52a0\u9ad8\u6548\u3002Lucene\u7684\u7d22\u5f15\u5c5e\u4e8e\u5012\u6392\u7d22\u5f15","title":"Inverted Indexing"},{"location":"Lucene/Lucene%20index%20file%28translation%29/#types-of-fields","text":"In Lucene, fields may be stored, in which case their text is stored in the index literally, in a non-inverted manner. Fields that are inverted are called indexed. A field may be both stored and indexed. Lucene \u4e2d \u57df\u53ef\u4ee5\u6709\u5e8f\u7684\u88ab\u5b58\u50a8\u5728\u7d22\u5f15\u4e2d\uff0c\u5012\u6392\u540e\u7684\u57df\u88ab\u79f0\u4e3a\u5df2\u7d22\u5f15\uff0c\u4e00\u4e2a\u57df\u53ef\u4ee5\u540c\u65f6\u88ab\u5b58\u50a8\u548c\u7d22\u5f15\u3002 The text of a field may be tokenized into terms to be indexed, or the text of a field may be used literally as a term to be indexed. Most fields are tokenized, but sometimes it is useful for certain identifier fields to be indexed literally. text\u57df\u53ef\u4ee5\u88ab\u6807\u8bb0\u6210\u8981\u7d22\u5f15\u7684terms\uff0c\u6216\u8005\u4e00\u4e2a\u57df\u7684text\u53ef\u4ee5\u6709\u5e8f\u7684\u4f5c\u4e3a\u4e00\u4e2a\u7d22\u5f15\u7684term\u3002","title":"Types of Fields"},{"location":"Lucene/Lucene%20index%20file%28translation%29/#segments","text":"Lucene indexes may be composed of multiple sub-indexes, or segments. Each segment is a fully independent index, which could be searched separately. Indexes evolve by: Creating new segments for newly added documents. Merging existing segments. Searches may involve multiple segments and/or multiple indexes, each index potentially composed of a set of segments. Lucene \u7d22\u5f15\u53ef\u4ee5\u7ec4\u6210\u591a\u4e2a\u5b50\u7d22\u5f15\u6216\u8005\u6bb5\u3002\u6bcf\u4e00\u4e2a\u6bb5\u662f\u4e00\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u5355\u72ec\u88ab\u641c\u7d22\u5230\u3002 \u7d22\u5f15\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6f14\u53d8\uff1a \u4e3a\u65b0\u6dfb\u52a0\u7684\u6587\u6863\u521b\u5efa\u65b0\u6bb5\u3002 \u5408\u5e76\u73b0\u6709\u6bb5\u3002 \u641c\u7d22\u53ef\u80fd\u6d89\u53ca\u591a\u4e2a\u6bb5\u548c/\u6216\u591a\u4e2a\u7d22\u5f15\uff0c\u6bcf\u4e2a\u7d22\u5f15\u53ef\u80fd\u7531\u4e00\u7ec4\u6bb5\u7ec4\u6210\u3002","title":"Segments"},{"location":"Lucene/Lucene%20index%20file%28translation%29/#document-numbers-","text":"Internally, Lucene refers to documents by an integer document number. The first document added to an index is numbered zero, and each subsequent document added gets a number one greater than the previous. Lucene\u5185\u90e8\uff0c\u6587\u6863\u901a\u8fc7\u6574\u578b\u6587\u6863\u7f16\u53f7\u4e0e\u6587\u6863\u5173\u8054\u3002\u7b2c\u4e00\u4e2a\u6587\u6863\u5165\u5230\u7d22\u5f15\u4e2d\u6587\u6863\u7f16\u53f7\u4e3a0\uff0c\u6bcf\u4e00\u4e2a\u540e\u7eed\u7d22\u5f15\u7684\u6587\u6863\u4f1a\u5728\u4e4b\u524d\u7684\u6587\u6863\u7f16\u53f7\u57fa\u7840\u4e0a\u52a01 Note that a document's number may change, so caution should be taken when storing these numbers outside of Lucene. In particular, numbers may change in the following situations: \u4e00\u4e2a\u6587\u6863\u7684\u7f16\u53f7\u53ef\u80fd\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u4ece\u5916\u90e8\u5b58\u50a8\u5230Lucene\u7684\u65f6\u5019\u8981\u683c\u5916\u6ce8\u610f\u3002\u4e0b\u9762\u7684\u51e0\u79cd\u60c5\u51b5\u53ef\u80fd\u4f1a\u6539\u53d8\u6587\u6863\u7f16\u53f7\uff1a The numbers stored in each segment are unique only within the segment, and must be converted before they can be used in a larger context. The standard technique is to allocate each segment a range of values, based on the range of numbers used in that segment. To convert a document number from a segment to an external value, the segment's base document number is added. To convert an external value back to a segment-specific value, the segment is identified by the range that the external value is in, and the segment's base value is subtracted. For example two five document segments might be combined, so that the first segment has a base value of zero, and the second of five. Document three from the second segment would have an external value of eight. \u53ea\u6709\u5b58\u50a8\u5728\u6bcf\u4e2a\u6bb5\u5185\u7684\u7f16\u53f7\u662f\u552f\u4e00\u7684\uff0c\u5fc5\u987b\u5148\u8fdb\u884c\u8f6c\u6362\uff0c\u624d\u80fd\u5728\u66f4\u5927\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u3002\u6807\u51c6\u7684\u65b9\u6cd5\u662f\u7ed9\u6bcf\u4e2a\u6bb5\u5206\u914d\u4e00\u4e2a\u503c\u7684\u8303\u56f4\uff0c\u8981\u57fa\u4e8e\u8fd9\u4e2a\u6bb5\u53bb\u5206\u914d\u3002\u8981\u5c06\u6587\u6863\u7f16\u53f7\u8f6c\u6362\u4e3a\u5916\u90e8\u503c\uff0c\u9700\u6dfb\u52a0\u6bb5\u7684 \u57fa\u672c \u5355\u636e\u7f16\u53f7\u3002\u8981\u5c06\u5916\u90e8\u503c\u8f6c\u6362\u56de\u6bb5\u7279\u5b9a\u503c\uff0c\u6bb5\u7531\u5916\u90e8\u503c\u6240\u5728\u7684\u8303\u56f4\u6807\u8bc6\uff0c\u5e76\u51cf\u53bb\u6bb5\u7684\u57fa\u503c\u3002\u4f8b\u5982\uff0c\u5c06\u4e24\u4e2a5\u7bc7\u6587\u6863\u7684\u6bb5\u5408\u5e76\uff0c\u7b2c\u4e00\u4e2a\u6bb5\u7684\u57fa\u7840\u503c\u4e3a0\uff0c\u7b2c\u4e8c\u4e2a\u77ed\u7684\u57fa\u7840\u503c\u4e3a5\u3002\u7b2c\u4e8c\u4e2a\u6bb5\u4e2d\u7684\u7b2c\u4e09\u7bc7\u6587\u6863\u7684\u6709\u4e2a\u5916\u90e8\u503c\u4e3a8\u3002 When documents are deleted, gaps are created in the numbering. These are eventually removed as the index evolves through merging. Deleted documents are dropped when segments are merged. A freshly-merged segment thus has no gaps in its numbering. \u6587\u6863\u88ab\u5220\u9664\u65f6\uff0c\u4f1a\u4ea7\u751f\u5e8f\u5217\u4e0a\u7684\u95f4\u9699\u3002\u8fd9\u4e9b\u95f4\u9699\u6700\u7ec8\u4f1a\u5728\u6bb5\u5408\u5e76\u7684\u8fc7\u7a0b\u4e2d\u901a\u8fc7merge\u5904\u7406\u6389\u3002","title":"Document Numbers-\u6587\u6863\u7f16\u53f7"},{"location":"Lucene/Lucene%20index%20file%28translation%29/#index-structure-overview-","text":"Each segment index maintains the following: Segment info . This contains metadata about a segment, such as the number of documents, what files it uses, and information about how the segment is sorted \u6bb5\u4fe1\u606f\uff1a\u5305\u542b\u6bb5\u5143\u6570\u636e\u4fe1\u606f\uff0c\u4f8b\u5982\uff1a\u6587\u6863\u6570\uff0c\u4f7f\u7528\u7684\u6587\u4ef6\uff0c\u6bb5\u6392\u5e8f\u4fe1\u606f Field names . This contains the set of field names used in the index. \u57df\u540d\u79f0\uff1a\u5305\u542b\u5f53\u524d\u7d22\u5f15\u4e2d\u6240\u6709\u7684\u57df\u540d\u79f0 Stored Field values . This contains, for each document, a list of attribute-value pairs, where the attributes are field names. These are used to store auxiliary information about the document, such as its title, url, or an identifier to access a database. The set of stored fields are what is returned for each hit when searching. This is keyed by document number. \u5b58\u50a8\u7684\u57df\u503c\uff1a\u5305\u542b\u6bcf\u7bc7\u6587\u6863\uff0c\u5c5e\u6027-\u503c \u5bf9\u7684\u5217\u8868\uff1a\u5c5e\u6027\u4e3a\u57df\u540d\uff0c\u7528\u6765\u5b58\u50a8\u6587\u6863\u7684\u8f85\u52a9\u4fe1\u606f\uff0c\u6bd4\u5982title\uff0curl\uff0c\u6216\u8005\u8bbf\u95ee\u6570\u636e\u5e93\u7684identifier\u3002\u8fd9\u4e2a\u5b58\u50a8\u5b57\u6bb5\u96c6\u5408\u5305\u542b\u641c\u7d22\u65f6\u7684hit\u3002\u8fd9\u4e2a\u548c\u6587\u6863\u7f16\u53f7\u5173\u8054\u7684\u3002 Term dictionary . A dictionary containing all of the terms used in all of the indexed fields of all of the documents. The dictionary also contains the number of documents which contain the term, and pointers to the term's frequency and proximity data. term\u8bcd\u5178\uff1a\u5305\u542b\u6240\u6709\u6587\u6863\u7684\u6240\u6709\u88ab\u7d22\u5f15\u57df\u7684\u6240\u6709term\u3002\u8be5\u8bcd\u5178\u8fd8\u5305\u542b\u5305\u542b\u8be5\u672f\u8bed\u7684\u6587\u6863\u6570\u91cf\uff0c\u4ee5\u53ca\u6307\u5411\u8be5\u672f\u8bed\u7684\u9891\u7387\u548c\u63a5\u8fd1\u5ea6\u6570\u636e\u7684\u6307\u9488\u3002 Term Frequency data . For each term in the dictionary, the numbers of all the documents that contain that term, and the frequency of the term in that document, unless frequencies are omitted (IndexOptions.DOCS) \u5bf9\u4e8e\u5b57\u5178\u4e2d\u7684\u6bcf\u4e2a\u672f\u8bed\uff0c\u5305\u542b\u8be5\u672f\u8bed\u7684\u6240\u6709\u6587\u6863\u7684\u7f16\u53f7\uff0c\u4ee5\u53ca\u8be5\u672f\u8bed\u5728\u8be5\u6587\u6863\u4e2d\u7684\u9891\u7387\uff0c\u9664\u975e\u9891\u7387\u88ab\u7701\u7565 Term Proximity data . For each term in the dictionary, the positions that the term occurs in each document. Note that this will not exist if all fields in all documents omit position data. Normalization factors . For each field in each document, a value is stored that is multiplied into the score for hits on that field. Term Vectors . For each field in each document, the term vector (sometimes called document vector) may be stored. A term vector consists of term text and term frequency. To add Term Vectors to your index see the Field constructors Per-document values . Like stored values, these are also keyed by document number, but are generally intended to be loaded into main memory for fast access. Whereas stored values are generally intended for summary results from searches, per-document values are useful for things like scoring factors. Live documents . An optional file indicating which documents are live. Point values . Optional pair of files, recording dimensionally indexed fields, to enable fast numeric range filtering and large numeric values like BigInteger and BigDecimal (1D) and geographic shape intersection (2D, 3D). Details on each of these are provided in their linked pages. \u8bb0\u5f55\u7ef4\u5ea6\u7d22\u5f15\u5b57\u6bb5\uff0c\u4ee5\u542f\u7528\u5feb\u901f\u6570\u503c\u8303\u56f4\u8fc7\u6ee4\u548c\u5927\u6570\u503c\u50cfBigInteger\u3001BigDecimal\u4ee5\u53ca\u5730\u7406\u4f4d\u7f6e\uff082D,3D\uff09","title":"Index Structure Overview ---\u6240\u4ee5\u7ed3\u6784\u6982\u8ff0"},{"location":"Lucene/Lucene%20index%20file%28translation%29/#file-naming","text":"All files belonging to a segment have the same name with varying extensions. The extensions correspond to the different file formats described below. When using the Compound File format (default for small segments) these files (except for the Segment info file, the Lock file, and Deleted documents file) are collapsed into a single .cfs file (see below for details) \u5c5e\u4e8e\u4e00\u4e2a\u6bb5\u7684\u6240\u6709\u6587\u4ef6\u90fd\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u548c\u4e0d\u540c\u7684\u6269\u5c55\u540d\u3002\u6269\u5c55\u540d\u5bf9\u5e94\u4e8e\u4e0b\u9762\u63cf\u8ff0\u7684\u4e0d\u540c\u6587\u4ef6\u683c\u5f0f\u3002\u4f7f\u7528\u590d\u5408\u6587\u4ef6\u683c\u5f0f\uff08\u9ed8\u8ba4\u7528\u4e8e\u5c0f\u6bb5\uff09\u65f6\uff0c\u8fd9\u4e9b\u6587\u4ef6\uff08\u6bb5\u4fe1\u606f\u6587\u4ef6\u3001\u9501\u5b9a\u6587\u4ef6\u548c\u5df2\u5220\u9664\u6587\u6863\u6587\u4ef6\u9664\u5916\uff09\u5c06\u6298\u53e0\u6210\u5355\u4e2a .cfs \u6587\u4ef6\uff08\u8be6\u60c5\u89c1\u4e0b\u6587 Typically, all segments in an index are stored in a single directory, although this is not required. File names are never re-used. That is, when any file is saved to the Directory it is given a never before used filename. This is achieved using a simple generations approach. For example, the first segments file is segments_1, then segments_2, etc. The generation is a sequential long integer represented in alpha-numeric (base 36) form. \u901a\u5e38\uff0c\u7d22\u5f15\u4e2d\u7684\u6240\u6709\u6bb5\u90fd\u5b58\u50a8\u5728\u5355\u4e2a\u76ee\u5f55\u4e2d\uff0c\u5c3d\u7ba1\u8fd9\u4e0d\u662f\u5fc5\u9700\u7684\u3002 \u6c38\u8fdc\u4e0d\u4f1a\u91cd\u590d\u4f7f\u7528\u6587\u4ef6\u540d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4efb\u4f55\u6587\u4ef6\u88ab\u4fdd\u5b58\u5230\u76ee\u5f55\u65f6\uff0c\u5b83\u4f1a\u88ab\u8d4b\u4e88\u4e00\u4e2a\u4ee5\u524d\u4ece\u672a\u4f7f\u7528\u8fc7\u7684\u6587\u4ef6\u540d\u3002\u8fd9\u662f\u4f7f\u7528\u7b80\u5355\u7684\u751f\u6210\u65b9\u6cd5\u5b9e\u73b0\u7684\u3002\u4f8b\u5982\uff0c\u7b2c\u4e00\u4e2a\u6bb5\u6587\u4ef6\u662fsegments_1\uff0c\u7136\u540e\u662fsegments_2\uff0c\u7b49\u7b49\u3002\u751f\u6210\u662f\u4e00\u4e2a\u8fde\u7eed\u7684\u957f\u6574\u6570\uff0c\u4ee5\u5b57\u6bcd\u6570\u5b57\uff08\u57fa\u6570\u4e3a36\uff09\u7684\u5f62\u5f0f\u8868\u793a\u3002","title":"File Naming"},{"location":"Lucene/Lucene%20index%20file%28translation%29/#summary-of-file-extensions-","text":"The following table summarizes the names and extensions of the files in Lucene: lucene filenames by extension","title":"Summary of File Extensions--\u6587\u4ef6\u6269\u5c55\u540d\u6458\u8981"},{"location":"Lucene/Lucene%20index%20file%28translation%29/#name-extension-brief-description","text":"Segments File segments_N Stores information about a commit point \u6bb5\u6587\u4ef6 segments_N \u5b58\u50a8\u6709\u5173\u63d0\u4ea4\u70b9\u7684\u4fe1\u606f Lock File write.lock The Write lock prevents multiple IndexWriters from writing to the same file. \u9501\u6587\u4ef6\uff1a\u5199\u9501\u9632\u6b62\u591a\u4e2aIndexWriter\u5199\u5165\u540c\u4e00\u4e2a\u6587\u4ef6 Segment Info .si Stores metadata about a segment \u6bb5\u4fe1\u606f\uff1a\u5b58\u50a8\u6bb5\u7684\u5143\u6570\u636e\u4fe1\u606f Compound File .cfs, .cfe An optional \"virtual\" file consisting of all the other index files for systems that frequently run out of file handles. \u590d\u5408\u6587\u4ef6\uff1a\u4e00\u4e2a\u53ef\u9009\u7684\u201d\u865a\u62df\u201c\u6587\u4ef6\uff0c\u63a7\u5236\u6587\u4ef6\u53e5\u67c4\u8fc7\u591a\u3002 Fields .fnm Stores information about the fields \u57df\uff1a\u5b58\u50a8\u57df\u4fe1\u606f Field Index .fdx Contains pointers to field data \u57df\u7d22\u5f15\uff1a\u5305\u542b\u57df\u503c\u7684\u6307\u9488 Field Data .fdt The stored fields for documents \u57df\u6570\u636e\uff1a\u6587\u6863\u5b58\u50a8\u7684\u6240\u6709\u7684\u57df Term Dictionary .tim The term dictionary, stores term info \u8bcd\u9879\u8bcd\u5178\uff1aterm\u8bcd\u5178\uff0c\u5b58\u50a8term\u4fe1\u606f Term Index .tip The index into the Term Dictionary term\u7d22\u5f15\uff1aterm\u8bcd\u5178\u4e2d\u7684\u7d22\u5f15 Frequencies .doc Contains the list of docs which contain each term along with frequency \u9891\u6570\uff1a\u5305\u542b\u6587\u6863\u5217\u8868\u4e2d\u6bcf\u4e2aterm\u548c\u8bcd\u9891 Positions .pos Stores position information about where a term occurs in the index \u4f4d\u7f6e\u4fe1\u606f\uff1a\u5b58\u50a8term\u5728\u7d22\u5f15\u4e2d\u7684\u4f4d\u7f6e\u4fe1\u606f\u3002 Payloads .pay Stores additional per-position metadata information such as character offsets and user payloads \u5b58\u50a8\u989d\u5916\u7684\u6bcf\u4e2a\u4f4d\u7f6e\u5143\u6570\u636e\u4fe1\u606f\uff0c\u4f8b\u5982\u5b57\u7b26\u504f\u79fb\u91cf\u548c\u7528\u6237\u7684payloads Norms .nvd, .nvm Encodes length and boost factors for docs and fields Norms\uff1a\u7f16\u7801\u6587\u6863\u548c\u57df\u7684\u957f\u5ea6\u548c\u63d0\u5347\u56e0\u5b50 Per-Document Values .dvd, .dvm Encodes additional scoring factors or other per-document information. \u7f16\u7801\u989d\u5916\u7684\u8bc4\u5206\u56e0\u5b50\u6216\u5176\u4ed6\u6bcf\u4e2a\u6587\u6863\u7684\u4fe1\u606f Term Vector Index .tvx Stores offset into the document data file \u5b58\u50a8\u504f\u79fb\u91cf\u5230\u6587\u6863\u6570\u636e\u6587\u4ef6 Term Vector Data .tvd Contains term vector data. \u5305\u542bterm\u5411\u91cf\u6587\u4ef6 Live Documents .liv Info about what documents are live \u6709\u5173\u54ea\u4e9b\u6587\u6863\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u7684\u4fe1\u606f Point values .dii, .dim Holds indexed points, if any \u5b58\u50a8\u7d22\u5f15\u7684points","title":"Name   Extension   Brief Description"},{"location":"Lucene/Lucene%20index%20file%28translation%29/#lock-file","text":"The write lock, which is stored in the index directory by default, is named \"write.lock\". If the lock directory is different from the index directory then the write lock will be named \"XXXX-write.lock\" where XXXX is a unique prefix derived from the full path to the index directory. When this file is present, a writer is currently modifying the index (adding or removing documents). This lock file ensures that only one writer is modifying the index at a time. \u5199\u9501\uff0c\u5b58\u50a8\u5728\u7d22\u5f15\u76ee\u5f55\u7684\u5199\u9501\u6587\u4ef6\uff0c\u9ed8\u8ba4\u547d\u540d\u4e3awrite.lock\u3002\u5982\u679c\u8fd9\u4e2a\u9501\u76ee\u5f55\u548c\u7d22\u5f15\u76ee\u5f55\u4e0d\u540c\uff0c\u5199\u9501\u4f1a\u547d\u540d\u4e3a\u201dXXX-write.lock\u201c\uff0c\u5176\u4e2dXXX\u662f\u7d22\u5f15\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\u6d3e\u751f\u7684\u552f\u4e00\u524d\u7f00\u3002\u5f53\u6b64\u6587\u4ef6\u5b58\u5728\u65f6\uff0cwriter\u5f53\u524d\u6b63\u5728\u4fee\u6539\u7d22\u5f15\uff08\u589e\u52a0\u6216\u8005\u5220\u9664\u6587\u6863\uff09\uff0c\u8fd9\u4e2a\u9501\u6587\u4ef6\u786e\u4fdd\u53ea\u6709\u4e00\u4e2awriter\u540c\u65f6\u4fee\u6539\u4e00\u4e2a\u7d22\u5f15\u3002","title":"Lock File"},{"location":"Lucene/Similarity/","text":"Similarity Cosine Similarity \u516c\u5f0f\uff1a \u4ee3\u7801\uff1a double dotProduct = 0.0; double normA = 0.0; double normB = 0.0; for (int i = 0; i < vectorA.length; i++) { dotProduct += vectorA[i] * vectorB[i]; normA += Math.pow(vectorA[i], 2); normB += Math.pow(vectorB[i], 2); } double d = dotProduct / (Math.sqrt(normA) * Math.sqrt(normB)); return Precision.round(d, 8); \u6b27\u6c0f\u8ddd\u79bb \u66fc\u54c8\u987f\u8ddd\u79bb","title":"Similarity"},{"location":"Lucene/Similarity/#similarity","text":"","title":"Similarity"},{"location":"Lucene/Similarity/#cosine-similarity","text":"\u516c\u5f0f\uff1a \u4ee3\u7801\uff1a double dotProduct = 0.0; double normA = 0.0; double normB = 0.0; for (int i = 0; i < vectorA.length; i++) { dotProduct += vectorA[i] * vectorB[i]; normA += Math.pow(vectorA[i], 2); normB += Math.pow(vectorB[i], 2); } double d = dotProduct / (Math.sqrt(normA) * Math.sqrt(normB)); return Precision.round(d, 8);","title":"Cosine Similarity"},{"location":"Lucene/Similarity/#_1","text":"","title":"\u6b27\u6c0f\u8ddd\u79bb"},{"location":"Lucene/Similarity/#_2","text":"","title":"\u66fc\u54c8\u987f\u8ddd\u79bb"}]}